<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Sohan's Blog]]></title>
  <link href="http://smsohan.com/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2021-02-19T09:42:23-07:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 3: Writing]]></title>
    <link href="http://smsohan.com/blog/2021/01/17/software-architecture-part-3-writing/"/>
    <updated>2021-01-17T17:36:00-07:00</updated>
    <id>http://smsohan.com/blog/2021/01/17/software-architecture-part-3-writing</id>
    <content type="html"><![CDATA[<p>An architect first needs to write for herself, and then for her team. Let me explain a bit.</p>

<p>An architect takes the trio of requirements, people, and environment, and does her research to design the most delightful system. In her research process, she uses her past experience as well as the experience of others. Even a moderately complex system design involves a lot of trade-offs without clear winners. For example, given that there are tens of different databases one can choose, how can she recommend a specific one? Only a clear mind can produce a logically sound write-up. So, in the process of writing and rewriting her design rationale, an architect can strengthen the soundness of her own logic behind the choices made. This is also known as covering one's ass.</p>

<p>Secondly, an architect is a busy person and can't scale her time if she has to personally explain her design rationale to everyone. In fact, as she's designing the system and making certain assumptions, she must seek feedback from the team to help her find alternatives or blind-spots. Writing scales infinitely (e.g. J.K. Rowling), and after all, an architect must use a scalable system for herself, right?</p>

<iframe type="text/html" widdatth="336" height="550" frameborder="0" allowfullscreen style="max-width:100%" src="https://read.amazon.ca/kp/card?asin=B07NPN5HTP&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_TRBbGbF1JZ1FB" ></iframe>




<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="max-width:100%" src="https://read.amazon.ca/kp/card?asin=B0090RVGW0&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_cGBbGb41JPT2Z" ></iframe>


<p>In this episode, I have two all time great books to recommend, <a href="https://www.amazon.com/Elements-Style-William-Strunk-Jr/dp/194564401X">The Elements of Style</a> and <a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548/ref=sr_1_1?crid=2CX22WLYQMRQ4&amp;dchild=1&amp;keywords=on+writing+well&amp;qid=1610987519&amp;s=books&amp;sprefix=on+writing+%2Cstripbooks-intl-ship%2C194&amp;sr=1-1">On Writing Well</a>. If you want to learn to write with a fascinating biographic story, I loved <a href="https://www.amazon.com/Writing-Memoir-Craft-Stephen-King/dp/1982159375/ref=pd_sbs_4?pd_rd_w=c3cVk&amp;pf_rd_p=3ec6a47e-bf65-49f8-80f7-0d7c7c7ce2ca&amp;pf_rd_r=4C1CJMPXT72EZ2Z0ZXAB&amp;pd_rd_r=8c477446-3402-4789-8332-0b508abb7812&amp;pd_rd_wg=TmVYV&amp;pd_rd_i=1982159375&amp;psc=1">On Writing (A Memoir of the Craft)</a> by Stephen King. Do yourself a favor and get these books. Even if you are a native English speaker, I recommend you reading these books to make your writing interesting. As you can imagine, these books on writing are fun read, it'd be quite an irony otherwise.</p>

<p>As promised before, this is my last soft-skills related post in the software architecture series. Only a few senior engineers will break the glass ceiling and become an architect. Fewer will become a great architect. All the great ones I've met had exemplary soft-skills.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 2: People]]></title>
    <link href="http://smsohan.com/blog/2020/12/30/software-architecture-part-2-people/"/>
    <updated>2020-12-30T21:03:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/30/software-architecture-part-2-people</id>
    <content type="html"><![CDATA[<p>To be an architect, you'll have to be a leader. And, to be a leader, you'll have to be able to understand people and create an influence on them. So, focusing on the people involved with a system is a pre-requisite for designing systems that delight them.</p>

<p><img src="/images/DaleCarnegieBook.png" alt="How To Win Friends And Influence People" /></p>

<p><small>Photo credits to <a href="https://flic.kr/p/N7J52S">Alan O'Rourke</a></small></p>

<p>For this topic, I want you to read and internalize the ideas from the book <a href="https://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034/ref=sr_1_1?dchild=1&amp;keywords=Dale+Carnegie&amp;qid=1609523629&amp;s=books&amp;sr=1-1">How to Win Friends and Influence People</a> by Dale Carnegie. Honestly, it's a fun read for anyone, not just for the aspiring architect. But an architect must be able to listen with empathy and clearly share her ideas. She needs to truly appreciate diverse opinion because it's common that a delightful system can be designed in many ways, and she's likely to have her blind spots. Moreover, she needs exceptional conflict-resolution skills to create a safe space so the best ideas win irrespective of where it comes from.</p>

<p>I know some of you may be getting impatient because you want to learn hardcore software architecture and I'm not talking anything technical yet. If you can hold your patience and bear with me, we'll get there soon enough. I have what I think an exciting curriculum where I'll be teaching hardcore software design topics using many well-known open-source products. My goal is to set you up for success as an architect, and these softcore topics are of the highest priority in my curriculum. The small number of great architects I've enjoyed working with have won me over by their people skills. All the other architects may have been technically genius, but lacked people skills to appreciate the essence of a delightful system, let alone designing one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 1: Delightfulness]]></title>
    <link href="http://smsohan.com/blog/2020/12/26/software-artchitecture-part-1/"/>
    <updated>2020-12-26T15:07:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/26/software-artchitecture-part-1</id>
    <content type="html"><![CDATA[<p><em>"I want to be an architect"</em> - is a common career goal I hear during one:one meetings and annual reviews with my team members. Honestly, I'm writing this series of blog posts to bring some clarity and structure into my own thoughts, and hopefully to scale my time. You can even say, I'm open-sourcing my mentorship on the topic of software archtecture. My sincere hope is, this series helps my team or anyone who wants to systematically learn and improve their software design skills.</p>

<p>My mental model of a software architect as a system is as follows:</p>

<pre>
                 _________
                |         |
Requirements -> |         |
                |         |
 Environment -> |Architect| -> "Delightful" System Design
                |         |
      People -> |         |
                |_________|
</pre>


<p>That is, they produce the most delightful system design as the output from three inputs: business requirements, the environment that surrounds the system, and the people that are involved with the system. The main phrase to remember is <strong>"the most delightful"</strong> - because this is what makes the architect's job so much fun and appealing.</p>

<p>First, I recommend reading the book <a href="https://www.amazon.com/Design-Everyday-Things-Revised-Expanded/dp/0465050654">The Design of Everyday Things</a> to learn how design impacts us everyday. It's a fun and must read for anyone involved in any kind of design.</p>

<p>Next, I recommend reading the book <a href="https://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515/ref=sr_1_1?crid=EH17W0BAL06D&amp;dchild=1&amp;keywords=don%27t+make+me+think&amp;qid=1609281299&amp;s=books&amp;sprefix=don%27t+make+%2Cstripbooks-intl-ship%2C200&amp;sr=1-1">Don't Make Me Think</a> to learn about how to know if your design is delightful.</p>

<p>I prefer the word delightfulness over usability or customer obsession because the former sets a high bar. I hope you also internalize the goal of designing the most delightful systems and settle for nothing less, why should you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What We Learned About Feature Flags in Five Years]]></title>
    <link href="http://smsohan.com/blog/2019/08/13/what-we-learned-about-feature-flag-in-five-years/"/>
    <updated>2019-08-13T21:56:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/08/13/what-we-learned-about-feature-flag-in-five-years</id>
    <content type="html"><![CDATA[<p>Looking at our git logs from <a href="https://www.cisco.com/c/en/us/products/security/amp-for-endpoints/index.html">Cisco AMP for Endpoints</a> Console, I see that we introduced feature flags back in January, 2014. The reason I got interested in it is because even after all these years of use, today I had to build a new concept on our feature flag code. If you're already using feature flags or thinking about adding feature flags to your project, this experience report may be helpful.</p>

<p><img src="/images/switchboard.jpg" alt="switchboard" /></p>

<p><small>
Photo credits to <a href="https://flic.kr/p/9yJU3j">Michael Newton</a>
</small></p>

<p>Back in 2014, we were growing as a team, but wanted to keep working on a single shared code. We perceived  that the productivity gain of multiple teams working on a shared code would outweigh cross-team dependency issues. As we started working on multiple features in parallel, mostly independent with different release dates, we saw unfinished work on one feature was blocking the release of a completed one. After some research, we decided to introduce feature flags in our code.</p>

<p>First, we read <a href="https://martinfowler.com/bliki/FeatureToggle.html">Martin Fowler's</a> article on this topic as a guideline. Today, <strong>we have 195 feature flags in production</strong>. Over time, we have extended the use of feature flags with new concepts and I wanted to document it here for everyone. Fowler's blog also published a more <a href="https://martinfowler.com/articles/feature-toggles.html">detailed and updated post</a> later. The taxomony used here is different from Fowler's because I find the following to be more relevant for our product.</p>

<ol>
<li><strong>Database stored</strong>: We store the feature flags in the main database so that the features can be toggled without needing a code deployment.</li>
<li><strong>Cached</strong>: Feature flag lookups are cached for performance.</li>
<li><strong>Temporary vs. permanent</strong>: We mark some feature flags as temporary when the primary goal is to incrementally release code to production. Temporary feature flags are regularly cleaned once the feature is complete. 13/195 currently used feature flags are marked temporary.</li>
<li><strong>Self-serve</strong>: We tag some feature flags as self-serve where users need to opt-in to use the feature.</li>
<li><strong>Limited availability</strong>: For self-serve feature flags, we tag some features as limited availability. It allows us to release self-serve features to selected customers.</li>
<li><strong>Globally enabled</strong>: We have a mechanism to globally enable or disable a feature flag. 131/195 feature flags are currently marked globally enabled. This number varies by deployed environments.</li>
<li><strong>Enabled for all, but</strong>: We have a mechanism for enabling a feature flag for all but some specific targets.</li>
<li><strong>Multi-target</strong>: Sometimes we attach a single feature flag to multiple domain objects such as tenant, user, subscription tier, etc.</li>
<li><strong>Hierarchical</strong>: We use a fallback mechanism for feature check. For example, the check if a user have file upload permission, we check it for the specific user, then fall back to the tenant it belongs to, and finally fall back to the feature itself being globally enabled.</li>
<li><strong>Code generator</strong>: We use a single-command code generator to introduce a new feature flag to our code. It takes care of the database migration, seed entry, and code references.</li>
<li><strong>Circuit-breaker</strong>: For integration with external services, we've used feature flags as a circuit-breaker to gracefully handle third-party downtime.</li>
<li><strong>Environment-flags</strong>. We deploy the product to multiple geographic environments, including a private cloud model. Certain features behave differently based on the deployment. Using feature flags make it easy to develop and test such differences before deploying to each target environment.</li>
</ol>


<p>There are reusable libraries and services such as <a href="https://launchdarestkly.com">LaunchDarkly</a> that provide rich APIs and user interfaces for feature flags. At this point, even with all the aforementioned concepts, our custom implementation of feature flag is quite straight-forward and easy to evolve. It has been a key ingredient for our frequent iterative deployments with 6 teams working on diverse features in parallel on the same product.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Me Not]]></title>
    <link href="http://smsohan.com/blog/2013/11/03/configure-me-not/"/>
    <updated>2013-11-03T21:29:00-07:00</updated>
    <id>http://smsohan.com/blog/2013/11/03/configure-me-not</id>
    <content type="html"><![CDATA[<p>Configuration in software provides a method to build systems that can
adapt to different configurations. For example, if a website's language and
date/currency formats are configurable, then it can be configured to
support multiple languages and regional formats. Configuration makes it
possible to deliver such features without needing a log of change in the
application source code.</p>

<p>However, this notion of flexibility that configuration provides can be a trap at times. I've a definition of configurable as follows:</p>

<blockquote><p>A configurable must have at least two configurations.</p></blockquote>

<p>This is another way of saying YAGNI. But I find this to be more specific
than YAGNI, as it quantifies and makes it apparent.</p>

<p>Here are a few examples to illustrate my definition.</p>

<ol>
<li><p> <strong>Custom interfaces with a single implementation.</strong></p>

<p> Interfaces are often times thought as a configurable component, as a new
 implementation can be used in place of an old one without changing the
 code that uses it.</p>

<p> Except, if your interface only ever have one implementation, this
 provides a false notion of flexibility. In practice, I've seen for most
 custom interfaces, a new implementation almost always needs a change in
 the original interface which doesn't really make it configurable
 anymore.</p></li>
<li><p><strong>Default arguments in methods that are never passed a non-default
value.</strong></p>

<p> Default arguments are great, as they often times simplify the common
 case. However, if a method with a default argument is never called
 with a non-default value, it's simply not worth using a default argument. Use a local variable instead.</p></li>
<li><p><strong>Configuration key value pairs where there's only one value.</strong></p>

<p> Since magic numbers and hardcoded strings are bad, it's tempting to use
 the configuration file to hold such values. However, if there's only one
 such value, it's probably a constant and not a configurable object.</p></li>
<li><p><strong>Exhaustively validating method parameters against all possible but unused values.</strong></p>

<p> If you're writing a method that's only gonna be called from another
 method in your project, you probably know what you're passing to the
 method. Validating for different negative inputs to such methods provide
 a sense of robustness without really adding any value to it.</p></li>
</ol>


<p>Hoping, the definition makes sense. Would love to hear your
opinion and examples of configure me not.</p>
]]></content>
  </entry>
  
</feed>
