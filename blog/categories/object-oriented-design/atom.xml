<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Object Oriented Design | Sohan's Blog]]></title>
  <link href="http://smsohan.com/blog/categories/object-oriented-design/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2021-04-23T10:54:07-06:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Object Versioning is an Open Design Problem]]></title>
    <link href="http://smsohan.com/blog/2012/01/17/object-versioning-is-open-design/"/>
    <updated>2012-01-17T00:00:00-07:00</updated>
    <id>http://smsohan.com/blog/2012/01/17/object-versioning-is-open-design</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><br /><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://farm3.staticflickr.com/2517/3874492115_e69defd351.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="213" src="http://farm3.staticflickr.com/2517/3874492115_e69defd351.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">This unsolvable maze is a local food from Bangladesh, known as Jilapi<br />Photo credits to&nbsp;<span style="background-color: #fefefe; color: blue; font-family: Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px; text-align: left; text-decoration: none;"><a href="http://www.flickr.com/photos/udvranto_pothik/" style="background-color: #fefefe; font-family: Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px; text-align: left; text-decoration: none;">udvranto pothik</a></span></td></tr></tbody></table>Object Versioning is often required by a business rule, for example, to maintain an audit trail or to be able to revert to a previous version, etc. This is the 3rd time in my career where this Object Versioning requirement made me think like -<br /><blockquote class="tr_bq">There's gotta be an easier solution!&nbsp;</blockquote>But, I am yet to find one. So, I am thinking it's one of those open design problems, may be.<br /><br />To clarify the requirement with an example, let's consider the following scenario:<br /><br />A lawyer is preparing a document for one of her clients using a software. On January 17th, she needs to take a look at the version of the same document from May last year so that she can backtrace some changes that took place during these months.<br /><br />Lets assume the lawyer is using a software that stores the documents in a relational database with the following schema.<br /><pre>A Document has many Evidences, each provided by an EvidenceProvider<br /><br />Document (id, client_id, case_id, name)<br />Evidence (id, document_id, evidence_provider_id, details)<br />EvidenceProvider(id, name)<br /></pre>Now, given the versioning requirement how would you design your data model?<br /><br />Here's a couple of points that your design should address at a minimum:<br /><ul style="text-align: left;"><li>Going back to a version means a complete snapshot of the old version of the document. So, the version of May 1st should only bring the evidences that were there on that very day.</li><li>As a new version is created, it should inherit all previous evidences.</li></ul>As I have mentioned earlier, I am yet to find a good data model that can take care of these concerns without over-complicating everything. Let me know if you got a beautiful solution to this problem.<br /><br />However, in my latest project, the requirement is even harder. It's somewhat like this:<br /><br />The lawyer may have some documents in the "work in progress version". This means, if she needs to print a document for the court, she only wants to print the last "good version", skipping the "work in progress version".<br /><br />Also, when there is such a "work in progress version", she needs to attach any new Evidence to both the last "good version" as well as to the "work in progress version".<br /><br />Well, now you see the design of a data model for Object Versioning becomes really messy and unintuitive.<br /><blockquote class="tr_bq">So, here's my question to you - how would you design a solution for this?</blockquote></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using instanceof is mostly a Code Smell]]></title>
    <link href="http://smsohan.com/blog/2011/11/01/using-instanceof-is-mostly-code-smell/"/>
    <updated>2011-11-01T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2011/11/01/using-instanceof-is-mostly-code-smell</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><div dir="ltr" style="text-align: left;" trbidi="on">When using static programming languages such as Java, often time I have seen people writing methods that accept Object as a parameter. These methods typically don't really work on any Object, but works with multiple types of classes that don't have any common base class. Here's an example of such a method:<br /><br /></div><script src="https://gist.github.com/1332622.js"></script>As you can see in this example, the <code>process</code> method actually expects one of <code>CleanFloor</code> or <code>LaunchRocket</code> instances. However, since the two don't have a common subclass, it falls back to an Object type. And that results in the smelly code as you see in the example.<br /><br />An ideal solution would be to change the design of the classes so that you can either use a common base class or a generic method. But if you can't just do that<br /><br /><blockquote class="tr_bq">Get rid of the instanceof anyway!</blockquote><br />However, this doesn't need to be smelly. Turning to basics of OO programming concepts, you will recall that there's this thing called method overloading that is specifically there to solve this very problem.<br /><br /><script src="https://gist.github.com/1332647.js">  </script>It seems so obvious in this example that you might question, why someone would use the former code? Well, I have seen quite a few of them and if you search for instanceof in your Java project, I won't be surprised if you see a few code fragments that match the former example. </div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excess of Private Methods is a Code Smell]]></title>
    <link href="http://smsohan.com/blog/2011/09/20/code-smell-private-vs-public-method/"/>
    <updated>2011-09-20T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2011/09/20/code-smell-private-vs-public-method</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Private methods, when used meaningfully, are a great tool for writing beautiful object oriented code. But as many other things in life, excess of private methods is bad, too!<br /><br />In my opinion, we use private methods to:<br /><br />1. &nbsp;isolate a block of code to be reused inside the class.<br />2. &nbsp;extract code from another method for code readability.<br /><br />Now, taking these two use cases in mind, here's an easy conclusion:<br /><blockquote>The lower the ratio of public to private methods, the harder it is to write unit tests since the "units" are potentially larger.</blockquote>I don't know if there is any rule of thumb, but you will smell it when you see your unit tests require a lot of setup and assertions. Here's a code example from the Play! framework, an MVC franework for Java developers.<br /><br /><a href="https://github.com/playframework/play/blob/925a0676148f6cb149350f899a60d934544ab61a/framework/src/play/mvc/ActionInvoker.java">ActionInvoker.java </a><br /><br />You will see there are public methods with 100+ lines. I hope you agree with me:<br /><blockquote>"The ActionInvoker.java code is not readable"</blockquote>For the sake of readability, introducing private methods with good names would help. However, that doesn't eliminate any of&nbsp;the possible code paths from the public methods. So, if you are lucky, you will see really long unit tests with complex setup conditions and mock expectations. Otherwise, there will be no tests at all! Without any tests for such long and complex methods, use them at your own risk. I won't :(<br /><br /><span class="Apple-style-span" style="color: #666666;">Disclaimer: I like the play! framework a lot. However, if you take a look at their code and if you think unit testing is important, you'll see they have a lot of rooms for improvement with simple</span> <a href="http://books.google.ca/books?id=1MsETFPD3I0C&amp;pg=PA110&amp;lpg=PA110&amp;dq=extract+method+martin+fowler&amp;source=bl&amp;ots=pLM4p0UCef&amp;sig=5nCPhEPwBkNULvuHiOF1jiW1qqk&amp;hl=en&amp;ei=Jrt4TqjZCoK80AG4nbDlDA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=6&amp;ved=0CEUQ6AEwBQ#v=onepage&amp;q=extract%20method%20martin%20fowler&amp;f=false">extract method</a> <span class="Apple-style-span" style="color: #666666;">refactoring.</span></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Know Your Enemies Before They Kill You!]]></title>
    <link href="http://smsohan.com/blog/2010/07/19/know-your-enemies-before-they-kill-you/"/>
    <updated>2010-07-19T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2010/07/19/know-your-enemies-before-they-kill-you</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://farm3.static.flickr.com/2147/2476084336_b3aca1cffc.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="400" src="http://farm3.static.flickr.com/2147/2476084336_b3aca1cffc.jpg" width="300" /></a></div><div class="separator" style="clear: both; text-align: center;">From <a href="http://www.flickr.com/photos/derekb/">darekb</a></div><div class="separator" style="clear: both; text-align: left;">You know what, this is a political world. So, enemies will seemingly look like your friends until the moment when.. well, its time for the kill! My dear readers, its time to know the enemies!</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">I have met with a few enemies off late. I will go one by one here.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">If you are a software developer like me, you will often see this enemy, camouflaged variables, methods, classes and namespaces. For example, I have recently seen a Stack camouflaged as Visitor! I really mean this. I found a class called Visitor, so I was expecting a Visitor Design Pattern implementation or something similar, but what I got was a Stack under the hood with two methods Push and Pop! This enemies are very bad for your health, as they will keep you guessing all the time... you never know what they do from looking at their names!</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Another enemy you will often see are the very skinny ones, to skinny to have any meat in them. I met some enemies like this as well. What happens when you do over engineering with interface explosion and a lot of one method classes? Is it really that difficult? Is it really a class? Is it really a package? I don't think so! You can spoil a piece of code by introducing a class/package for a single method. This enemy often surfaces because of the fact that, the design pattern book only shows classes with one/two key methods in them... which is of course not intended. But this is life... you gotta balance between class explosion and God classes... really, or this enemy will kill you someday.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">I have just touched two common enemies... but there is another enemy we all are aware of, CMD+c (OS X) or Ctrl + C (Win). Its such a pain to copy a code fragment and use it in a different class... this is exactly the form of reuse that kills everything. Make sure you don't let this germ to grow, or it will outgrow you and leave you crying.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Have you reviewed your code by someone else today? If yes, keep up the good work. If not, beware of the enemies before they get you. Best of luck!</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>jackob</div>
<div class='content'>
Hi dude,<br />i read your blog,This is a wonderful blog.I was able to get the<br />information that I had been looking for. Thanks once again.<br />Thank You<br /><a href="http://my.opera.com/earlinedunlap/blog/show.dml/16396282" rel="nofollow">Ruby Software</a></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit/Functional Test Rails ActionController filters following DRY]]></title>
    <link href="http://smsohan.com/blog/2009/05/13/unit-test-actioncontroller-filters/"/>
    <updated>2009-05-13T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2009/05/13/unit-test-actioncontroller-filters</id>
    <content type="html"><![CDATA[<div class='post'>
<p>At <a href="http://scrumpad.com/" target="_blank">ScrumPad</a> most of our controllers are bounded by filters for authentication/authorization. Some filters apply to all actions in a controller while others apply to only a few or leave out only a few. However, since we are following TDD, we need to test the filter is invoked before each of the desired action. This makes the test code MOIST (not DRY)!</p><p><span style="color: rgb(0, 128, 0);"><strong>Example of Moist Code:</strong></span></p>  <p><span style="color: rgb(0, 128, 0);"><span style="color: rgb(0, 0, 0);">The following example only captures two test methods. However, if you have 30 controllers like ours and on an average 5 filters at each, you will possibly find many such duplicates making your test code so moist that it becomes shabby!</span><strong> </strong></span></p>  <pre class="brush: rails">class SomeController<br />before_filter :authenticate<br />before_filter :restrict_invalid_role<br />end<br />class SomeControllerTest<br />def test_index_redirects_without_login<br />get :index<br />assert_redirected_to :controller=&gt;:login, :action=&gt;:login<br />end<br />def test_index_redirects_without_valid_role<br />login_as(:invalid_role)<br />get :index<br />assert_redirected_to :controller=&gt;:exception, :action=&gt;:not_allowed<br />end<br />end</pre><br /><strong><span style="color: rgb(0, 128, 0);">Example of DRY Code:</span></strong><br />I came up with the following implementation to help us with unit testing the before filters. The assumption is, if your filter is invoked, it will work fine. And we are testing the filter only once. The following code is written at the end of the test/test_helper.rb.<br /><pre class="brush: rails">class ActionController::TestCase<br />##example: should_apply_before_filter_to_actions(:authenticate, [:index, :new])<br />def should_apply_before_filter_to_actions(before_filter_name, actions)<br />if(actions.nil? or actions.empty?)<br />  assert false<br />end<br />filter = find_maching_before_filter(before_filter_name)<br />actions.each do |action|<br />  assert_before_filter_applied(filter, action)<br />end<br />end<br />##example: should_apply_before_filter_to_action(:authenticate, :index)<br />def should_apply_before_filter_to_action(before_filter_name, action)<br />filter = find_maching_before_filter(before_filter_name)<br />assert_before_filter_applied(filter, action)<br />end<br /><br />##example: should_not_apply_before_filter_to_actions(:authenticate, [:index, :new])<br />def should_not_apply_before_filter_to_actions(before_filter_name, actions)<br />if(actions.nil? or actions.empty?)<br />  assert false<br />end<br />filter = find_maching_before_filter(before_filter_name)<br />actions.each do |action|<br />  assert_before_filter_not_applied(filter, action)<br />end<br />end<br /><br />##example: should_not_apply_before_filter_to_action(:authenticate, :index)<br />def should_not_apply_before_filter_to_action(before_filter_name, action)<br />filter = find_maching_before_filter(before_filter_name)<br />assert_before_filter_not_applied(filter, action)<br />end<br /><br />##example: should_apply_before_filters([:authenticate, :session_expiry])<br />def should_apply_before_filters(before_filter_names)<br />if(before_filter_names.nil? or before_filter_names.empty?)<br />  assert false, "No Before Filter is Passed"<br />end<br />before_filter_names.each {|filter| should_apply_before_filter(filter)}<br />end<br /><br />##example: should_apply_before_filter(:authenticate)<br />def should_apply_before_filter(before_filter_name)<br />filter = find_maching_before_filter(before_filter_name)<br />if(filter.nil?)<br />  assert false, "no matching filter found for #{before_filter_name}"<br />end<br />assert filter.options.empty?, "the filter #{before_filter_name} has only/except options and does not apply to all actions"<br />end<br /><br />private<br />#finds the matching BeforeFilter object<br />def find_maching_before_filter(before_filter_name)<br />filters = @controller.class.filter_chain()<br />if !filters.nil?<br />  filters.each do |filter|<br />    if(filter.is_a?(ActionController::Filters::BeforeFilter) and filter.method == before_filter_name)<br />      return filter<br />    end<br />  end<br />end<br />return nil<br />end<br /><br />#asserts a single BeforeFilter is applied on a single action<br />def assert_before_filter_applied(filter, action)<br />if(filter.nil? or action.nil?)<br />  assert false<br />end<br /><br />if(filter.options.empty?)<br />  assert true<br />  return<br />end<br />if(!filter.options[:only].nil?)<br />  assert filter.options[:only].include?(action.to_s)<br />end<br />if(!filter.options[:except].nil?)<br />  assert !filter.options[:except].include?(action.to_s)<br />end<br />end<br /><br />#asserts a single BeforeFilter is not applied on a single action<br />def assert_before_filter_not_applied(filter, action)<br />if(filter.nil? or action.nil?)<br />  assert false<br />end<br /><br />if(filter.options.empty?)<br />  assert false<br />end<br /><br />if(!filter.options[:except].nil?)<br />  assert filter.options[:except].include?(action.to_s)<br />end<br />if(!filter.options[:only].nil?)<br />  assert !filter.options[:only].include?(action.to_s)<br />end<br />end<br />end</pre>Now my test code looks like the following-<br /><pre class="brush: rails">  def test_filters<br />should_apply_before_filters(:authenticate, :restrict_invalid_role)<br />end </pre>I can use the other methods as well to get finer control if the before_filter is applied using :only or :except options. And I can use these helper methods across all my controller test classes, making the whole point of testing filters really neat and short.<br /><p>If you are familiar with shoulda tests, you will find the above code following shoulda like naming conventions. I found the above code to strip a lot of your efforts, since you eliminate all test codes that safeguard your filters.</p>Hope it helps someone with similar need.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>a_ludi</div>
<div class='content'>
Thank you for your code base! This is quite useful to me, too. And probably to many others.<br /><br />I&#39;ve refactored your code a little:<br /><br />http://pastebin.com/ybuAPfbF<br /><br />Furthermore, I would advise to put this code into the test_helper.rb file, so all your tests can use it. Then you have to declare all methods except the assert* methods as private. The assert* methods should be public.</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
