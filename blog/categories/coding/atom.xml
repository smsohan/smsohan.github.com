<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | Sohan's Blog]]></title>
  <link href="http://smsohan.com/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2021-02-19T09:42:23-07:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exception Handling Anti-patterns]]></title>
    <link href="http://smsohan.com/blog/2019/05/23/exception-handling-anti-patterns/"/>
    <updated>2019-05-23T10:25:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/05/23/exception-handling-anti-patterns</id>
    <content type="html"><![CDATA[<p><img src="/images/confusing_road_sign.jpg" alt="confusing road sign" /></p>

<p><sub>
Source: <a href="https://www.flickr.com/photos/foilman/2803261256/in/photolist-5gHrUC-5YEVYt-ocZHz7-2bDb3w8-aCGGSo-cB9opW-dUUDRS-6qbnVw-ppkgWu-cYsKjw-4HSS8t-aAJCk5-XBWQ5q-cYsKDA-NNefT4-p8HF-bfJwPB-6SibT9-ubSQL-mvaYX-7uNS7V-473w41-HABo5-5SL6FL-2f4rrkN-SazHLx-2eaMrNW-2eaMsbQ-24J1WkB-24CQREz-24CQR5g-bvyvt7-RvjAiK-6asxLk-9zRJ1e-6zLy6Z-9yuCpf-24FpgMX-95dVq3-hERZkd-4JKe8s-hESYoP-hESYnX-4oPtJ8-6gvogb-5skgvk-4Pu7Hp-8AmdYp-2t55t-24FpgYt">Henry Burrows</a>
</sub></p>

<p>Whenever faced with a production issue, I find exceptions to be an extremely useful
information source. A careful look at an
exeption has often led to quick discovery
of the source of a trouble. On the flip side, I have also
faced a lot of chaotic debugging sessions because of poor exception handling.
Here, I present the common anti-patterns that I recommend fixing while
reviewing pull-requests. Most programmers are already familiar with the mechanics of exception
handling. Yet, I see these anti-patterns everyday.</p>

<p>I primarily see these anti-patterns to be control-flow or logging related as shown below:</p>

<h2>Control-flow Anti-patterns</h2>

<p><strong>Unhandled.</strong> When an exception is unhandled, if often results in a
clueless user experience for the end user as well as the developer.
<code>ruby
def notify
  post.email! #May fail due to configuration, network, or authentication
end
</code></p>

<p><strong>Catch-all.</strong> With catch-all errors, it's often difficult to quickly detect the
original problem. For the same reason, the end users don't get specific
and actionable error messages.
<code>ruby
def create
  post.save! #May fail due to database issues
rescue =&gt; error
  # handle
end
</code></p>

<p><strong>If-else Exceptions.</strong> Exceptions mean something unexpected took
place. If-else is used for logical known code paths. For example, when
accepting an API request, invalid input data is often a known logical
path. Using exceptions for it will trigger false alarms.</p>

<p><code>ruby
def create
  post = Post.new(params)
  post.save!
rescue ValidationError =&gt; error
  log_exception(error)
end
</code></p>

<p><strong>Wrapped Exception.</strong> A new exception is raised hiding the original exception. In such cases,
if the exception is handled by the caller, <strong>critical context information
is lost</strong> since the orignal stacktrace is no longer available.
<code>ruby
def create
  post.save! #May fail due to database issues
rescue SaveError =&gt; error
  raise CustomSaveError.new('Failed to save the post')
end
</code></p>

<p><strong>Useless Custom Exception.</strong> Introducing a new exception type when a pre-defined exception suits just
fine.
```ruby
def create(text:)
  if text == nil</p>

<pre><code>#Could just use pre-defined ArgumentError
raise EmptyTextException.new("Text can't be empty")   end
</code></pre>

<p>  #...
end
```</p>

<p><strong>Leaky Handler.</strong> Handling an error without cleaning system resources such as file
handles, open network connections, can cause cascading system outage.</p>

<p><code>ruby
def create
  #Will leak this file handle if read succeeds, but write fails
  file = File.open('/some/new.txt', 'w')
  file.write('some text')
rescue FileNotFoundError, FileSaveError =&gt; error
  log.warn('...')
  raise error
end
</code></p>

<h2>Logging Anti-Patterns</h2>

<p><strong>Silent Handler.</strong> Makes it very difficult to debug problems.
<code>ruby
def create
  post.save! #May fail due to database issues
rescue
end
</code></p>

<p><strong>Debug-only Handler.</strong> Similar to silent handler since most production apps run in non-debug
log level.</p>

<p><code>ruby
def create
  post.save! #May fail due to database issues
rescue SaveError =&gt; error
  log.debug "failed to save post #{error.message} #{error.backtrace.join}"
end
</code></p>

<p><strong>Custom Message-only Handler.</strong> Some exception handlers only log a custom
message leaving the details of the exceptions. As a result, critical
information is lost that can be very useful for debugging.</p>

<p><code>ruby
def create
  post.save! #May fail due to database issues
rescue SaveError
  log.warn "failed to save post"
end
</code></p>

<p><strong>Message-only Handler.</strong> Without Stacktrace, it gets very difficult to trace the root of a
problem since often times exception handlers wrap a few lines of code.
<code>ruby
def create
  email = User.find(params[:id]).email
  post = Post.find(params[:id])
  comment = post.comments.create!(name: user.name)
rescue NotFoundError =&gt; error # Could happen in line 2 or 4
  log.warn "failed to save post #{error.message}"
end
</code></p>

<p><strong>Sneaky Handler.</strong> Some exception handlers return nil or a value.
The caller can't distinguish between a successful vs. exception case and
fails in subsequent steps.
<code>ruby
def create
  post.save! #May fail due to database issues
rescue SaveError =&gt; error
  log.warn "failed to save post #{error.message} #{error.backtrace.join}"
  return null
end
</code></p>

<p>There are times when you intentionally have to use some of these
anti-patterns. But those are rare. It's critical for the developers to
think about the information that'd help in swiftly debugging a production problem. As such,
developers must avoid the noise and provide all context information for
errors to help diagnose potential system problems.</p>

<p>Happy coding.</p>
]]></content>
  </entry>
  
</feed>
