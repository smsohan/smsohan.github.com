<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Sohan's Blog]]></title>
  <link href="http://smsohan.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2021-10-13T13:44:17-07:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LoveJS Presentation at CAMUG]]></title>
    <link href="http://smsohan.com/blog/2012/09/13/lovejs-presentation-at-camug/"/>
    <updated>2012-09-13T21:32:00-07:00</updated>
    <id>http://smsohan.com/blog/2012/09/13/lovejs-presentation-at-camug</id>
    <content type="html"><![CDATA[<p>I paired with <a href="http://codecuriosity.com">@TylerMercier</a> as we did a little <a href="http://www.meetup.com/Calgary-Agile-Methods-User-Group/events/79722562/">hands-on demo on writing testable and OO JavaScript</a>.</p>

<p><img src="/images/LoveJS.jpg" alt="Presenting with Tyler" /></p>

<p>This was mostly based on our pairing experience on the current project, but also had things that we learned from our previous web projects. I wanted to share some of the highlights of this session with my readers on this blog:</p>

<p>From experience, I have seen a few charactersitics that make JavaScript coding a real fun. Here's a few that stand out:</p>

<blockquote><p>Good JavaScript is Testable and Object Oriented</p></blockquote>

<p>Really simple stuff, but it took me quite a few years to actually start writing OO JavaScript, and more so, to write automated tests that run on CI server. As I often say, the shittiest part of most web projects is its CSS, with its hacks, and the inherent nature of it. And JavaScript is often just as smelly. But if you just start writing OO JavaScript with tests, your code will drive you to a cleaner path simply because bad code makes testing really tough. And with Jasmine, testing JavaScript is super fun. So, we suggested the following toolset:</p>

<ol>
<li>CoffeeScript</li>
<li>Jasmine</li>
<li>PhantomJS</li>
<li>CI integration</li>
</ol>


<p>The materials related to this session are available online at <a href="http://codecuriosity.com/love_javascript">github</a>.</p>

<p>It was a great turnout, full house, engaged audience, and, asking really good questions. I had a lot of fun doing the hands-on. You know live demos can be daunting, especially when you are writing on a low res screen so people can actually read the projected text. But thanks a lot to Tyler, we had done a couple dry runs of the demo. That helped us a lot in terms of finding the points to transition between us, as well as some muscle memory as we were writing the code live in front of the audience.</p>

<p>But, I also wanted to share a checklist that we should have done as a preparation for this talk. It's too bad, we didn't do the following, hopefully this will be better next time. Here's what I have in my mind:</p>

<ul>
<li><strong>Audio/video record</strong> the session. So, I can see myself afterwards and find some obvious rooms for improvement.</li>
<li>Practice using <strong>real projector</strong> so we can find the best theme for the room size. This time I felt some of the text colors weren't as readable for the back benchers.</li>
<li>Never plan for a 50 minute talk when you have a 60 minute slot. Leave <strong>at least 20 minutes slack</strong>. Have a backup plan for an extension in case you are done early. It sucks to cut short or rush to the ending.</li>
</ul>


<p>But in retrospect, I was super impressed with how the session ran. Hopefully, with practice it will only keep getting better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying to TV Screens]]></title>
    <link href="http://smsohan.com/blog/2012/07/28/deploying-to-TV-screens/"/>
    <updated>2012-07-28T15:28:00-07:00</updated>
    <id>http://smsohan.com/blog/2012/07/28/deploying-to-TV-screens</id>
    <content type="html"><![CDATA[<p>Off late, I am working on a project to render real time business data with interesting visualizations, so people can feel the pulse of the business. For the last couple of months, I have been planning to write a detailed post about it. But after a few false starts, I am finally settling on smaller posts, telling a small part of the story each time.</p>

<blockquote><p>So, have you ever worked on a web application that is primarily viewed through 55"+ 1080p TV screens?</p></blockquote>

<p>We are showing real time business data, aggregated from multiple data sources as they are happening. The screens are gonna be mounted on the wall, like as you'd see in the airports. And it needs to be running 24x7</p>

<p>This introduces an interesting deployment challenge:</p>

<blockquote><p>How would you reload the screen every time you re-deploy the app?</p></blockquote>

<p>A regular web app is interactive. So, when we re-deploy the app, the users typically get the latest version as soon as they reload the page or navigate through the app. However, in an airport like setting, where information is displayed across many screens, and typically no-one is clicking it, the app needs to be aware of updates and reload itself to achieve the same. This is essential, for example, if there's an API change on the server side, the HTML/Javascript/CSS must be in sync to be able render it.</p>

<p><img src="http://farm1.staticflickr.com/65/212623519_eae543d64c.jpg" alt="Airport displays" /></p>

<p>Photo credits to  5mal5</p>

<p>The app itself uses JSON API calls to render the live data. Each screen is somewhat like a single page app, using multiple AJAX calls to render different parts of the screen, showing different data. The API calls are all funneled through a single Javascript module. The module looks like the following (showing a simplified version for brevity):</p>

<p><div><script src='https://gist.github.com/3194417.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>If you have noticed here, there's an extra check inside the success callback. To begin with, the page remembers the server token on reload. So, whenever there's a new token, it refreshes the page. Since all API calls are funneled through this module, this becomes a no-brainer to support new screens/API calls.</p>

<p>Our API's respond with a server token, which is guaranteed to:</p>

<ol>
<li>Remain same for each server deployment, and</li>
<li>Change whenever there's a new deployment.</li>
</ol>


<p>However, we still need to make sure the server token indeed ensures these two essential properties. With a little trick, this becomes trivial. For our app, we are using Capistrano to deploy our Ruby on Rails project. For those new to Capistrano, it uses a timestamped directory for each deploy, symlinking it to the current. So, it looks somewhat like the following:</p>

<p><div><script src='https://gist.github.com/3194484.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Every Ruby on Rails app also comes with a little method, Rails.root that returns the full path to the directory of the current deployment. So, in this example scenario, we get the following:</p>

<p>Rails.root #==&gt; /app/realtime/releases/20120729083021</p>

<p>Since every deployment will be a new timestamp, this method ensures a unique token for each deployment. That's all we need for the api module to be aware of new deployments and auto refreshes. Here's an example controller/action (again, simplified for brevity):</p>

<p><div><script src='https://gist.github.com/3194430.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>I liked the organic nature of this technique. It is harvesting on the available tools. Although the examples in this post show Ruby/Rails as an example, I am sure the same techniques can be applied to other technologies with the same simplicity.</p>

<p>Before I conclude, I would share one limitation of this technique here. Since the page reload happens on a shared api module, the reload needs to be generic, without requiring any special knowledge about the pages to reload. This pretty much means, a page needs to be able to reconstruct itself entirely from it's URL. Requiring any Javascript state beyond the URL, would probably require API specific handling to reload, killing the advantage of this technique. But the good news is, its always a good practice to rely solely on the URL to construct a page.</p>

<p>Thanks a ton if you've followed all the way. Stay tuned for the upcoming posts, where I will be telling the story of handling multiple API calls on a page, highlighting data changes and some other interesting bits about a real time dashboard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Take on Client-Side MVC]]></title>
    <link href="http://smsohan.com/blog/2012/03/30/my-take-on-client-side-mvc/"/>
    <updated>2012-03-30T00:00:00-07:00</updated>
    <id>http://smsohan.com/blog/2012/03/30/my-take-on-client-side-mvc</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I just rolled off my last project this Wednesday. It was a great team, worked on some cutting edge technologies, mobile web, HTML5, mongo and some other fun stuff. Now that I got two "beach" days before jumping on to the next gig, I spent some time trying out Backbonejs to knockout one item from the long list of to-dos. This post is about my initial take on client side MVC, solely based on these two days with <a href="http://documentcloud.github.com/backbone/">Backbonejs</a>.<br /><br /><h2 style="text-align: left;">Summary</h2><blockquote class="tr_bq">Client-side MVC is in its infancy, but promises a bright future</blockquote><div><br /></div><div><h2 style="text-align: left;">The Good</h2></div><div>Writing "clean code" while doing Javascript can be quite a challenge. Doing MVC gets you a step closer to that by splitting responsibility among models, views and controllers. So, your Javascript code will be domain driven, instead of just a bunch of monolithic methods.</div><div><br /></div><div>Your client-side MVC application can be very responsive, or even a "<a href="http://en.wikipedia.org/wiki/Single-page_application">single page app</a>". This is an advantage if your app needs some data from the server, but can leverage Javascript for most of its visual needs. For example, a real-time analytics dashboard can use client-side MVC to do most of the processing on the client side after fetching the data from the server.</div><div><br /></div><div>Backbonejs offers event wiring API between your models and views. For example, say you have a model called Vehicle and a view called VehicleView, you can put the following code to wire up the "change" event on the model so that the view renders whenever the model is updated.<br /><br /></div><script src="https://gist.github.com/2252292.js">  </script> <br />Using such events, it becomes a trivial process to keep all the views in sync with the models as they change across different actions.<br /><br />Another advantage of client-side MVC is, it forces "<a href="http://en.wikipedia.org/wiki/Eating_your_own_dog_food">eat your own dog food</a>" as you are essentially creating an API on your server and using it first hand on the client side. So, if you are building multiple clients, for example, native mobile clients and browser web apps, you can leverage the same API.<br /><br /><h2 style="text-align: left;">The Bad</h2>Ever since Ruby on Rails came into the game, we all became keen on having conventions. Can't speak for the rest of the client-side MVC projects, but Backbonejs definitely lacks in this regard. It doesn't default to any view template. Also, it doesn't have a default project structure. And even worse, no in-built testing recipe either. This means, you are left on your own to choose and debate about each of these, and more that just these, to find a standard set of tools for your project.<br /><br /><blockquote class="tr_bq">Having no in-built test framework reduces the emphasis on testing, this is a Big Big lacking.</blockquote><br />I find the backbonejs MVC to be a little&nbsp;weird, they have Model and View, but no Controller. Instead they have a Router and a confused concept of Collection. So, for example, if you wanted to work on a resource called Vehicle, you will probably end up with the following "classes":<br /><br />Vehicle model, Vehicles collection, Vehicle view, Vehicles view and Vehicle router<br /><br />But as you can see here, there is no Vehicle controller. I know you can always write a controller on your own, but thats the whole point about having strong opinionated conventions.<br /><br />The relation between a Collection and its Model can be confusing, specially when wiring up events. For example, a change in a model can trigger the view for the model and/or the view for its collection. The logic for handling/bubbling such events can get quite messy at times.<br /><br /><h2 style="text-align: left;">The Future</h2>It took several years for server side MVC to find a good common set of conventions and tools. Then, it took a few more years for people to get used to the goodness of it. I think client-side MVC frameworks will hit a similar sweet spot, but only after we give it some time to settle on the conventions and build intelligent tools around those.<br /><br /><br /><br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
MVC might not be proper wrt javascript. here is a good read http://addyosmani.github.com/backbone-fundamentals/</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Care Driven Development: Javascript]]></title>
    <link href="http://smsohan.com/blog/2011/11/20/care-driven-development-javascript/"/>
    <updated>2011-11-20T00:00:00-08:00</updated>
    <id>http://smsohan.com/blog/2011/11/20/care-driven-development-javascript</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">There <a href="http://blankdd.com/">is * Driven Development</a>, where they listed "all possible thing" driven development and dedicated a whole website to it! Well, I am adding one more to the list, "Care Driven Development", with an emphasis to Javascript coding.<br /><br /><blockquote class="tr_bq">Javascript coding, do you care enough?</blockquote>CSS is the most hairy spagetti piece of almost any web project. And its not leading by a far distance to it's first cousin; Javascript. But, the good thing is, it just takes a little care to clean the bush out of Javascript and make it pretty.<br /><br />Do you care enough not to use the following ever again?<br /><br /><ul style="text-align: left;"><li>$('#deep_under_the_ocean')<span class="Apple-style-span" style="color: #cc0000;">.parent().parent()</span>.hide()?</li><li>$.ajax(<span class="Apple-style-span" style="color: #cc0000;">url: 'bank_accounts/transfer_money'</span>, amount: 500...)</li><li>$('#eiffel_tower').height(<span class="Apple-style-span" style="color: #cc0000;">$('#paris').height() + &nbsp;$('#eiffel_tower base').height() +&nbsp;$('#eiffel_tower tower').height()&nbsp;+</span> ...)</li><li>populateNewYork(<span class="Apple-style-span" style="color: #cc0000;">'east', 'north', 50, 100, 23, ...</span>)</li><li>$('.shark').click(function()<span class="Apple-style-span" style="color: #cc0000;">{$('.small_fish').attacked(function(){...})}</span>)</li><li>parseInt(<span class="Apple-style-span" style="color: #cc0000;">$('.selected').id().split('-').last()</span>)</li></ul><div>I am compiling a list of such careless JS coding examples and this is just a start. If you have a few to add to this list, please keep sending!</div><br /><br /></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hardcoded URLs in Javascript are too Slippery]]></title>
    <link href="http://smsohan.com/blog/2011/09/23/hardcoded-urls-in-javascript-are-too/"/>
    <updated>2011-09-23T00:00:00-07:00</updated>
    <id>http://smsohan.com/blog/2011/09/23/hardcoded-urls-in-javascript-are-too</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://farm3.static.flickr.com/2728/4182189627_ba036b02c8.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="448" src="http://farm3.static.flickr.com/2728/4182189627_ba036b02c8.jpg" width="500" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Photo credits to&nbsp;<span class="Apple-style-span" style="border-collapse: collapse; font-family: Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;"><a href="http://www.flickr.com/photos/36179943@N00/" style="color: #0063dc; text-decoration: none;">Esteban Cavrico</a></span></td></tr></tbody></table><br /><br /><div dir="ltr" style="text-align: left;" trbidi="on">I was working on a web project that lets you delete some records using Ajax. The following is just an example, but you might be familiar with a similar code already:<br /><br /><script src="https://gist.github.com/1237981.js">  </script><br />This code used to work when the DELETE endpoint was indeed under '/blog/posts'. However, at some point a developer wants to remove the '/blog' from all the endpoints to put them directly under '/posts'! You can see, in such cases it is very hard to catch the bug that would be caused by the faulty JS code.<br /><br />Here's a quick recommendation:<br /><blockquote>Don't hardcode the URLs (or anything that is actually a server configuration) inside your JS.&nbsp;</blockquote>This is a code smell, as its duplicating code. But its also dangerous, because its hard to catch/fix these defects since they can be buried deep under an untested Javascript file. Instead feed this data from your server side code and you'll mitigate risk that way.<br /><br /></div></div></div>

]]></content>
  </entry>
  
</feed>
