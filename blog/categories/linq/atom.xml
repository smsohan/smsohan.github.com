<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LINQ | Sohan's Blog]]></title>
  <link href="http://smsohan.com/blog/categories/linq/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2020-11-18T11:25:24-07:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XDocument.ToStringWithXmlDeclaration() - Get the string representation of XDcoument with its Xml Declaration]]></title>
    <link href="http://smsohan.com/blog/2008/08/12/xdocumenttostringwithxmldeclaration-get/"/>
    <updated>2008-08-12T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2008/08/12/xdocumenttostringwithxmldeclaration-get</id>
    <content type="html"><![CDATA[<div class='post'>
<p>The System.Xml.Linq.XDocument.ToString() produces a serialized string version of the XDocument object. But unfortunately, while doing so, it leaves the xml declaration in the serialized version which may be required in your application.</p>  <p>Again, there is another method called Save that produces the serialized version including xml declaration. So, I think we can write a simple extension method for producing the xml declaration as shown in the following -</p> <!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 class\cf0  \cf4 Program\par ??\cf0     \{\par ??        \cf1 static\cf0  \cf1 void\cf0  Main(\cf1 string\cf0 [] args)\par ??        \{\par ??\par ??            \cf4 XDocument\cf0  doc = \cf1 new\cf0  \cf4 XDocument\cf0 (\cf1 new\cf0  \cf4 XDeclaration\cf0 (\cf5 "1.0"\cf0 , \cf5 "utf-8"\cf0 , \cf1 null\cf0 ), \cf1 new\cf0  \cf4 XElement\cf0 (\cf5 "root"\cf0 ));\par ??            \cf4 Console\cf0 .WriteLine(doc.ToStringWithXmlDeclaration());\par ??        \}\par ??    \}\par ??\par ??\par ??    \cf1 public\cf0  \cf1 static\cf0  \cf1 class\cf0  \cf4 XDocumentExtensions\par ??\cf0     \{\par ??        \cf1 public\cf0  \cf1 static\cf0  \cf1 string\cf0  ToStringWithXmlDeclaration(\cf1 this\cf0  \cf4 XDocument\cf0  doc)\par ??        \{\par ??            \cf4 StringBuilder\cf0  builder   = \cf1 new\cf0  \cf4 StringBuilder\cf0 ();\par ??            \cf4 StringWriter\cf0  writer     = \cf1 new\cf0  \cf4 StringWriter\cf0 (builder);\par ??            doc.Save(writer);\par ??            writer.Flush();\par ??            \cf1 return\cf0  builder.ToString();\par ??        \}\par ??    \}} -->  <div    style="background: white none repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;font-family:courier new;font-size:10pt;color:black;">   <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   14</span> <span style="color:blue;">class</span> <span style="color: rgb(43, 145, 175);">Program</span></p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   15</span>     {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   16</span>         <span style="color:blue;">static</span> <span style="color:blue;">void</span> Main(<span style="color:blue;">string</span>[] args)</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   17</span>         {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   18</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   19</span>             <span style="color: rgb(43, 145, 175);">XDocument</span> doc = <span style="color:blue;">new</span> <span style="color: rgb(43, 145, 175);">XDocument</span>(<span style="color:blue;">new</span> <span style="color: rgb(43, 145, 175);">XDeclaration</span>(<span style="color: rgb(163, 21, 21);">"1.0"</span>, <span style="color: rgb(163, 21, 21);">"utf-8"</span>, <span style="color:blue;">null</span>), <span style="color:blue;">new</span> <span style="color: rgb(43, 145, 175);">XElement</span>(<span style="color: rgb(163, 21, 21);">"root"</span>));</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   20</span>             <span style="color: rgb(43, 145, 175);">Console</span>.WriteLine(doc.ToStringWithXmlDeclaration());</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   21</span>         }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   22</span>     }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   23</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   24</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   25</span>     <span style="color:blue;">public</span> <span style="color:blue;">static</span> <span style="color:blue;">class</span> <span style="color: rgb(43, 145, 175);">XDocumentExtensions</span></p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   26</span>     {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   27</span>         <span style="color:blue;">public</span> <span style="color:blue;">static</span> <span style="color:blue;">string</span> ToStringWithXmlDeclaration(<span style="color:blue;">this</span> <span style="color: rgb(43, 145, 175);">XDocument</span> doc)</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   28</span>         {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   29</span>             <span style="color: rgb(43, 145, 175);">StringBuilder</span> builder   = <span style="color:blue;">new</span> <span style="color: rgb(43, 145, 175);">StringBuilder</span>();</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   30</span>             <span style="color: rgb(43, 145, 175);">StringWriter</span> writer    = <span style="color:blue;">new</span> <span style="color: rgb(43, 145, 175);">StringWriter</span>(builder);</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   31</span>             doc.Save(writer);</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   32</span>             writer.Flush();</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   33</span>             <span style="color:blue;">return</span> builder.ToString();</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   34</span>         }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   35</span>     }</p> </div>  <p>Apart from its purpose, this is also an example use of the Extension Method feature of C# 3.0.</p></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Sohan</div>
<div class='content'>
@Dan:<br />Didn&#39;t know that. Thanks for sharing.</div>
</div>
<div class='comment'>
<div class='author'>Dan</div>
<div class='content'>
You can use also <br /><br />return doc.Declaration.ToString() + doc.ToString();</div>
</div>
<div class='comment'>
<div class='author'>Sohan</div>
<div class='content'>
@Dragon:<br />Thanks for suggesting the improvement.</div>
</div>
<div class='comment'>
<div class='author'>Dragon</div>
<div class='content'>
I think better:<br /><br />public static string ToStringWithXmlDeclaration(this XDocument doc)<br />{<br /> StringBuilder builder = new StringBuilder();<br /> using (TextWriter  writer = new  StringWriter(builder))<br /> {<br />  doc.Save(writer);<br /> }<br /> return builder.ToString();<br />}</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comparing with NULL in where clause using Linq to SQL]]></title>
    <link href="http://smsohan.com/blog/2008/08/05/comparing-with-null-in-where-clause-in/"/>
    <updated>2008-08-05T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2008/08/05/comparing-with-null-in-where-clause-in</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In SQL Server, a SQL statement like 'NULL=NULL' evaluates to false. however 'NULL IS NULL' evaluates to true. So, for NULL values in your database columns, you need to use the 'IS' operator instead of the regular '=' operator.</p>  <p>The problem is, in Linq to SQL, there is no such 'IS' operator since 'IS' is already used as a C# language keyword. So, when you are invoking an equality check in your Linq to SQL where clause to a nullable column you need to be alert on this behavior.</p>  <p>For example, take the following sample code that I wrote to demonstrate this topic.</p> <!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 using\cf0  System;\par ??\cf1 using\cf0  System.Collections.Generic;\par ??\cf1 using\cf0  System.Linq;\par ??\cf1 using\cf0  System.Text;\par ??\cf1 using\cf0  System.IO;\par ??\par ??\cf1 namespace\cf0  ConsoleApplication1\par ??\{\par ??    \cf1 class\cf0  \cf4 Program\par ??\cf0     \{\par ??        \cf1 static\cf0  \cf1 void\cf0  Main(\cf1 string\cf0 [] args)\par ??        \{\par ??            \cf4 MMConfigDataContext\cf0  context = \cf1 new\cf0  \cf4 MMConfigDataContext\cf0 ();\par ??            context.Log = \cf1 new\cf0  \cf4 ConsoleWriter\cf0 ();\par ??\par ??            \cf1 string\cf0  name = \cf1 null\cf0 ;\par ??            \cf1 var\cf0  aff = \cf1 from\cf0  a \cf1 in\cf0  context.Affiliates \par ??                            \cf1 where\cf0  \par ??                            a.CompanyName == name \par ??                            \cf1 select\cf0  a.ID;\par ??            \cf1 var\cf0  aff2 = \cf1 from\cf0  a \cf1 in\cf0  context.Affiliates \cf1 where\cf0  a.CompanyName == \cf1 null\cf0  \cf1 select\cf0  a.ID;\par ??\par ??            aff.ToList();\par ??            aff2.ToList();\par ??        \}\par ??    \}\par ??\par ??    \cf1 class\cf0  \cf4 ConsoleWriter\cf0  : \cf4 TextWriter\par ??\cf0     \{\par ??\par ??        \cf1 public\cf0  \cf1 override\cf0  \cf4 Encoding\cf0  Encoding\par ??        \{\par ??            \cf1 get\cf0  \{ \cf1 return\cf0  \cf4 Encoding\cf0 .UTF8; \}\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 override\cf0  \cf1 void\cf0  Write(\cf1 string\cf0  value)\par ??        \{\par ??            \cf1 base\cf0 .Write(value);\par ??            \cf4 Console\cf0 .WriteLine(value);\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 override\cf0  \cf1 void\cf0  Write(\cf1 char\cf0 [] buffer, \cf1 int\cf0  index, \cf1 int\cf0  count)\par ??        \{\par ??            \cf1 base\cf0 .Write(buffer, index, count);\par ??            \cf4 Console\cf0 .WriteLine(buffer, index, count);\par ??        \}\par ??    \}\par ??\}\par ??} -->  <div    style="background: white none repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;font-family:courier new;font-size:10pt;color:black;">   <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    1</span> <span style="color:blue;">using</span> System;</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    2</span> <span style="color:blue;">using</span> System.Collections.Generic;</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    3</span> <span style="color:blue;">using</span> System.Linq;</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    4</span> <span style="color:blue;">using</span> System.Text;</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    5</span> <span style="color:blue;">using</span> System.IO;</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    6</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    7</span> <span style="color:blue;">namespace</span> ConsoleApplication1</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    8</span> {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">    9</span>     <span style="color:blue;">class</span> <span style="color: rgb(43, 145, 175);">Program</span></p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   10</span>     {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   11</span>         <span style="color:blue;">static</span> <span style="color:blue;">void</span> Main(<span style="color:blue;">string</span>[] args)</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   12</span>         {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   13</span>             <span style="color: rgb(43, 145, 175);">MyDataContext</span> context = <span style="color:blue;">new</span> <span style="color: rgb(43, 145, 175);">MyDataContext</span>();</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   14</span>             context.Log = <span style="color:blue;">new</span> <span style="color: rgb(43, 145, 175);">ConsoleWriter</span>();</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   15</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   16</span>             <span style="color:blue;">string</span> name = <span style="color:blue;">null</span>;</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   17</span>             <span style="color:blue;">var</span> aff = <span style="color:blue;">from</span> a <span style="color:blue;">in</span> context.Affiliates </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   18</span>                             <span style="color:blue;">where</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   19</span>                             a.CompanyName == name </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   20</span>                             <span style="color:blue;">select</span> a.ID;</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   21</span>             <span style="color:blue;">var</span> aff2 = <span style="color:blue;">from</span> a <span style="color:blue;">in</span> context.Affiliates <span style="color:blue;">where</span> a.CompanyName == <span style="color:blue;">null</span> <span style="color:blue;">select</span> a.ID;</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   22</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   23</span>             aff.ToList();</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   24</span>             aff2.ToList();</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   25</span>         }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   26</span>     }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   27</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   28</span>     <span style="color:blue;">class</span> <span style="color: rgb(43, 145, 175);">ConsoleWriter</span> : <span style="color: rgb(43, 145, 175);">TextWriter</span></p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   29</span>     {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   30</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   31</span>         <span style="color:blue;">public</span> <span style="color:blue;">override</span> <span style="color: rgb(43, 145, 175);">Encoding</span> Encoding</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   32</span>         {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   33</span>             <span style="color:blue;">get</span> { <span style="color:blue;">return</span> <span style="color: rgb(43, 145, 175);">Encoding</span>.UTF8; }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   34</span>         }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   35</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   36</span>         <span style="color:blue;">public</span> <span style="color:blue;">override</span> <span style="color:blue;">void</span> Write(<span style="color:blue;">string</span> value)</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   37</span>         {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   38</span>             <span style="color:blue;">base</span>.Write(value);</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   39</span>             <span style="color: rgb(43, 145, 175);">Console</span>.WriteLine(value);</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   40</span>         }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   41</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   42</span>         <span style="color:blue;">public</span> <span style="color:blue;">override</span> <span style="color:blue;">void</span> Write(<span style="color:blue;">char</span>[] buffer, <span style="color:blue;">int</span> index, <span style="color:blue;">int</span> count)</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   43</span>         {</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   44</span>             <span style="color:blue;">base</span>.Write(buffer, index, count);</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   45</span>             <span style="color: rgb(43, 145, 175);">Console</span>.WriteLine(buffer, index, count);</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   46</span>         }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   47</span>     }</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   48</span> }</p> </div>  <p>In this code, I have attached a sample logger to my DataContext so that all my queries are logged. Now I ran two queries. Lets take a look at the first query and its logger output,</p>  <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   16</span>             <span style="color:blue;">string</span> name = <span style="color:blue;">null</span>;</p>  <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   17</span>             <span style="color:blue;">var</span> aff = <span style="color:blue;">from</span> a <span style="color:blue;">in</span> context.Affiliates </p>  <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   18</span>                             <span style="color:blue;">where</span> </p>  <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   19</span>                             a.CompanyName == name </p>  <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   20</span>                             <span style="color:blue;">select</span> a.ID;</p>  <p style="margin: 0px;"> </p>  <p style="margin: 0px;">The logger output after executing this query is, as follows -</p>  <p><span style="color:#008080;">SELECT [t0].[ID]     <br />FROM [dbo].[Affiliates] AS [t0]      <br />WHERE [t0].[CompanyName] = @p0 </span></p>  <p><span style="color:#008080;">-- @p0: Input VarChar (Size = 0; Prec = 0; Scale = 0) [Null]</span> </p>  <p>So, you see that although a null is assigned in the variable 'name', the Linq to SQL generated query uses the '=' operator which may lead to undesired results.</p>  <p>However, the second query and its logger output looks like the following -</p>  <p> <span style="color: rgb(43, 145, 175);">  21</span>             <span style="color:blue;">var</span> aff2 = <span style="color:blue;">from</span> a <span style="color:blue;">in</span> context.Affiliates <span style="color:blue;">where</span> a.CompanyName == <span style="color:blue;">null</span> <span style="color:blue;">select</span> a.ID;</p>  <p><span style="color:#408080;">SELECT [t0].[ID]     <br />FROM [dbo].[Affiliates] AS [t0]      <br />WHERE [t0].[CompanyName] IS NULL</span></p>  <p>Here, the generated query uses the 'IS' operator which is desirable.</p>  <p>In case, you want Linq to SQL to generate the first code using 'IS' operator, you may use something like the following one - </p> <!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;}??\fs20 \cf1 var\cf0  aff3 = \cf1 from\cf0  a \cf1 in\cf0  context.Affiliates \par ??                       \cf1 where\cf0  \par ??                       ((name == \cf1 null\cf0  &amp;&amp; a.CompanyName == \cf1 null\cf0 )  || (a.CompanyName == name))\par ??                       \cf1 select\cf0  a.ID;} -->  <div    style="background: white none repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;font-family:courier new;font-size:10pt;color:black;">   <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   26</span> <span style="color:blue;">var</span> aff3 = <span style="color:blue;">from</span> a <span style="color:blue;">in</span> context.Affiliates </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   27</span>            <span style="color:blue;">where</span> </p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   28</span>            ((name == <span style="color:blue;">null</span> &amp;&amp; a.CompanyName == <span style="color:blue;">null</span>)  || (a.CompanyName == name))</p>    <p style="margin: 0px;"><span style="color: rgb(43, 145, 175);">   29</span>            <span style="color:blue;">select</span> a.ID;</p> </div>  <p>This query produces the following SQL code -</p>  <p><span style="color:#408080;">SELECT [t0].[ID]     <br />FROM [dbo].[Affiliates] AS [t0]      <br />WHERE ([t0].[CompanyName] IS NULL) OR ([t0].[CompanyName] = @p0)</span></p>  <p>So, to end, whenever you are writing a where clause on a nullable column using Linq to SQL, make sure you know the consequences and take measures accordingly.</p>  <p>Happy coding!</p></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Technoverloaded</div>
<div class='content'>
If you don't know beforehand whether or not the variable "name" is null or not, you might want to try the Equals method.<BR/><BR/>For example, in the AdventureWorks database:<BR/><BR/>  var query = from e in Employees<BR/>    where Object.Equals(e.ManagerID, pManagerID)<BR/>    select e.EmployeeID ;<BR/><BR/>If pManagerID == null, then LINQ to SQL generates<BR/><BR/>SELECT [t0].[EmployeeID]<BR/>FROM [HumanResources].[Employee] AS [t0]<BR/>WHERE [t0].[ManagerID] IS NULL<BR/><BR/>but if pManagerID contains a value, e.g. 109, then the SQL generated is<BR/><BR/>SELECT [t0].[EmployeeID]<BR/>FROM [HumanResources].[Employee] AS [t0]<BR/>WHERE ([t0].[ManagerID] IS NOT NULL) AND ([t0].[ManagerID] = @p0)<BR/>-- @p0: Input Int (Size = 0; Prec = 0; Scale = 0) [109]</div>
</div>
<div class='comment'>
<div class='author'>merlin981</div>
<div class='content'>
Great article. It is very important for developers new to LINQ to understand these ramifications. Thanks for demonstrating how the underlying code differs based on column type.<BR/><BR/><A HREF="http://blog.linqexchange.com" REL="nofollow">LINQ Exchange - Learn LINQ and Lambda Expressions</A></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read My Article at CodeProject on LINQ to Log4Net Logging]]></title>
    <link href="http://smsohan.com/blog/2008/05/14/read-my-article-at-codeproject-on-linq/"/>
    <updated>2008-05-14T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2008/05/14/read-my-article-at-codeproject-on-linq</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Today <a href="http://www.codeproject.com/" target="_blank">CodeProject</a> has published an article of mine where I have shown a way to use Log4Net logging to capture your LINQ to SQL class generated log messages. I suggest you all to take a look and comment at <a title="http://www.codeproject.com/KB/linq/LINQ2Log4Net.aspx" href="http://www.codeproject.com/KB/linq/LINQ2Log4Net.aspx" target="_blank">http://www.codeproject.com/KB/linq/LINQ2Log4Net.aspx</a>.</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Set Default Application Wide CommandTimeout in LINQ to SQL DataContext Subclasses]]></title>
    <link href="http://smsohan.com/blog/2008/04/29/how-to-set-default-application-wide/"/>
    <updated>2008-04-29T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2008/04/29/how-to-set-default-application-wide</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Sometimes you have written long running stored procedures and you need to invoke the stored procedures through your LINQ to SQL class. By default the SqlCommand has a timeout value of 30 seconds and in some instances you may need a longer value to complete your long running database operations. In a situation like this, if you are using the default time out value, you may encounter the following exception scenario,</p>  <p><span style="color:#ff0000;">Error: System.Data.SqlClient.SqlException: Timeout expired</span></p>  <p>Today I was looking for a solution after I encountered the above exception. In my project I am using LINQ to SQL classes to execute my stored procedures which sometimes may exceed the 30 seconds timeout value to complete the operations. I wanted to set the default timeout for my LINQ to SQL <span style="color:#12bbf3;">DataContext</span> subclass generated by Visual Studio 2008 and wanted a clean approach. I came up with the following solution and think it may help some of you with similar needs.</p>  <p>Firstly, I can set the command timeout in the following way,</p>  <p><span style="font-family:Courier New;"><span style="color:#2eb3ba;">MyDataContext</span> context = new <span style="color:#2eb3ba;">MyDataContext</span>();</span></p>  <p><span style="font-family:Courier New;">context.CommandTimeout = 300; //Value in seconds</span></p>  <p>However, if I do it this way, then I need to do it at every place where I want the timeout value to be changed from the default value of 30 seconds. And I wanted to avoid this annoying approach. Fortunately, the auto generated DataContext subclass provides me a very simple way to get around to this problem through partial methods.</p>  <p>If you take a look into the auto generated <span style="color:#2eb3ba;">DataContext</span> subclass's code, you will notice the presence of the following partial methods at the top-</p>  <p><span style="font-family:Courier New;">#region Extensibility Method Definitions    <br /><span style="color:#0000ec;">partial void</span> OnCreated();</span></p>  <p><span style="font-family:Courier New;color:#008040;">//Some other partial Methods depending on your db</span></p>  <p><span style="font-family:Courier New;">#endregion</span></p>  <p>This <span style="font-family:Courier New;">OnCreated()</span> method is placed to provide you extensibility with the context constructor logic. Anytime you invoke any one of the constructors of your <span style="color:#1ec5d2;">DataContext</span> subclass, this method is called. However, since this is a partial method without a body, this call has no effect unless I define the body myself!</p>  <p>So, we are going to utilize this method. To do so, we will write another partial class along with this generated partial class (the one at the *.designer.cs file) and implement the partial void OnCreated() method in our newly added partial class where we will set our desired <span style="color:#1ec5d2;">CommandTimeout</span> value.</p>  <p><span style="font-family:Courier New;">public partial class <span style="color:#1ec5d2;">MyDataContext</span> : System.Data.Linq.<span style="color:#1ec5d2;">DataContext</span>     <br />{     <br />    partial void OnCreated()     <br />    {     <br /><span style="color:#37e1d9;">        </span><span style="color:#1e6907;">//Set the timeout value to 300 = 5 Min.      <br /></span>        <span style="color:#1217f3;">base</span>.CommandTimeout = 300;     <br />    }     <br />}</span></p>  <p>So, we just set the value of CommandTimeout Property of the base <span style="color:#1ec5d2;">DataContext</span> class with just the addition of this new partial class. Also, we got rid of the annoying 'change everywhere' scenario in this approach. Thanks to the creators of the code generator, who were wise enough to foresee our needs, for providing us with a way to take such a clean approach!</p>  <p>By the way, I was interested to see a handy use of the partial method in C# ever since I first learned about it. I am happy that, I found a real life use myself!</p></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
thanks for thw simple solution of timeout problem,i was trying to use async thread but this is more simple.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
cool, will keep trying to get more info on that.<br /><br />BTW my hunch is that it&#39;s unlikely that these things differ when i use c#.</div>
</div>
<div class='comment'>
<div class='author'>Sohan</div>
<div class='content'>
Its hard to say why. Make sure you are using the right partial class, in the right namespace and the method name is actually the name of the partial method that is called from the auto generated class.<br /><br />Your VB code looks good to me otherwise.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Can you please help me with the VB version as well<br /><br />I tried converting this code into VB and these are the results<br />Partial Class SampleDBDataContext<br /> Inherits System.Data.Linq.DataContext<br /> Private Partial Sub OnCreated()<br />  &#39;Put your desired timeout here.<br />  Me.CommandTimeout = 3600<br /><br />  &#39;If you do not want to hard code it, then take it <br />  &#39;from Application Settings / AppSettings<br />  &#39;this.CommandTimeout = Settings.Default.CommandTimeout;<br /> End Sub<br />End Class<br /><br />This doesnt seem to work, any clues?</div>
</div>
<div class='comment'>
<div class='author'>D4rkTiger</div>
<div class='content'>
Hello,<br /><br />I read your article but I can&#39;t realize the solution it should be given.<br /><br />Could you please help me to implement your solution ? How do you specify your new DataContext to the LINQ request ?<br /><br />Thanks</div>
</div>
<div class='comment'>
<div class='author'>hussain</div>
<div class='content'>
Thanks u so much</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Posts of the day that I liked most]]></title>
    <link href="http://smsohan.com/blog/2008/04/08/posts-of-day-that-i-liked-most/"/>
    <updated>2008-04-08T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2008/04/08/posts-of-day-that-i-liked-most</id>
    <content type="html"><![CDATA[<div class='post'>
<p>1. The Monostate Pattern - Another way to look into Singleton and some improvement over singleton issues.</p>  <p>Read it <a href="http://www.codethinked.com/post/2008/04/The-Monostate-pattern.aspx">Here</a></p>  <p>2. Another good article on LINQ regarding the grouping queries. Read it <a href="http://www.codethinked.com/post/2008/04/Grouping-Linq-Aggregates-in-C.aspx">Here</a></p></div>

]]></content>
  </entry>
  
</feed>
