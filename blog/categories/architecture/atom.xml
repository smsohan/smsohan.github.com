<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Architecture | Sohan's Blog]]></title>
  <link href="http://smsohan.com/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2021-12-19T12:52:39-08:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 6 - Slack and Microsoft Teams]]></title>
    <link href="http://smsohan.com/blog/2021/06/18/architecture-realtime/"/>
    <updated>2021-06-18T15:23:00-07:00</updated>
    <id>http://smsohan.com/blog/2021/06/18/architecture-realtime</id>
    <content type="html"><![CDATA[<p>Most applications have a request-response based single-channel data-flow. In such systems, human or software triggered requests are served by software provided responses. For example, when you make your DuckDuckGo search, you initiate a request and their server produces a response back to you. Realtime multiplayer systems are quite different because the pattern of information flow is more complex, often being a two-way or many-to-many data flow, with strict latency constraints. For example, when you chat with a bunch of friends, or join them for a video call, the data-flow is quite different than when you watch a YouTube video.</p>

<p>I found two great talks from the folks at Slack about "How Slack Works" and "Scaling Slack". The nice thing about these two talks is they are presented one year apart, and it gives a great view into the challenges with designing a realtime multiplayer system in the first place, and then evolving the design to meet scaling needs. To an aspiring architect, these two talks can provide a real-life example of thinking in terms of evolutionary architecture as a vital tool to strike a balance between upfront and just in time design.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WE9c9AZe-DY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/_M-oHxknfnI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>I also recommend you to check the architecture of Microsoft Teams. The contrast between Slack and Teams design will show you the stark difference between the two approaches. The key difference between the two is Slack was built from scratch, and Teams was built on top of a whole bunch of existing services such as Skype, OneDrive, Sharepoint, etc. As a result of different organizational dynamics, the two products are quite unique in their architecture even though there's a major overlap of features offered by both.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/I33pQ9PUHNc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Once you get a chance to watch these talks, I recommend taking some time to think about the main conceptual design elements of realtime multiplayer systems. For example, patterns of many-to-many communication channels, low latency data-flow, security and access control, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 5 - MongoDB]]></title>
    <link href="http://smsohan.com/blog/2021/04/23/architecture-mongodb/"/>
    <updated>2021-04-23T10:19:00-07:00</updated>
    <id>http://smsohan.com/blog/2021/04/23/architecture-mongodb</id>
    <content type="html"><![CDATA[<p>Continuing on this architecture series of posts. Similar to the <a href="/blog/2021/03/04/architecture-redis/">post on Redis</a>, this time let's focus on another hugely popular distributed database
called <a href="https://www.mongodb.com">MongoDB</a>. If you aren't familiar with MongoDB, it's a distributed database that allows you to store and query humongous amounts of JSON-like data.</p>

<p>To get an overview of MongoDB and its architecture, you can watch the following YouTube video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/oH-gQ4JdXQc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Of course, you can also download the <a href="https://www.mongodb.com/collateral/mongodb-architecture-guide">official architecture guide</a> to learn more.
Let's focus on rationale behind MongoDB's architectural decisions. You can find answers to all of the following questions
if you went through the guide or the video. But my goal is get you to think about the why behind the decisions.</p>

<p>MongoDB has databases and collections. While collections are conceptually parallel to tables in traditional relational databases, MongoDB doesn't impose
any restrictions on the schema of a collection. Can you think of reasons behind this decision? What trade-offs come to your mind? For example,
not having a schema allows you to store anything within a collection, essentially reducing the need for schema migrations on very large databases.
But at the same time, it may complicate consumption of the data. What other trade-offs can you think of?</p>

<p>MongoDB uses a router named Mongos and needs config servers to route queries when data is sharded into multiple partitions. What benefits and challenges do you see with the addition of this router component?</p>

<p>MongoDB requires you to have an uneven number of replicas to deal with failover when a new primary node needs to be elected. How do you judge this design decision?</p>

<p>By design, MongoDB allows you to choose a write concern at write time to allow you to balance your need in the <a href="https://en.wikipedia.org/wiki/CAP_theorem">CAP</a> triangle. Can you explain what you must do
 to ensure you'll not lose data is 2 out of 3 of your replica servers were to go corrupt?</p>

<p>MongoDB allows you to run complex map-reduce queries in the form of aggregate pipelines. In a distributed database, which component within the MongoDB ecosystem
is responsible for aggregating data that spans multiple nodes?</p>

<p>If you followed the Redis post, what would you say are the top 3 architectural differences between MongoDB and Redis? Can you reason about the why behind the
differences?</p>

<p>Based on MongoDB's architecture, where do you see a potential bottleneck that can affect scaling a MongoDB cluster? What can you do to workaround the limitations?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 4 - Redis]]></title>
    <link href="http://smsohan.com/blog/2021/03/04/architecture-redis/"/>
    <updated>2021-03-04T09:39:00-08:00</updated>
    <id>http://smsohan.com/blog/2021/03/04/architecture-redis</id>
    <content type="html"><![CDATA[<p>Welcome back to the Software Architecture series. I know at least a few people from my team are following, and that's a great encouragement.</p>

<p>For today's post, let's focus on learning from a very popular and commonly used open-source project called <a href="http://redis.io">Redis</a>. To the developers, Redis is a
dead simple key-value store with a super simple API as follows:</p>

<p>```bash</p>

<p>$ set today 'Thursday'
OK</p>

<p>$ get today
Thursday</p>

<p>$ set temp 20
OK</p>

<p>$ incr temp
21</p>

<p>$ incrby temp 3
24</p>

<p>$ get temp
24
```</p>

<p>Of course Redis has more advanced features, but not too many. I think Redis is a delightful system. It's fun to use and has a reputation for being incredibly fast and scalable. I'm going to recommend you to spend some time on <a href="https://docs.redislabs.com/latest/rs/concepts/">Redis architecture</a> and see if you understand the concepts to confidently answer the following questions:</p>

<ol>
<li>Why is Redis so fast?</li>
<li>What can you do to prevent data loss when using Redis?</li>
<li>How does Redis distribute its data to multiple nodes?</li>
<li>What happens when you add a new node to a Redis cluster?</li>
<li>What happens when you remove a node from a Redis cluster?</li>
<li>How does Redis allow you to have an even distribution of the data in your cluster?</li>
<li>How can you build resilience using Redis when a whole datacenter fails?</li>
<li>How does a Redis client discover which Redis server to go to?</li>
<li>How do you know if you have enough capacity in your Redis cluster?</li>
<li>How does Redis provide end-to-end encryption?</li>
<li>If a Redis cluster dies, how can you restore it?</li>
<li>What metrics would you use to monitor if your Redis cluster is healthy?</li>
</ol>


<p>My plan is to introduce you to a bunch of open-source systems like Redis and ask similar questions. The idea is, after going through a few of these systems, you'll start to see patterns and trade-offs for each. Being familiar with real-world systems and seeing the patterns in use, I hope you'll be able pick and choose the patterns that best fit your system requirements, environment, and people.</p>

<p>Happy learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 3: Writing]]></title>
    <link href="http://smsohan.com/blog/2021/01/17/software-architecture-part-3-writing/"/>
    <updated>2021-01-17T17:36:00-08:00</updated>
    <id>http://smsohan.com/blog/2021/01/17/software-architecture-part-3-writing</id>
    <content type="html"><![CDATA[<p>An architect first needs to write for herself, and then for her team. Let me explain a bit.</p>

<p>An architect takes the trio of requirements, people, and environment, and does her research to design the most delightful system. In her research process, she uses her past experience as well as the experience of others. Even a moderately complex system design involves a lot of trade-offs without clear winners. For example, given that there are tens of different databases one can choose, how can she recommend a specific one? Only a clear mind can produce a logically sound write-up. So, in the process of writing and rewriting her design rationale, an architect can strengthen the soundness of her own logic behind the choices made. This is also known as covering one's ass.</p>

<p>Secondly, an architect is a busy person and can't scale her time if she has to personally explain her design rationale to everyone. In fact, as she's designing the system and making certain assumptions, she must seek feedback from the team to help her find alternatives or blind-spots. Writing scales infinitely (e.g. J.K. Rowling), and after all, an architect must use a scalable system for herself, right?</p>

<iframe type="text/html" widdatth="336" height="550" frameborder="0" allowfullscreen style="max-width:100%" src="https://read.amazon.ca/kp/card?asin=B07NPN5HTP&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_TRBbGbF1JZ1FB" ></iframe>




<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="max-width:100%" src="https://read.amazon.ca/kp/card?asin=B0090RVGW0&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_cGBbGb41JPT2Z" ></iframe>


<p>In this episode, I have two all time great books to recommend, <a href="https://www.amazon.com/Elements-Style-William-Strunk-Jr/dp/194564401X">The Elements of Style</a> and <a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548/ref=sr_1_1?crid=2CX22WLYQMRQ4&amp;dchild=1&amp;keywords=on+writing+well&amp;qid=1610987519&amp;s=books&amp;sprefix=on+writing+%2Cstripbooks-intl-ship%2C194&amp;sr=1-1">On Writing Well</a>. If you want to learn to write with a fascinating biographic story, I loved <a href="https://www.amazon.com/Writing-Memoir-Craft-Stephen-King/dp/1982159375/ref=pd_sbs_4?pd_rd_w=c3cVk&amp;pf_rd_p=3ec6a47e-bf65-49f8-80f7-0d7c7c7ce2ca&amp;pf_rd_r=4C1CJMPXT72EZ2Z0ZXAB&amp;pd_rd_r=8c477446-3402-4789-8332-0b508abb7812&amp;pd_rd_wg=TmVYV&amp;pd_rd_i=1982159375&amp;psc=1">On Writing (A Memoir of the Craft)</a> by Stephen King. Do yourself a favor and get these books. Even if you are a native English speaker, I recommend you reading these books to make your writing interesting. As you can imagine, these books on writing are fun read, it'd be quite an irony otherwise.</p>

<p>As promised before, this is my last soft-skills related post in the software architecture series. Only a few senior engineers will break the glass ceiling and become an architect. Fewer will become a great architect. All the great ones I've met had exemplary soft-skills.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 2: People]]></title>
    <link href="http://smsohan.com/blog/2020/12/30/software-architecture-part-2-people/"/>
    <updated>2020-12-30T21:03:00-08:00</updated>
    <id>http://smsohan.com/blog/2020/12/30/software-architecture-part-2-people</id>
    <content type="html"><![CDATA[<p>To be an architect, you'll have to be a leader. And, to be a leader, you'll have to be able to understand people and create an influence on them. So, focusing on the people involved with a system is a pre-requisite for designing systems that delight them.</p>

<p><img src="/images/DaleCarnegieBook.png" alt="How To Win Friends And Influence People" /></p>

<p><small>Photo credits to <a href="https://flic.kr/p/N7J52S">Alan O'Rourke</a></small></p>

<p>For this topic, I want you to read and internalize the ideas from the book <a href="https://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034/ref=sr_1_1?dchild=1&amp;keywords=Dale+Carnegie&amp;qid=1609523629&amp;s=books&amp;sr=1-1">How to Win Friends and Influence People</a> by Dale Carnegie. Honestly, it's a fun read for anyone, not just for the aspiring architect. But an architect must be able to listen with empathy and clearly share her ideas. She needs to truly appreciate diverse opinion because it's common that a delightful system can be designed in many ways, and she's likely to have her blind spots. Moreover, she needs exceptional conflict-resolution skills to create a safe space so the best ideas win irrespective of where it comes from.</p>

<p>I know some of you may be getting impatient because you want to learn hardcore software architecture and I'm not talking anything technical yet. If you can hold your patience and bear with me, we'll get there soon enough. I have what I think an exciting curriculum where I'll be teaching hardcore software design topics using many well-known open-source products. My goal is to set you up for success as an architect, and these softcore topics are of the highest priority in my curriculum. The small number of great architects I've enjoyed working with have won me over by their people skills. All the other architects may have been technically genius, but lacked people skills to appreciate the essence of a delightful system, let alone designing one.</p>
]]></content>
  </entry>
  
</feed>
