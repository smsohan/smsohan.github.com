<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Career | Sohan's Blog]]></title>
  <link href="http://smsohan.com/blog/categories/career/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2020-10-11T17:39:57-06:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working With Me]]></title>
    <link href="http://smsohan.com/blog/2020/02/08/working-with-me/"/>
    <updated>2020-02-08T12:38:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/02/08/working-with-me</id>
    <content type="html"><![CDATA[<p>Since I commonly work with a diverse group of people, this post is a way for me to broadcast some quick tricks that may help our working relationship. When we work together, let's do this:</p>

<p><strong>Trust</strong> is only earned when it's mutual. Let's work with this shared belief.</p>

<p><strong>Context</strong> is everything. Most importantly, show me <strong>why</strong> we need to work on something. If the answer isn't clear in your mind, we can work together to build a crisp context.</p>

<p><strong>Solutions</strong> for problems you're raising. Ideally, you've already thought about a few solutions with some measure of feasibility for each, and you come with an open mind. I know you care about the problem only if you spent some time thinking about a few solutions.</p>

<p><strong>Clarity</strong> between your evidence and assumptions. Assumptions are often essential to move ahead, but treating assumptions as evidence can be harmful.</p>

<p><strong>Output</strong> is the focus, our egos aren't. That said, let's be mutually respectful.</p>

<p><strong>Time</strong> is managed. Let's manage our expectations given the time we have. Blaming the shortage of time shows a lack of skill.</p>

<p><strong>Writing</strong> is a great thought exercise and good write-up scales infinitely. Let's write and rewrite our thoughts, specially when we're unclear about those.</p>

<p><strong>Standup comedies, biography, soccer, politics, investment, tech, leadership, Netflix, movies, and similar topics</strong> are cool. Sorry, not much of a Hockey or Basket Ball fan. Mostly a passive music listener and happy to listen whatever is on radio or a YouTube playlist.</p>

<p>If you have a similar list, I'd be happy to read and respect it. Please send along.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Trainings]]></title>
    <link href="http://smsohan.com/blog/2019/06/27/internal-trainings/"/>
    <updated>2019-06-27T13:31:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/06/27/internal-trainings</id>
    <content type="html"><![CDATA[<p><img src="/images/design_thinking.jpg" alt="design_thinking" /></p>

<p><small>
Design Thinking course, Cisco Calgary Office, AB, 2019
</small></p>

<p>One benefit of working at Cisco is access to the many learning and development resources. Our learning and development org arranges hundreds of courses throughout the year. Moreover, we have a reimbursement program for external courses, conferences, books, and subscriptions to online learning programs and publications.</p>

<p>In the past 6 years, I have immensely benefitted from these resources. Here's a list of the learning resources I've used.</p>

<ol>
<li><a href="https://learning.oreilly.com">Safari books online</a>, aka O'Reilly learning: In the past 3 years, have taken 3 online trainings and 7 books on this platform so far.</li>
<li>Design thinking, 2019: A two-day course taught by consultants about how to apply the principles of design thinking to communicate and derive solutions to complex problems.</li>
<li>Mindfulness, 2019: A 5-week program taught by consultants, with one hour per week, where I learned about staying mindful and effective at work amid all the chaos that surrounds it.</li>
<li><a href="http://tufte.com">Tufte one-day course</a>, 2019: Attended a course taught by Edward Tufte on data visualization and learned about the principles that make compelling data visualization.</li>
<li><a href="https://www.sans.org/course/hacker-techniques-exploits-incident-handling">SANS incident response</a>, 2018: A packed week-long program where I learned to think like a hacker by learning about and then hacking some interesting vulnerabilities in systems.</li>
<li><a href="https://dcloud-cms.cisco.com/demo_news/cisco-r00tcamp-lab-v1">Cisco R00tcamp</a>, 2017: A packed week-long program where I learned hands-on pen-testing techniques to build more secure software.</li>
<li><a href="https://www.cisco.com/c/en/us/products/security/threat-hunting-workshop.html">Cisco threat-hunting</a>, 2017: A daylong course to find root case that triggered a security threat using integrated Cisco tools, including the product I build with our team.</li>
<li><a href="https://www.railsconf.com/2015/">RailsConf</a>, 2015: It was a big opportunity to meet the community and bring some of their practices in-house. For example, we started using <a href="https://www.bugsnag.com">BugSnag</a> after learning about it in the conference.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reference Checks: Don'ts]]></title>
    <link href="http://smsohan.com/blog/2017/09/07/on-reference-checks-donts/"/>
    <updated>2017-09-07T22:55:00-06:00</updated>
    <id>http://smsohan.com/blog/2017/09/07/on-reference-checks-donts</id>
    <content type="html"><![CDATA[<p>Most people eventually come across a time when they'd need to provide
names of colleagues as references while applying for a new job. The
referees are often involved in the last stage of the hiring process,
when the employer is generally satisfied that the candidate is a
potential hire. At this stage, the employer expects to find a few
things:</p>

<ol>
<li><strong>Verification of facts.</strong> The employer wants to confirm the validity of
the information such as the role, responsibilities, and achievements
provided by the candidate about their past experience.</li>
<li><strong>Qualitative feedback.</strong> The employer wants to understand the "cultural
fitness" aspect of the candidate by asking questions related to the
individual's interaction and collaboration skills.</li>
</ol>


<p>While these are valid goals, I personally find the practice of using
references to achieve these goals to be a rather flawed one. Here's why:</p>

<ol>
<li><strong>References aren't replacements for interviews.</strong> As an employer,
the responsibility is on the employer to be smart enough to verify
that the skills and experiences as advertised by a candidate's resume
reflect the reality. If the employer can't do that with a reasonable
amount of confidence, they're likely to hire wrong candidates anyway.</li>
<li><strong>Likely outdated.</strong> If a candidate is currently employed, due to the
secret nature of most job searches, they are unlikely to use one of
their coworkers as the referee. As a result, the longer a candidate
is employed by the most recent employer, the more outdated the
references tend to get.</li>
<li><strong>Likely tampered.</strong> If a candidate wants to use a referee, they'd
generally contact ahead of time with the referee. Even if they don't
contact, the candidates are likely to mention names of people that
are almost certain to say good things about them. For any qualitative
feedback, this setup limits the possibility of getting any negative
traits of a candidate.</li>
<li><strong>Open to interpretation.</strong> Reference checks are often done over
phone. Also, the person calling to check the reference often hasn't met the
candidate during the interview steps. This creates a double-blindness
of sort. So, anything said during the reference check process suffers
from possibilities of information gap.</li>
</ol>


<p> In my opinion, if reference checks are used, they should only be used
 to verify factual information. That too, should be done keeping in mind
 that the information may be outdated, or intentionally biased.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So you want to be a software developer. Where to start?]]></title>
    <link href="http://smsohan.com/blog/2017/02/28/so-you-want-to-be-a-software-developer-where-to-start/"/>
    <updated>2017-02-28T10:40:00-07:00</updated>
    <id>http://smsohan.com/blog/2017/02/28/so-you-want-to-be-a-software-developer-where-to-start</id>
    <content type="html"><![CDATA[<p>You didn't go to college to study computer science and you have no
background on computer programming. You're not quite happy with your
current job area, and looking forward to something more rewarding and
exciting. You've heard software development is generally a good area
and often times people without any prior software background can
actually get a job. But where do you start?</p>

<p>First, you're thinking in the right direction, and I can assure you that
if you like making things and have a nack for problem-solving, you can
learn the skills to become a programmer. Now, let me share a path
forward from here:</p>

<ol>
<li><p><strong>Take an online course and learn a programming language</strong>. I'd
suggest learning the programming language Ruby, using the courses
offered by <a href="https://www.codeschool.com/learn/ruby">CodeSchool</a></p></li>
<li><p><strong>Build a demo application</strong>. Here's an idea: Make an app for
tracking personal expenses so that you can enter all your expenses
and see reports about your expenses on a weekly / bi-weekly / monthly
basis by type of expense such as food, transportation, accommodation,
utility etc.</p></li>
<li><p><strong>Publish the application to the internet</strong>. Use Heroku to pubish
your app to the internet and use it for yourself. When things don't
work as expected, fix bugs or extend the application to better serve
your needs.</p></li>
</ol>


<p>I'd say spend about <strong>6 months</strong> on the steps 1-3. Once you've an
application that you're somewhat proud to show to your friends or
prospective employees, it's a sign that you're progessing. But don't
apply for jobs just yet. I'd suggest spending another 6 months to learn
a few more fundamental programming topics:</p>

<ol>
<li><strong>Algorithms</strong>: Take an online course on basic algorithms to understand
the different types of algorithmic approaches that can be used to
solve known problems.</li>
<li><strong>Data structures</strong>: Take an online course on data structures since you'll
need to use them on a daily basis and this is one of those topics
where it'll be hard to learn on the job from no prior background.</li>
<li><strong>Object oriented concepts</strong>: Take an online course to understand the
fundamental concepts behind object oriented programming. It takes
years to master the concepts, but taking a course will greatly help you
to get the basics right.</li>
</ol>


<p>If you spent a year of your free time (8-10 hours a week), you've now
acquired the basics that will be required to find a job. Obviously, you
can squeeze it in a much smaller time window if you dedicate more time
and already have some background with math / computing skills. But at a
mimimum, I think it'll take six months for most people to get there.</p>

<p>Now, I'd suggest you to take two bootcamps. The bootcamps are great in
two ways. First, you get to work with peers and immerse into building
something. Second, you can judge yourself against the peers to
understand where you stand against the pros and newbies. Take notes and
get ready for a second bootcamp. This time, the idea is to understand if
you've improved since the first bootcamp and able to perform better than
the first time.</p>

<p>After the bootcamps, if you're feeling positive, it's time to start
looking for jobs. Make sure to find a job that matches your skills and
keep an open mind about accepting a job that may not pay top dollars
yet. If you find a job, and you'll, go ahead and take it. You'll be
learnig at a fast pace on the job, and if you're good, you'll be
rewarded accordingly either on the current job or on a new job. The idea
is to focus on learning on the job, but also off the job to learn topics
that may not be of interest on the job.</p>

<p>If you followed this plan, I expect you to get your first job as a
programmer in 1.5-2 years, and get profecient in 4 years. Prepare
accordingly. May be the 4 years is worth when you consider you'll be
happier and better rewarded for many more years to come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why do you want this new job?]]></title>
    <link href="http://smsohan.com/blog/2017/02/27/why-do-you-want-this-new-job/"/>
    <updated>2017-02-27T15:42:00-07:00</updated>
    <id>http://smsohan.com/blog/2017/02/27/why-do-you-want-this-new-job</id>
    <content type="html"><![CDATA[<p>No matter which side of the table you've sat during interviews, you've
probably heard this question: <strong>'Why do you want this new job?'</strong></p>

<p>In the recent past, I've interviewed a few candidates and heard the
following answers so far:</p>

<ol>
<li>I'm not learning much on the current job after it's been 2-4 years.</li>
<li>I'm looking for something that offers better work-life balance.</li>
<li>I'm not really looking for a job. The recruiters got in touch and I
thought I'd discuss.</li>
<li>I'm looking for more challenging work.</li>
</ol>


<p>All of the above are valid answers. I think there's another perfectly
valid answer that candidates seldom mention probably due to the gravity
of the interview room situation. I've interviewed over a hundred
candidates across different companies and am yet to find anyone that
mentions: <strong>I am not happy with my current salary and benefits compared
to my skills</strong></p>

<p>Back to topic of answers. So, when someone answers that they are not
learning new things on the job, obviously, you'd be curios to know why
and how they have tried to change things. Unfortunately, most candidates
simply mention that they are doing repeat work and there's not much to
learn doing the same thing over and over again. This is where I start
feeling a little uneasy. However, I understand that it's a true
statement. If you're in a similar situation, here's some suggestion:
read books, and write code based on what you've read. Then, you can tell
a much convincing story that, I've forced myself to learn new things and
here's some proof, but I really want to apply the newly learned skills
outside the scope of the "hello world" skills.</p>

<p>About work-life balance, I totally hear you. And if your current job
doesn't suit what you need out of your life, it's a perfectly valid
reason to look for new opportunities. However, make sure you're able to
clearly set the expectation with your potential employer about what
work-life balance means for you. For example, if you can't work over 40
hours a week, or must work from home one-two days a week, it's best to
discuss this even before an interview starts to ensure you're a good
match with the employer.</p>

<p>If you showed up at in interview just because a recruiter got in touch,
I'd say introspect first. It's possible that on our subconcious mind you
have expectations that the potential of the new job offers you something
that you don't get at the current job. So, instead of a passive asnwer
that the you simply acted based on the recruiter's invite, it's much
convincing to see if you can lay down one or two things that you expect
from the new job that you don't get at the current job.</p>

<p>About looking for more challenge, it sounds like a cliche unless you can
share examples of work that is of challenging to you. May be you like
the challenge of using more complicated algorithms, may be you like
dealing with a lot of data, may be you like supporting production
emergencies, but there's gotta be something that you can explicitly
mention as challenging. It helps employers to understand if they're able
to provide you with enough challenge on the job.</p>

<p>Finally, if you're looking for a new job because the current job isn't
paying upto the level of your skills and contributions, make sure to
communicate it clearly as well. With salaries and benefits, I find it
much easier to work with people that know the actual $ figure that'll
make them happy instead of beating around the bush to create confusions
all around. Just be confident and tell what makes you happy. If the
employer can afford it, most likely they'll want to get you onboard as
a happy employee. If they can't afford it, they'll do their best. The
key here is to be explicit about what you want and be sure and confident
about it.</p>

<p>In a nutshell, when you walk into an interview it's yours to lose. The
potential employer is investing their time and resources and would
rather have you hired than having to interview other candidates. As long
as you are able to justify why you want the new job, they'll be quite
accommodating.</p>
]]></content>
  </entry>
  
</feed>
