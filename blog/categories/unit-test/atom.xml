<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unit test | Sohan's Blog]]></title>
  <link href="http://smsohan.com/blog/categories/unit-test/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2020-10-11T17:39:57-06:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Should you unit test methods with a lot of mocking?]]></title>
    <link href="http://smsohan.com/blog/2011/08/09/should-you-unit-test-methods-with-lot/"/>
    <updated>2011-08-09T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2011/08/09/should-you-unit-test-methods-with-lot</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Well, anytime you have a lot of mocking, it is probably a smell. Particularly, a first smell is violation of the <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">law of demeter</a>. However, we were having discussion about whether or not we should write unit test for something like the following example:<br /><br /><script src="https://gist.github.com/1136189.js">
  
 </script><br /><br />As you can see, this method actually does a quite important task. It invokes the search method with specific parameters that will determine your search results. Now, we were debating whether or not the example unit test actually brings any value.<br /><br />Here's what we have discussed:<br /><b>Pros:</b><br />It confirms that you are actually calling the third party method with the right parameter.<br /><b>Cons:</b><br />The test is too tightly coupled with the implementation, so it will break if something changes inside the method irrespective of its actual output.<br /><br />But we failed to come to an unanimous decision on its usefulness. We all agreed on the point that it definitely needed some integration tests to make sure the search had actually worked.<br /><br />Here are two questions for you:<br /><br /><ol style="text-align: left;"><li>Would you skip the unit test altogether for this method and rely completely on an integration test? Why/Why not?</li>
 <li>If you are to rewrite this code, how would you write this using TDD?</li>
 </ol><br />Looking forward to see your input on this!<br /><br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Isa Goksu</div>
<div class='content'>
The first question actually has two aspects. It has a design part, and an implementation part. You have to judge which part we are doing here since you know the actual work there. If it is a design side, you write an integration or a functional test to find out whether wiring is done correctly or not. If it is on the implementation side, you have to write a unit test that verifies the behaviour.<br /><br />What I see from just a little code snippet here is basically you are creating a wrapper/facade for the library, or a delegate or even an anti-corruption layer kinda something. And your wrapper object is basically created in such a way that it looks like a Humble Object (http://xunitpatterns.com/Humble%20Object.html). Therefore I&#39;d go for integration test. If the team you are working on is a distributed team, then you might have some trust and/or communication issues, therefore writing an additional unit test wouldn&#39;t hurt. Then again that&#39;s not necessary.<br /><br />Main thing here is to understand that TDD won&#39;t tell you that you have write unit tests all the time. What TDD say is have a coverage before you operate, and drive your design with this mentality. One thing I like in Ruby community is that they do focus on Specs rather than focusing on unit/integration/functional tests differences. A tool like RSpec or Cucumber is even designed in such a way that they give you tagging support which you can easily mark your test with #requiresDB, #requiresFileAccess, #opensBrowser, etc.. And then you can create multiple builds by using these tags to have prioritized test suites.<br /><br />Second question is probably an obvious one. If I were to re-write using TDD, I&#39;d probably end up having an anti-corruption layer to the library which is designed 1:1 from the actual library, hence not need to be unit tested.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit/Functional Test Rails ActionController filters following DRY]]></title>
    <link href="http://smsohan.com/blog/2009/05/13/unit-test-actioncontroller-filters/"/>
    <updated>2009-05-13T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2009/05/13/unit-test-actioncontroller-filters</id>
    <content type="html"><![CDATA[<div class='post'>
<p>At <a href="http://scrumpad.com/" target="_blank">ScrumPad</a> most of our controllers are bounded by filters for authentication/authorization. Some filters apply to all actions in a controller while others apply to only a few or leave out only a few. However, since we are following TDD, we need to test the filter is invoked before each of the desired action. This makes the test code MOIST (not DRY)!</p><p><span style="color: rgb(0, 128, 0);"><strong>Example of Moist Code:</strong></span></p>  <p><span style="color: rgb(0, 128, 0);"><span style="color: rgb(0, 0, 0);">The following example only captures two test methods. However, if you have 30 controllers like ours and on an average 5 filters at each, you will possibly find many such duplicates making your test code so moist that it becomes shabby!</span><strong> </strong></span></p>  <pre class="brush: rails">class SomeController<br />before_filter :authenticate<br />before_filter :restrict_invalid_role<br />end<br />class SomeControllerTest<br />def test_index_redirects_without_login<br />get :index<br />assert_redirected_to :controller=&gt;:login, :action=&gt;:login<br />end<br />def test_index_redirects_without_valid_role<br />login_as(:invalid_role)<br />get :index<br />assert_redirected_to :controller=&gt;:exception, :action=&gt;:not_allowed<br />end<br />end</pre><br /><strong><span style="color: rgb(0, 128, 0);">Example of DRY Code:</span></strong><br />I came up with the following implementation to help us with unit testing the before filters. The assumption is, if your filter is invoked, it will work fine. And we are testing the filter only once. The following code is written at the end of the test/test_helper.rb.<br /><pre class="brush: rails">class ActionController::TestCase<br />##example: should_apply_before_filter_to_actions(:authenticate, [:index, :new])<br />def should_apply_before_filter_to_actions(before_filter_name, actions)<br />if(actions.nil? or actions.empty?)<br />  assert false<br />end<br />filter = find_maching_before_filter(before_filter_name)<br />actions.each do |action|<br />  assert_before_filter_applied(filter, action)<br />end<br />end<br />##example: should_apply_before_filter_to_action(:authenticate, :index)<br />def should_apply_before_filter_to_action(before_filter_name, action)<br />filter = find_maching_before_filter(before_filter_name)<br />assert_before_filter_applied(filter, action)<br />end<br /><br />##example: should_not_apply_before_filter_to_actions(:authenticate, [:index, :new])<br />def should_not_apply_before_filter_to_actions(before_filter_name, actions)<br />if(actions.nil? or actions.empty?)<br />  assert false<br />end<br />filter = find_maching_before_filter(before_filter_name)<br />actions.each do |action|<br />  assert_before_filter_not_applied(filter, action)<br />end<br />end<br /><br />##example: should_not_apply_before_filter_to_action(:authenticate, :index)<br />def should_not_apply_before_filter_to_action(before_filter_name, action)<br />filter = find_maching_before_filter(before_filter_name)<br />assert_before_filter_not_applied(filter, action)<br />end<br /><br />##example: should_apply_before_filters([:authenticate, :session_expiry])<br />def should_apply_before_filters(before_filter_names)<br />if(before_filter_names.nil? or before_filter_names.empty?)<br />  assert false, "No Before Filter is Passed"<br />end<br />before_filter_names.each {|filter| should_apply_before_filter(filter)}<br />end<br /><br />##example: should_apply_before_filter(:authenticate)<br />def should_apply_before_filter(before_filter_name)<br />filter = find_maching_before_filter(before_filter_name)<br />if(filter.nil?)<br />  assert false, "no matching filter found for #{before_filter_name}"<br />end<br />assert filter.options.empty?, "the filter #{before_filter_name} has only/except options and does not apply to all actions"<br />end<br /><br />private<br />#finds the matching BeforeFilter object<br />def find_maching_before_filter(before_filter_name)<br />filters = @controller.class.filter_chain()<br />if !filters.nil?<br />  filters.each do |filter|<br />    if(filter.is_a?(ActionController::Filters::BeforeFilter) and filter.method == before_filter_name)<br />      return filter<br />    end<br />  end<br />end<br />return nil<br />end<br /><br />#asserts a single BeforeFilter is applied on a single action<br />def assert_before_filter_applied(filter, action)<br />if(filter.nil? or action.nil?)<br />  assert false<br />end<br /><br />if(filter.options.empty?)<br />  assert true<br />  return<br />end<br />if(!filter.options[:only].nil?)<br />  assert filter.options[:only].include?(action.to_s)<br />end<br />if(!filter.options[:except].nil?)<br />  assert !filter.options[:except].include?(action.to_s)<br />end<br />end<br /><br />#asserts a single BeforeFilter is not applied on a single action<br />def assert_before_filter_not_applied(filter, action)<br />if(filter.nil? or action.nil?)<br />  assert false<br />end<br /><br />if(filter.options.empty?)<br />  assert false<br />end<br /><br />if(!filter.options[:except].nil?)<br />  assert filter.options[:except].include?(action.to_s)<br />end<br />if(!filter.options[:only].nil?)<br />  assert !filter.options[:only].include?(action.to_s)<br />end<br />end<br />end</pre>Now my test code looks like the following-<br /><pre class="brush: rails">  def test_filters<br />should_apply_before_filters(:authenticate, :restrict_invalid_role)<br />end </pre>I can use the other methods as well to get finer control if the before_filter is applied using :only or :except options. And I can use these helper methods across all my controller test classes, making the whole point of testing filters really neat and short.<br /><p>If you are familiar with shoulda tests, you will find the above code following shoulda like naming conventions. I found the above code to strip a lot of your efforts, since you eliminate all test codes that safeguard your filters.</p>Hope it helps someone with similar need.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>a_ludi</div>
<div class='content'>
Thank you for your code base! This is quite useful to me, too. And probably to many others.<br /><br />I&#39;ve refactored your code a little:<br /><br />http://pastebin.com/ybuAPfbF<br /><br />Furthermore, I would advise to put this code into the test_helper.rb file, so all your tests can use it. Then you have to declare all methods except the assert* methods as private. The assert* methods should be public.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Test eager loading in Rails ActiveRecord association]]></title>
    <link href="http://smsohan.com/blog/2009/04/21/unit-test-eager-loading-in-rails/"/>
    <updated>2009-04-21T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2009/04/21/unit-test-eager-loading-in-rails</id>
    <content type="html"><![CDATA[<div class='post'>
<p>To avoid the n+1 problem, you need to use eager loading in ActiveRecord object associations. An easy implementation of eager loading can be done using named scope in the following way.</p> <pre class="brush: rails">class User &lt; ActiveRecord::Base<br /> has_many :friends<br /> named_scope :eager_load_friends, :include =&gt; :fiends<br />end<br />User.find(user_id).eager_load_friends</pre>To unit test the named scope, you can use this following helper method (keep it in test_helper.rb, if you like) that I wrote for <a href="http://www.scrumpad.com/" target="_blank">ScrumPad</a><br /><pre class="brush: rails">def test_eager_loaded(model, association)<br /> assert !model.instance_variable_get("@#{association.to_s}").nil?<br />end</pre>You can then test your eager loading in the following way<br /><pre class="brush: rails">def test_eager_load_friends<br /> test_eager_loaded(User.find(1), :friends)<br />end</pre>You can also use the <a href="http://tammersaleh.com/posts/testing-named_scope" target="_blank">shoulda plug-in</a> if you like. For me, I think we should test the values returned by our named scope as opposed to shoulda approach, which tests if the code is written as expected.<br /><p>Got another solution? I will appreciate if you share.</p></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Ashrafuzzaman</div>
<div class='content'>
Really useful.<br />And a clean way to reuse query.<br />Thanks for shearing</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[assert_equal_float : assert_equal between two float objects with precision]]></title>
    <link href="http://smsohan.com/blog/2009/04/07/assertequalfloat-assertequal-between/"/>
    <updated>2009-04-07T00:00:00-06:00</updated>
    <id>http://smsohan.com/blog/2009/04/07/assertequalfloat-assertequal-between</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In doing rails unit testing, sometime you need to assert the equality between two float objects in the following fashion</p>  <div class="code_div">   <p><strong><span style="font-size:100%;"><span style="font-family:Courier New;"><span style="color:#000080;">assert_equal</span> 32.8, object_under_test.method_returning_float</span></span></strong></p> </div>  <p>The internal storage of float objects sometimes will contain 32.8 with additional lower precision decimal points and hence the assert may fail although the significant digits may be same. For example, the value of <strong>object_under_test.method_returning_float</strong> may be stored as 32.80000001 in memory and the above call may fail.</p>  <p>To solve this problem, you may wish to use the <a href="http://www.ruby-doc.org/core-1.9/classes/Float.html" target="_blank">round method of Float class</a> in the following way</p>  <div class="code_div">   <p><strong><span style="font-size:100%;"><span style="font-family:Courier New;"><span style="color:#000080;">assert_equal</span> 32.8, object_under_test.method_returning_float<span style="color:#008000;">.round(1)</span></span></span></strong></p> </div>  <p>The above line will evaluate true since it will round up to one decimal points. However, be careful about cases where you may have a value greater than 5 in the second decimal place! because (32.86).to_f.round(1) will become 32.9!</p>  <p>However, when you are talking about insignificant digits, this rounding should work fine for you.</p>  <p>Next step is to define a new assert_equal_float method that takes the precision as an argument. Adding this method will save you from code duplication and will improve readability.</p>  <div class="code_div">   <p><span style="font-family:Courier New;"><strong><span style="font-size:100%;"><span style="color:#000080;">def</span> <span style="color:#800080;">assert_equal_float</span>(expected, actual, precision)            <br />    <span style="color:#008080;">assert_equal</span> expected.to_f.round(precision), actual.to_f.round(precision)            <br /><span style="color:#000080;">end</span></span></strong><span style="color:#000080;"> </span>   </span></p>    <p><span style="font-family:Courier New;"></span></p> </div>  <p>Happy float asserting!</p></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>tommy</div>
<div class='content'>
correction: round(precision) is available in ruby 1.9 but not in ruby 1.87 :(</div>
</div>
<div class='comment'>
<div class='author'>Tommy</div>
<div class='content'>
note:<br />(32.86).to_f.round(1) only works in Rails test environment because of active support<br /><br />.round(precision) isn&#39;t available in regular ruby code.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RowTest Extension for NUnit]]></title>
    <link href="http://smsohan.com/blog/2008/11/10/rowtest-extension-for-nunit/"/>
    <updated>2008-11-10T00:00:00-07:00</updated>
    <id>http://smsohan.com/blog/2008/11/10/rowtest-extension-for-nunit</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Well, I was just about to implement it myself! However, its good to see that the NUnit addin named RowTest actually allows us to do the data driven unit test through declarative programming and adding parameters to the dumb test methods!</p>  <p><a title="http://www.andreas-schlapsi.com/projects/rowtest-extension-for-nunit/" href="http://www.andreas-schlapsi.com/projects/rowtest-extension-for-nunit/">http://www.andreas-schlapsi.com/projects/rowtest-extension-for-nunit/</a></p>  <p>Check out this website for an example and get started with RowTest.</p></div>

]]></content>
  </entry>
  
</feed>
