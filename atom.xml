<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sohan's Blog]]></title>
  <link href="http://smsohan.com/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2021-06-18T15:57:50-06:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 6 - Slack and Microsoft Teams]]></title>
    <link href="http://smsohan.com/blog/2021/06/18/architecture-realtime/"/>
    <updated>2021-06-18T15:23:00-06:00</updated>
    <id>http://smsohan.com/blog/2021/06/18/architecture-realtime</id>
    <content type="html"><![CDATA[<p>Most applications have a request-response based single-channel data-flow. In such systems, human or software triggered requests are served by software provided responses. For example, when you make your DuckDuckGo search, you initiate a request and their server produces a response back to you. Realtime multiplayer systems are quite different because the pattern of information flow is more complex, often being a two-way or many-to-many data flow, with strict latency constraints. For example, when you chat with a bunch of friends, or join them for a video call, the data-flow is quite different than when you watch a YouTube video.</p>

<p>I found two great talks from the folks at Slack about &#8220;How Slack Works&#8221; and &#8220;Scaling Slack&#8221;. The nice thing about these two talks is they are presented one year apart, and it gives a great view into the challenges with designing a realtime multiplayer system in the first place, and then evolving the design to meet scaling needs. To an aspiring architect, these two talks can provide a real-life example of thinking in terms of evolutionary architecture as a vital tool to strike a balance between upfront and just in time design.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WE9c9AZe-DY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/_M-oHxknfnI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>I also recommend you to check the architecture of Microsoft Teams. The contrast between Slack and Teams design will show you the stark difference between the two approaches. The key difference between the two is Slack was built from scratch, and Teams was built on top of a whole bunch of existing services such as Skype, OneDrive, Sharepoint, etc. As a result of different organizational dynamics, the two products are quite unique in their architecture even though there&#8217;s a major overlap of features offered by both.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/I33pQ9PUHNc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Once you get a chance to watch these talks, I recommend taking some time to think about the main conceptual design elements of realtime multiplayer systems. For example, patterns of many-to-many communication channels, low latency data-flow, security and access control, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 5 - MongoDB]]></title>
    <link href="http://smsohan.com/blog/2021/04/23/architecture-mongodb/"/>
    <updated>2021-04-23T10:19:00-06:00</updated>
    <id>http://smsohan.com/blog/2021/04/23/architecture-mongodb</id>
    <content type="html"><![CDATA[<p>Continuing on this architecture series of posts. Similar to the <a href="http://smsohan.com/blog/2021/03/04/architecture-redis/">post on Redis</a>, this time let&#8217;s focus on another hugely popular distributed database
called <a href="https://www.mongodb.com">MongoDB</a>. If you aren&#8217;t familiar with MongoDB, it&#8217;s a distributed database that allows you to store and query humongous amounts of JSON-like data.</p>

<p>To get an overview of MongoDB and its architecture, you can watch the following YouTube video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/oH-gQ4JdXQc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Of course, you can also download the <a href="https://www.mongodb.com/collateral/mongodb-architecture-guide">official architecture guide</a> to learn more.
Let&#8217;s focus on rationale behind MongoDB&#8217;s architectural decisions. You can find answers to all of the following questions
if you went through the guide or the video. But my goal is get you to think about the why behind the decisions.</p>

<p>MongoDB has databases and collections. While collections are conceptually parallel to tables in traditional relational databases, MongoDB doesn&#8217;t impose
any restrictions on the schema of a collection. Can you think of reasons behind this decision? What trade-offs come to your mind? For example,
not having a schema allows you to store anything within a collection, essentially reducing the need for schema migrations on very large databases.
But at the same time, it may complicate consumption of the data. What other trade-offs can you think of?</p>

<p>MongoDB uses a router named Mongos and needs config servers to route queries when data is sharded into multiple partitions. What benefits and challenges do you see with the addition of this router component?</p>

<p>MongoDB requires you to have an uneven number of replicas to deal with failover when a new primary node needs to be elected. How do you judge this design decision?</p>

<p>By design, MongoDB allows you to choose a write concern at write time to allow you to balance your need in the <a href="https://en.wikipedia.org/wiki/CAP_theorem">CAP</a> triangle. Can you explain what you must do
 to ensure you&#8217;ll not lose data is 2 out of 3 of your replica servers were to go corrupt?</p>

<p>MongoDB allows you to run complex map-reduce queries in the form of aggregate pipelines. In a distributed database, which component within the MongoDB ecosystem
is responsible for aggregating data that spans multiple nodes?</p>

<p>If you followed the Redis post, what would you say are the top 3 architectural differences between MongoDB and Redis? Can you reason about the why behind the
differences?</p>

<p>Based on MongoDB&#8217;s architecture, where do you see a potential bottleneck that can affect scaling a MongoDB cluster? What can you do to workaround the limitations?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 4 - Redis]]></title>
    <link href="http://smsohan.com/blog/2021/03/04/architecture-redis/"/>
    <updated>2021-03-04T09:39:00-07:00</updated>
    <id>http://smsohan.com/blog/2021/03/04/architecture-redis</id>
    <content type="html"><![CDATA[<p>Welcome back to the Software Architecture series. I know at least a few people from my team are following, and that&#8217;s a great encouragement.</p>

<p>For today&#8217;s post, let&#8217;s focus on learning from a very popular and commonly used open-source project called <a href="http://redis.io">Redis</a>. To the developers, Redis is a
dead simple key-value store with a super simple API as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">set </span>today <span class="s1">&#39;Thursday&#39;</span>
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>get today
</span><span class='line'>Thursday
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">set </span>temp 20
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>incr temp
</span><span class='line'>21
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>incrby temp 3
</span><span class='line'>24
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>get temp
</span><span class='line'>24
</span></code></pre></td></tr></table></div></figure>


<p>Of course Redis has more advanced features, but not too many. I think Redis is a delightful system. It&#8217;s fun to use and has a reputation for being incredibly fast and scalable. I&#8217;m going to recommend you to spend some time on <a href="https://docs.redislabs.com/latest/rs/concepts/">Redis architecture</a> and see if you understand the concepts to confidently answer the following questions:</p>

<ol>
<li>Why is Redis so fast?</li>
<li>What can you do to prevent data loss when using Redis?</li>
<li>How does Redis distribute its data to multiple nodes?</li>
<li>What happens when you add a new node to a Redis cluster?</li>
<li>What happens when you remove a node from a Redis cluster?</li>
<li>How does Redis allow you to have an even distribution of the data in your cluster?</li>
<li>How can you build resilience using Redis when a whole datacenter fails?</li>
<li>How does a Redis client discover which Redis server to go to?</li>
<li>How do you know if you have enough capacity in your Redis cluster?</li>
<li>How does Redis provide end-to-end encryption?</li>
<li>If a Redis cluster dies, how can you restore it?</li>
<li>What metrics would you use to monitor if your Redis cluster is healthy?</li>
</ol>


<p>My plan is to introduce you to a bunch of open-source systems like Redis and ask similar questions. The idea is, after going through a few of these systems, you&#8217;ll start to see patterns and trade-offs for each. Being familiar with real-world systems and seeing the patterns in use, I hope you&#8217;ll be able pick and choose the patterns that best fit your system requirements, environment, and people.</p>

<p>Happy learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can I Have a Career as a Frontend Engineer?]]></title>
    <link href="http://smsohan.com/blog/2021/02/19/frontend-engineering/"/>
    <updated>2021-02-19T08:27:00-07:00</updated>
    <id>http://smsohan.com/blog/2021/02/19/frontend-engineering</id>
    <content type="html"><![CDATA[<p>In my current role at Microsoft, I&#8217;m working on a UI SDK product. I
hear this concern from some of my team members. More specifically,
here&#8217;s a paraphrased version of what I hear:</p>

<blockquote><p>&#8220;I talked to my friends in software and they told me it&#8217;s better to work
on the backend or full-stack to have a fast-tracked career.&#8221;</p></blockquote>

<p>First, I do agree that there are generally more full-stack or backend
engineering jobs than purely frontend jobs. I also agree that there&#8217;s a
general perception that frontend is easy / bunch of scripts / not real
engineering, yada yada&#8230;</p>

<p>However, I think it&#8217;s a short-sighted view. Let me make my point here.</p>

<p><strong>Let&#8217;s imagine the UI and UX of a familiar product, Google Maps.</strong> You can
use Google Maps on your browser or natively on the phone. You can embed
Google Maps within your own app on these platforms as well. You can ask
Google Maps to give you navigation direction for walking, biking,
driving, or ask it to show realtime transit and traffic infomation. If you
take a detour, it&#8217;ll show you new directions on the fly. You can see the
map view, or the 3D view, or a camera view of a location. At night, you
can see the dark-mode. It&#8217;ll show you how many lanes you have on a road,
and how fast you can legally go, in realtime. It&#8217;ll let you share your location in
realtime with your buddy. You can search using your voice and it&#8217;ll also
give you turn by turn voice guidance. Let&#8217;s not mention avoiding
toll-free roads, u-turns, etc.</p>

<p><strong>I hope you see the engineering challenge I see in the above
paragraph.</strong>
Very few engineers I know can architect a system such as Google Maps.
Since a lot of the engineers choose the path of backend engineering,
it&#8217;s incredibly hard to find frontend engineers who can pull high impact
projects. If you consider yourself above
average, and you probably are if you&#8217;re reading this blog, you should
not follow the path of the average. Instead, if you like building visual
products and obsessing about delighting millions or billions of users,
you can have a very rewarding and fast-paced career in frontend
engineering.</p>

<p><strong>Most of your engineering knowledge is transferrable,</strong> irrespective of
what part of the stack you work on. After all, you&#8217;ll learn to work with
people, delight customers, build systems that are robust, scalable,
secure, compliant, testable&#8230; So, you can move into a different part of
the stack at will as long as your foundation is strong.</p>

<p>Modern frontend engineering is complex, but it&#8217;s powered by innovative
tools. Most of the tooling is open-source and the community is
vibrant with lots of conferences and meetups around the world. As a
frontend engineer, you can create an outsized impact and differentiate
yourself from the masses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 3: Writing]]></title>
    <link href="http://smsohan.com/blog/2021/01/17/software-architecture-part-3-writing/"/>
    <updated>2021-01-17T17:36:00-07:00</updated>
    <id>http://smsohan.com/blog/2021/01/17/software-architecture-part-3-writing</id>
    <content type="html"><![CDATA[<p>An architect first needs to write for herself, and then for her team. Let me explain a bit.</p>

<p>An architect takes the trio of requirements, people, and environment, and does her research to design the most delightful system. In her research process, she uses her past experience as well as the experience of others. Even a moderately complex system design involves a lot of trade-offs without clear winners. For example, given that there are tens of different databases one can choose, how can she recommend a specific one? Only a clear mind can produce a logically sound write-up. So, in the process of writing and rewriting her design rationale, an architect can strengthen the soundness of her own logic behind the choices made. This is also known as covering one&#8217;s ass.</p>

<p>Secondly, an architect is a busy person and can&#8217;t scale her time if she has to personally explain her design rationale to everyone. In fact, as she&#8217;s designing the system and making certain assumptions, she must seek feedback from the team to help her find alternatives or blind-spots. Writing scales infinitely (e.g. J.K. Rowling), and after all, an architect must use a scalable system for herself, right?</p>

<iframe type="text/html" widdatth="336" height="550" frameborder="0" allowfullscreen style="max-width:100%" src="https://read.amazon.ca/kp/card?asin=B07NPN5HTP&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_TRBbGbF1JZ1FB" ></iframe>




<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="max-width:100%" src="https://read.amazon.ca/kp/card?asin=B0090RVGW0&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_cGBbGb41JPT2Z" ></iframe>


<p>In this episode, I have two all time great books to recommend, <a href="https://www.amazon.com/Elements-Style-William-Strunk-Jr/dp/194564401X">The Elements of Style</a> and <a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548/ref=sr_1_1?crid=2CX22WLYQMRQ4&amp;dchild=1&amp;keywords=on+writing+well&amp;qid=1610987519&amp;s=books&amp;sprefix=on+writing+%2Cstripbooks-intl-ship%2C194&amp;sr=1-1">On Writing Well</a>. If you want to learn to write with a fascinating biographic story, I loved <a href="https://www.amazon.com/Writing-Memoir-Craft-Stephen-King/dp/1982159375/ref=pd_sbs_4?pd_rd_w=c3cVk&amp;pf_rd_p=3ec6a47e-bf65-49f8-80f7-0d7c7c7ce2ca&amp;pf_rd_r=4C1CJMPXT72EZ2Z0ZXAB&amp;pd_rd_r=8c477446-3402-4789-8332-0b508abb7812&amp;pd_rd_wg=TmVYV&amp;pd_rd_i=1982159375&amp;psc=1">On Writing (A Memoir of the Craft)</a> by Stephen King. Do yourself a favor and get these books. Even if you are a native English speaker, I recommend you reading these books to make your writing interesting. As you can imagine, these books on writing are fun read, it&#8217;d be quite an irony otherwise.</p>

<p>As promised before, this is my last soft-skills related post in the software architecture series. Only a few senior engineers will break the glass ceiling and become an architect. Fewer will become a great architect. All the great ones I&#8217;ve met had exemplary soft-skills.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Drives Me?]]></title>
    <link href="http://smsohan.com/blog/2021/01/16/what-drives-me/"/>
    <updated>2021-01-16T11:05:00-07:00</updated>
    <id>http://smsohan.com/blog/2021/01/16/what-drives-me</id>
    <content type="html"><![CDATA[<p>First, working with good people for a good purpose. Then, moving fast and delivering incrementally. Then, a good business case. And finally, a reasonably modern tech-stack.</p>

<p>Other things, such as pay, promotion and prestige are important, but it doesn’t drive me like the above.</p>

<p>This content is suitable for a Twitter post, but putting it here for long term retention. I want to look back after a few years to see how timeless this drivers are for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 2: People]]></title>
    <link href="http://smsohan.com/blog/2020/12/30/software-architecture-part-2-people/"/>
    <updated>2020-12-30T21:03:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/30/software-architecture-part-2-people</id>
    <content type="html"><![CDATA[<p>To be an architect, you&#8217;ll have to be a leader. And, to be a leader, you&#8217;ll have to be able to understand people and create an influence on them. So, focusing on the people involved with a system is a pre-requisite for designing systems that delight them.</p>

<p><img src="http://smsohan.com/images/DaleCarnegieBook.png" alt="How To Win Friends And Influence People" /></p>

<p><small>Photo credits to <a href="https://flic.kr/p/N7J52S">Alan O&#8217;Rourke</a></small></p>

<p>For this topic, I want you to read and internalize the ideas from the book <a href="https://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034/ref=sr_1_1?dchild=1&amp;keywords=Dale+Carnegie&amp;qid=1609523629&amp;s=books&amp;sr=1-1">How to Win Friends and Influence People</a> by Dale Carnegie. Honestly, it&#8217;s a fun read for anyone, not just for the aspiring architect. But an architect must be able to listen with empathy and clearly share her ideas. She needs to truly appreciate diverse opinion because it&#8217;s common that a delightful system can be designed in many ways, and she&#8217;s likely to have her blind spots. Moreover, she needs exceptional conflict-resolution skills to create a safe space so the best ideas win irrespective of where it comes from.</p>

<p>I know some of you may be getting impatient because you want to learn hardcore software architecture and I&#8217;m not talking anything technical yet. If you can hold your patience and bear with me, we&#8217;ll get there soon enough. I have what I think an exciting curriculum where I&#8217;ll be teaching hardcore software design topics using many well-known open-source products. My goal is to set you up for success as an architect, and these softcore topics are of the highest priority in my curriculum. The small number of great architects I&#8217;ve enjoyed working with have won me over by their people skills. All the other architects may have been technically genius, but lacked people skills to appreciate the essence of a delightful system, let alone designing one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 1: Delightfulness]]></title>
    <link href="http://smsohan.com/blog/2020/12/26/software-artchitecture-part-1/"/>
    <updated>2020-12-26T15:07:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/26/software-artchitecture-part-1</id>
    <content type="html"><![CDATA[<p><em>&#8220;I want to be an architect&#8221;</em> - is a common career goal I hear during one:one meetings and annual reviews with my team members. Honestly, I&#8217;m writing this series of blog posts to bring some clarity and structure into my own thoughts, and hopefully to scale my time. You can even say, I&#8217;m open-sourcing my mentorship on the topic of software archtecture. My sincere hope is, this series helps my team or anyone who wants to systematically learn and improve their software design skills.</p>

<p>My mental model of a software architect as a system is as follows:</p>

<pre>
                 _________
                |         |
Requirements -> |         |
                |         |
 Environment -> |Architect| -> "Delightful" System Design
                |         |
      People -> |         |
                |_________|
</pre>


<p>That is, they produce the most delightful system design as the output from three inputs: business requirements, the environment that surrounds the system, and the people that are involved with the system. The main phrase to remember is <strong>&#8220;the most delightful&#8221;</strong> - because this is what makes the architect&#8217;s job so much fun and appealing.</p>

<p>First, I recommend reading the book <a href="https://www.amazon.com/Design-Everyday-Things-Revised-Expanded/dp/0465050654">The Design of Everyday Things</a> to learn how design impacts us everyday. It&#8217;s a fun and must read for anyone involved in any kind of design.</p>

<p>Next, I recommend reading the book <a href="https://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515/ref=sr_1_1?crid=EH17W0BAL06D&amp;dchild=1&amp;keywords=don%27t+make+me+think&amp;qid=1609281299&amp;s=books&amp;sprefix=don%27t+make+%2Cstripbooks-intl-ship%2C200&amp;sr=1-1">Don&#8217;t Make Me Think</a> to learn about how to know if your design is delightful.</p>

<p>I prefer the word delightfulness over usability or customer obsession because the former sets a high bar. I hope you also internalize the goal of designing the most delightful systems and settle for nothing less, why should you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["you're unfrogettable"]]></title>
    <link href="http://smsohan.com/blog/2020/12/24/you-are-unfrogettable/"/>
    <updated>2020-12-24T18:39:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/24/you-are-unfrogettable</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/CiscoCard.jpg" alt="card" /></p>

<p><small>This card is a parting gift from my beloved team. (Catherine, I know you made it)</small></p>

<p>This post is dedicated to my team at Cisco. I put a lot of my passion and care into building and being part of a great team during my time at Cisco, eight amazing years between 2012 to 2020. It was the privilege of a lifetime to be able to learn from and mentor an amazing group of people while building a product together.</p>

<p>Our memories work in a fascinating way. At Cisco, I put most of my working hours on actual work such as understanding and sharing project scope, designing and building solutions, responding to customer support requests, interviewing, presenting, etc. But just after four months, now that I think about my time at Cisco, none of the actual work takes the centre stage in my memory. Instead, the memory is filled with incredible life stories I heard during the short walks I took at the park for one:one meetings, or relaxed and often-long Friday lunches, or giving someone a safe space when they felt vulnerable. It&#8217;s a reminder that when it&#8217;s all done and dusted - what remains is the people and relationships we build with them. I&#8217;m so glad to get this card in the mail after I left and I&#8217;ll forever remember this kind gesture.</p>

<p>What better can a man wish for than being &#8220;unfrogettable&#8221;?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tribute to Time Travel APIs in Ruby on Rails]]></title>
    <link href="http://smsohan.com/blog/2020/12/07/tribute-to-rails-date-time-great-invisible-design/"/>
    <updated>2020-12-07T10:28:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/07/tribute-to-rails-date-time-great-invisible-design</id>
    <content type="html"><![CDATA[<blockquote><p>Good design is obvious. Great design is transparent. — Joe Sparano</p></blockquote>

<p>Ruby on Rails delighted me all through my career. The community is one with a taste for art, thanks to DHH&#8217;s ability to write well. He set a  high bar and the community also lives up to it. One API that absolutely blows my mind is how delightful it is to work with date and time in Ruby on Rails. Here are a few example use cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Schedule a report to run at the beginning of next week</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">run_at</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="o">.</span><span class="n">from_now</span><span class="o">.</span><span class="n">beginning_of_week</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or first Friday of next month</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">run_at</span> <span class="o">=</span> <span class="n">report</span><span class="o">.</span><span class="n">run_at</span><span class="o">.</span><span class="n">next_occurring</span><span class="p">(</span><span class="ss">:friday</span><span class="p">)</span> <span class="k">unless</span> <span class="n">report</span><span class="o">.</span><span class="n">run_at</span><span class="o">.</span><span class="n">friday?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or beginning of next month</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">run_at</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">month</span><span class="o">.</span><span class="n">from_now</span><span class="o">.</span><span class="n">beginning_of_month</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or mid-day tomorrow</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">run_at</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">from_now</span><span class="o">.</span><span class="n">at_midday</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Is today a weekday?</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">on_weekday?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or a weekend?</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">on_weekend?</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Book a calendar event for a whole day</span>
</span><span class='line'><span class="n">time_off</span><span class="o">.</span><span class="n">duration</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">all_day</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or find sales in the current quarter</span>
</span><span class='line'><span class="no">Sale</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">all_quarter</span><span class="p">)</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of time related code I&#8217;ve seen in real projects is finding a point in time relative to <code>now</code>. Ruby on Rails makes it an absolute joy traveling time by adding time related methods straight into the <a href="https://api.rubyonrails.org">Integer</a> class, where the code looks just like how we think about time. Sure, Rails uses complex classes such as <code>TimeWithZone</code>, <code>Duration</code>, etc. under the hood, but I&#8217;ve almost never seen those used directly. This is such a stark contrast with many other platforms where you have to use pedantic concepts such as <code>TimeSpan</code>, <code>Calendar</code>, <code>GregorianCalendar</code>, etc. The true elegance of time travel API in Ruby on Rails lies in how invisible it is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Great Developer Demos]]></title>
    <link href="http://smsohan.com/blog/2020/11/28/tips-for-developer-demos/"/>
    <updated>2020-11-28T20:33:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/11/28/tips-for-developer-demos</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/demo.jpg" alt="Show and Tell" /></p>

<p><small>Image source: <a href="https://flic.kr/p/5kUqG8">Show and tell - explaining the rain game</a></small></p>

<p>I started my developer career 15 years ago at the onset of agile and Scrum. From my early career, I worked on short sprints where we demoed our work to collect feedback towards the end of each sprint. So, after thousands of demos, I’ve seen enough great ones that I developed a taste for it. I can no longer go back to soulless demos. This post is about a few observations I have about great demos.</p>

<p><strong>Presenters of great demos always tell a story.</strong> The presenter herself had a lot of fun and she has to share her excitement with everyone. It’s contagious, we can’t help but listen. She shows what her team had done and why it matters. She fondly shares what was fun and what was a pain the butt. Her passion drives us to pay attention and take part actively.</p>

<p><strong>Great demos have a memorable punchline.</strong> The presenter lays out the demo in a way that neatly converges to her punchline we can’t forget.</p>

<p><strong>Great demos allow everyone to immerse into the demo.</strong> The presenter takes a pause so the audience can focus on the work of art, and shares her narrative when the audience can truly focus on listening.</p>

<p><strong>Great demos are inclusive.</strong> The presenter remains humble, acknowledges her team’s effort, and curiously seeks feedback from everyone.</p>

<p><strong>Great demos feel short.</strong></p>

<p>Now, treat yourself with this captivating <a href="https://www.youtube.com/watch?v=2sIzfGzf_50">storytelling of Nick Means</a> even if you don’t have 40 minutes of free time. You’ll thank me. I know sprint demos are only 5-10 mins, but you can still put your soul into it. We’ll surely care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where to Learn: 10 Ways I Do]]></title>
    <link href="http://smsohan.com/blog/2020/11/18/where-to-learn/"/>
    <updated>2020-11-18T10:51:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/11/18/where-to-learn</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/learning.png" alt="learning" /></p>

<p>When talking to people, I&#8217;m always interested to know how they learn. This image above shows a view of how I personally learn. Here&#8217;s some context about the items on the diagram:</p>

<ol>
<li>Online-courses: I love O&#8217;Reilly learning. Their video courses are split into 5 minute lectures. For example, I took their Kotlin course to learn the language.</li>
<li>Books: Books are great for curated content, but it takes dedicated time. Most of the time, I have one book that I read. Current interest is on leadership and business.</li>
<li>Hands-on: A lot of people learn by doing. I do the same, but mostly at a hello world level instead of going too deep into new things.</li>
<li>Podcasts: This is my most passive form of learning, mostly when I&#8217;m walking or driving.</li>
<li>People: I keep in touch with people and ask them about what they are learning.</li>
<li>Twitter: I admit, I spend too much time on Twitter. But occasionally, people share interesting things.</li>
<li>YouTube videos: I watch conference talks such as InfoQ, DotNet, Rails, Ruby, Goto, and AWS.</li>
<li>News: I follow Hacker News mostly for tech and business news. And then there&#8217;s following stock market news about new business innovations.</li>
<li>Interviews: I watch inteview shows on YouTube as I&#8217;m a big fan of biographical content.</li>
<li>Open-source: I follow a bunch of open-source projects or just read code from time to time to learn about how the passionate and expert developers craft code.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Get and Give Feedback]]></title>
    <link href="http://smsohan.com/blog/2020/11/12/learn-to-get-and-give-feedback/"/>
    <updated>2020-11-12T11:45:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/11/12/learn-to-get-and-give-feedback</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/feedback.jpg" alt="Feedback" /></p>

<p><small>Photo credits to <a href="https://flic.kr/p/2edx7Za">GotCredit</a></small></p>

<p>Here’s a personal story about getting a feedback. For context, English is my second language. I grew up speaking Bangla as my primary language. I learned reading and writing English in school - grammar first. I had only started speaking English much later in my life, in my mid-twenties. So, I often struggle with the informal form of the language. With this context, here’s an excerpt of a one:one chat conversation at work (from memory):</p>

<p><strong>Catherine</strong>: Sohan, I have a question when you have time.<br/>
<strong>Me</strong>: Shoot me.<br/>
<strong>Catherine</strong>: Haha. It’s not “shoot me”. I think you mean just “shoot”. When you say “shoot me” it means…</p>

<p>In this case, Catherine genuinely cared and had the courage to share this feedback about my improper use of English. I love getting such direct and timely feedback.</p>

<p>Here, I’m sharing links to some content that I found to be high quality resources to learn about  feedback. Hope you’ll enjoy.</p>

<ol>
<li>Radical Candor Talk - <a href="https://www.youtube.com/watch?v=4yODalLQ2lM">The Surprising Secret to Being a Good Boss</a></li>
<li>Podcast: <a href="https://podcasts.apple.com/ca/podcast/ep-7-how-to-get-feedback-from-your-boss/id1188489488?i=1000381196889">How to Get Feedback From Your Boss</a></li>
<li>Podcast: <a href="https://podcasts.apple.com/ca/podcast/ep-16-take-feedback-like-a-boss/id1188489488?i=1000384606048">Take Feedback Like A Boss</a></li>
<li>Podcast: <a href="https://podcasts.apple.com/ca/podcast/ep-8-how-to-give-feedback-to-your-boss/id1188489488?i=1000381487680">How to Give Feedback To Your Boss</a></li>
<li>Book chapter: <a href="https://www.norulesrules.com">Max up Candor: A Circle of Feedback</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My YouTube Playlist for Leadership]]></title>
    <link href="http://smsohan.com/blog/2020/11/04/youtube/"/>
    <updated>2020-11-04T10:29:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/11/04/youtube</id>
    <content type="html"><![CDATA[<p>This summer I was interviewing for a new job. This was the first time I was interviewing for an engineering manager role. Soon I realized  these interviews were wildly different from interviews for developer roles. During typical developer interviews, I solved coding and system design problems and discussed personal aspirations in behavioral interviews. In contrast, leadership interview qeustions were really open-ended. Honestly, I found it very hard to answer these questions concisely. Often I could form a crisp answer to these questions only after the interview had finished :-( Here are some example questions:</p>

<ol>
<li>What is your management philosophy?</li>
<li>Tell me when you had to deal with uncertainty.</li>
<li>Tell me about when you had to motivate a team even though you personally disagreed with the project.</li>
<li>Tell me when you innovated as a manager.</li>
</ol>


<p>I did poorly in my first few interviews because how unprepared I was to answer these questions. I got truly frustrated. So, I started looking at YouTube to see how today&#8217;s inspiring leaders answer these questions. Here&#8217;s a list of YouTube channels that I found to be very resourceful.</p>

<ol>
<li><a href="https://www.youtube.com/c/DavidRubenstein/videos?view=0&amp;sort=p&amp;shelf_id=8">David Rubnstein Show</a>: 25 minute very high quality interviews with present and former leaders in business and technology.</li>
<li><a href="https://www.youtube.com/playlist?list=PLxq_lXOUlvQAwaY_9K4ZFH9Xdar9WzCaL">View From the Top - Stanford</a>: Hour long interview sessions with renowned leaders.</li>
<li><a href="https://www.youtube.com/playlist?list=PLnsTB8Q5VgnVzh1S-VMCXiuwJglk5AV--">Technology Enabled Blitzscaling</a>: Hour long interview sessions focusing on technology and startup leadership.</li>
</ol>


<p>Watching these videos I developed some strategies for concisely answering leadership related questions with authenticity. I&#8217;d so love to do a formal research and write up on this topic some time. But for now, here&#8217;s the raw data for your enjoyment.</p>

<p>Go ahead and watch!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference Between Managing One Team Vs. Many]]></title>
    <link href="http://smsohan.com/blog/2020/10/12/managing-one-vs-many-teams/"/>
    <updated>2020-10-12T10:11:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/10/12/managing-one-vs-many-teams</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/orchestra.jpg" alt="Orchestra" /></p>

<p><small>Photo credits: Bradley Griffin</small></p>

<blockquote><p>The conductor of an orchestra doesn’t make a sound. He depends for his power on his ability to make others powerful. My job was to awaken possibility in other people. And you know how you find out? You look at their eyes. If their eyes are shining you know you’re doing it. - Benjamin Zander</p></blockquote>

<p>Recently, I’ve talked to a few companies as I was going through a job search process after a long time. One of my interviewers asked me this question: “What’s the difference between managing one team vs. multiple teams?”</p>

<p>I’ve been leading multiple teams for a few years. But, I realized I didn’t have a crisp answer to this question. Now with the benefit of time to think about it, here’s how I see the difference.</p>

<p>My mental model to answer this question is best described around the concept of a team’s mission - the reason for a team to exist in the first place.</p>

<p><strong>A line manager builds and inspires her team to deliver the team’s mission</strong>. A great manager understands and fully commits to the team’s mission herself. She inspires individuals on the team’s mission so that the team creates more impact than the sum of individuals. She also works with her peer line managers on a larger mission.</p>

<p><strong>A manager of multiple teams designs empowered teams to deliver a larger mission</strong>. She hires and leads line managers such that each team takes ownership of a part of the larger mission. Additionally, she creates a team of line managers to foster cross-team innovation.</p>

<p>There are other ways the two jobs differ, such as, one:one with only direct reports vs. skip levels, being strategic vs. tactical, growing leaders vs. individuals, etc. But the main difference is running a team vs. designing teams on more specific missions.</p>

<p>If you organically grew into a manager of multiple teams, you may want to think about how your job is different than before. Even if you aren’t looking for a new job, this exercise will get you clarity about your current job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communication Hacks I Learned From Job Interview Feedback]]></title>
    <link href="http://smsohan.com/blog/2020/10/11/communication-hacks-from-interview-feedback/"/>
    <updated>2020-10-11T17:07:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/10/11/communication-hacks-from-interview-feedback</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/gift.jpg" alt="Gift" /></p>

<p><small>Photo credits to <a href="https://www.flickr.com/photos/threar/">UnknownNet Photography</a></small></p>

<p>I’ve been in search of a new job for the past few months. Thanks to my recruiters and interviewers, I’ve received some useful feedback. Many thanks to them for this gift.</p>

<p>&#8220;<strong>Needs more energy</strong>&#8221; - This was the most memorable feedback I got. It was from the VP of a company. My interview with him was the last of the five on the same day. My day went well until then. But I was also drained from 4 hours of back to back video interviews on the same day before meeting him. Honestly, when I received this feedback, I felt heartbroken and defensive. It took me some time to digest it and take actions based on this feedback. But eventually I developed some communication hacks to remain energetic. I’m now mindful about staying energetic, often taking body breaks and keeping a water bottle or coffee on my desk. I am taking handwritten notes while listening on video calls. Also, when I’m on video for hours, I proactively tell people about being camera fatigued.</p>

<p>Another feedback I received was, &#8220;<strong>some answers could be more direct and crisp</strong>&#8221;. With remote communication, sometimes I find it hard to read audience reaction. Based on this feedback, I’ve adopted a communication hack where I do a short and direct answer first and then ask if I should elaborate further.</p>

<p>I was somewhat surprised with one feedback from a system design interview. The feedback was &#8220;<strong>needs to discuss design trade-offs</strong>&#8221;. After some time had passed, I realized what happened there. While I mentioned some design trade-offs, I didn’t put a lot of emphasis on discussing design trade-offs. Moreover, apart from designing the system, I did’t ask about any secondary design topics that were of interest to the interviewer. I’m now more mindful about eliciting these secondary goals.</p>

<p>When I interviewed for an individual contributor (IC) role at a company I deeply admire, the feedback I got was &#8220;<strong>needs to clearly know if he wants to be an IC or a manager</strong>&#8221;. This was bang on. I was attracted to the company a lot but they only had IC roles open at that time. I consider myself a capable enough engineer and technical contributor still. But during that interview, I fumbled to honestly answer how my career aspirations at this time would be fulfilled by going from management into an IC role. Thinking about this feedback gave me the clarity that I indeed want to remain a people leader at this stage in my career.</p>

<p>A few interviewers asked me to talk about my management philosophy. Even the very best leaders differ in their philosophy. So, after I answered this question, I asked one of my interviewers immediately if he had any feedback about my philosophy. He shared this: “Thanks for your answer. Creating accountability is a big part of my leadership philosophy&#8230;”.  <strong>This is one feedback where I decided not to take any action</strong>. I like what he said and I value accountability. But my leadership philosophy is what I truly and strongly believe in, and at present, I find accountability to be a by-product instead of a key philosophy.</p>

<p>There were many positive feedback shared as well. I find that positive feedback has the same effect as that of a good massage; it feels nice to receive one from time to time, but the feeling tappers down soon after. On the other hand an actionable feedback where I can improve is a gift that keeps giving. Whenever an interviewer gave me the opportunity to ask questions, I always asked if they had any feedback for me. Most didn’t share any actionable feedback citing company policy as a reason. But the ones that did, I’ll be forever grateful to them.</p>

<p>When I interview candidates as an interviewer, I ask them to share feedback about the interview. I have deep respect for candidates who are brave enough to suggest specific changes. If they get hired, they become value multiplier employees. However, as an interviewee, <strong>I didn’t have a single interviewer who asked me to provide feedback :-(</strong> I’m sure company policies don’t limit it.</p>

<p>So, when you get a chance, share some feedback. It’s a gift. Give generously. Also, seek feedback and appreciate when you get it. If you have feedback about this post or any, I’m @smsohan on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context]]></title>
    <link href="http://smsohan.com/blog/2020/09/15/context/"/>
    <updated>2020-09-15T13:08:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/09/15/context</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/misfit.jpg" alt="Misfit" /></p>

<p>Image credits to <a href="https://flic.kr/p/5kNo6M">NCinDC</a></p>

<p>Context is everything. Due to a context mismatch projects such as exporting democracy, agile transformations, building startups, losing weight, mindfulness or anything you can think of fail to repeat.</p>

<p>Context is formed by <strong>why / what / who / when / where / how</strong>, each of these being a critcial part. Most often it&#8217;s common to focus on the how alone - forgetting the rest of the context while adopting a recipe for success in business. Some get overly <a href="https://en.wikipedia.org/wiki/Simon_Sinek">influenced by speakers</a> and focus on only a subset of the context. Reality is, it&#8217;s almost impossible to find an excact duplicate of any one context. So, while copying solutions from one context, we must adapt to account for the uniqueness of our own context.</p>

<p>A lot of innovation lies in the context gap - where one can find clever ways to adapt solutions from one context into another. I&#8217;ll give you one such example, did you know Uber runs a motorcycle based rideshare in <a href="https://www.uber.com/en-BD/blog/dhaka/dhaka-moto/">many countries</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change]]></title>
    <link href="http://smsohan.com/blog/2020/08/31/change/"/>
    <updated>2020-08-31T14:02:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/08/31/change</id>
    <content type="html"><![CDATA[<h2>Manager&#8217;s Mind</h2>

<p>As managers, we have the benefit of view because we have our eyes on  longer term goals. To achieve those goals, we often have to introduce a change. For example, we may want to change how a team is formed or what product a team works on based on new business needs or opportunities. So, we put a lot of thought into it and propose our plan to the team hoping the following reaction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">team</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">excitement</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before proposing such a change, we&#8217;ve analyzed various options, including the option of keeping everything as-is. We&#8217;re fully convinced that indeed the change we&#8217;re going to propose is the best option. We are excited with this new way that&#8217;ll make our teams more productive. As caring managers, we are thrilled because we believe this will make the team happier.</p>

<h2>Team&#8217;s Mind</h2>

<p>However, most of the team&#8217;s reaction is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">team</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">panic</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Honestly, the team has a great chemistry going on, they have fun and work well together, they are already so productive shipping products using technology they use today. So, at best a change seems random, but more commonly perceived as a mindless act of &#8220;management BS&#8221;.</p>

<h2>The Deadlock</h2>

<p>At this stage, both the manager and the team are in a deadlock, each party   fairly confident in their judgement, failing to appreciate the concerns of the other. At this point, it&#8217;s the manager&#8217;s job to not only break the deadlock but also to make sure s/he carefully listens to the team and motivates them. Ideally, we can data-drive these conversations while being mindful of individual emotions.</p>

<h2>The Checklist</h2>

<p>Here&#8217;s a checklist I&#8217;m following myself as a manager as I&#8217;m trying to orient my teams from technology driven teams to more full-stack product mission oriented teams:</p>

<ol>
<li>Motivate the team with a why. <em>e.g. Go from tech-oriented teams to product mission teams so that all of you can deliver products to customers&#8230;</em></li>
<li>Listen to the team. Multiple one on one sessions if needed. <em>e.g. Let&#8217;s discuss about your concerns regarding tech debt with this change&#8230;</em></li>
<li>Discuss changes to your plan based on the team&#8217;s feedback. <em>e.g. You&#8217;ll have full ownership of the technology to serve your mission&#8230;</em></li>
<li>Layout your evidence. <em>e.g. We built an improved search feature that we couldn&#8217;t ship to customers for months because the UI team was busy&#8230;</em></li>
<li>Discuss pros and cons of alternatives you thought about. <em>e.g. Another option is to keep as-is, but that&#8217;d mean we must improve cross-team project management to reduce hand-off related delays&#8230;</em></li>
<li>Present your metrics to achieve. <em>e.g. Time from dev to customer, performance metrics,&#8230;</em></li>
<li>Present an iterative and incremental plan with the option to change course based on metrics. <em>e.g. Let&#8217;s do this with one team for one month&#8230;</em></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When I Applied KonMari to My Calendar]]></title>
    <link href="http://smsohan.com/blog/2020/07/17/when-i-applied-kon-mari-to-my-calendar/"/>
    <updated>2020-07-17T15:26:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/07/17/when-i-applied-kon-mari-to-my-calendar</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/marie_kondo.jpg" alt="Marie Kondo" /></p>

<blockquote><p>“I&#8217;d like to tidy up the entire planet. I would go anywhere if there were something that needs tidying.” - Marie Kondo</p></blockquote>

<p>Well, she came to my work calendar in spirit. Let’s start with some backstory.</p>

<p>When I was developer, my typical day looked like this: one standup meeting and then pretty much the rest of the day in coding. Sometimes I paired up or jumped on a whiteboard session with my coworkers to hash things out. Apart from this, we had bi-weekly meetings for demo, retrospective and planning. All in all, less than 3 hours of meeting on a 40 hour work week.</p>

<p>I’ll admit, the 3 hours of meeting each week felt like a “waste of time”.</p>

<p>In my current role, I’m leading a total of 8 small teams organized as follows:
1. Web (6) - Production engineering, UI/UX, identity and access management, and 3 feature teams
2. Data (2) - Stream and search teams</p>

<p>I’m very blessed to have capable leaders for these teams. To ensure I support my leaders and provide the teams with necessarily context, my typical days in my current role are very different from my developer days. Honestly, when we grew too fast, I was feeling lost in so many meetings. It felt like my job turned into just going to meetings and even if I had an open slot, I was often too mentally overwhelmed to make a good use of it.</p>

<p>Thanks to the mindfulness training that Cisco offered to our whole group. It inspired me to rethink my work hours. After a few trial attempts, I have now finally settled into a routine.</p>

<p>First, I have reduced my meeting obligations. I only attend meetings where I need to take part in decision making. I follow the Amazon way of producing a written document if I host the meeting. This applies to my one:one meetings as well.</p>

<p>Second, I have shuffled my week such that I can have each day of the week organized around a theme. It’s not perfect, but for each day of the week, I clearly know the main theme of the day. It transformed my mental state from “feeling lost” into “looking forward” to the day. It also reduced the wild levels of context “swing”.</p>

<p>Today, here’s how my weeks look like:</p>

<ol>
<li><strong>Monday is planning day</strong> - web team.</li>
<li><strong>Tuesday is product day</strong> - to work on engineering problems related to our product roadmap.</li>
<li><strong>Wednesday is people day</strong> - one:one.</li>
<li><strong>Thursday is maker day</strong> - hands-on R&amp;D.</li>
<li><strong>Friday is planning day</strong> - data team.</li>
</ol>


<p>Because our teams plan for two-week cycles, I have a decent amount of free spots on Monday and Friday every other week. This allows me to help the team, mostly with pair programming or discussing potential solutions to imminent problems. Also, it frees up space for ad-hoc meetings and hiring activities.</p>

<p>The transition from a developer to a manager and then to a manager of managers can be jarring for the “makers” among us. I hope shaping your week in themes like the ones I shared here will help calm things down for you.</p>

<p>Happy leading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[People Management and Diagnosing Low Performance]]></title>
    <link href="http://smsohan.com/blog/2020/05/18/engineering-management-and-diagnosing-low-performance/"/>
    <updated>2020-05-18T18:54:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/05/18/engineering-management-and-diagnosing-low-performance</id>
    <content type="html"><![CDATA[<p>Beginning with a story here. Back in 2008, I was a couple of years out of college and working for a software company in Dhaka, Bangladesh. Like many of my classmates from my college, I was studying GRE alongside my job for a PhD admission in a reputable US university. That process being long and uncertain, I also applied for an MBA program at the University of Dhaka as a backup plan. The GRE preparation came in very handy and I qualified for the evening MBA program. I started MBA classes in January 2009 before the universities in USA and Canada made their decision on my application. There, I took a course on Management. I was too naive and still too much an engineer to pay attention.</p>

<p>But this image that our teacher drew on the board got stuck in my head to this day.</p>

<p><img src="http://smsohan.com/images/perf.jpg" alt="Performance" /></p>

<p>Fast forward ten years and I still like how cleanly it captures the essence of high performance of an employee as a combination of the employee&#8217;s ability and motivation in a suitable environment.</p>

<p>Given this is how high-performers are, it&#8217;s possible to plot a similar graph for low performers as a diagnostic report. If such a diagnosis is right, it can provide a valuable strategy for managers and employees to work towards improving employee performance. For example, if an employee lacks skill and motivation but fits very well within the work environment, a manager can focus on skills training and suggesting therapies to increase motivation. Similarly, if an employee is unable to acquire the skills for a particular job, focusing on motivation or changing the environment for that employee may not fix the low performance issue.</p>

<p>Based on the past 14 years of my time in the industry, I&#8217;ve shared some symptoms of low performance that I&#8217;ve seen. You can use this as an exercise sheet to plot your diagnosis of the low performer&#8217;s chart.</p>

<ol>
<li><p><strong>New hire too slow to ramp up:</strong> You were impressed by a candidate during the interview. The same interview process was used to find many high performers in the past. But this employee is struggling to ramp up.</p></li>
<li><p><strong>Knowledge vs. application:</strong> You have an employee who&#8217;s always studying job related skills and shows a great deal of interest in training, but can&#8217;t translate the knowledge into application.</p></li>
<li><p><strong>Complains about the lack of time</strong>: You have an employee struggling to produce the best outcome. In your one:one meeting, the employee always complains about lack of time even after you give him/her the time.</p></li>
<li><p><strong>Frequently runs into conflicts:</strong> Your dream employee is causing too many conflicts within the team.</p></li>
<li><p><strong>Can&#8217;t write thoughts down:</strong> You have an employee who&#8217;s unhappy about things. When you want them to write it down, they are unable to produce a crisp writeup about the problems and potential solutions.</p></li>
<li><p><strong>Doesn&#8217;t make hard decisions timely:</strong> You have a leader that stays away from making hard decisions. In their mind, they want someone else to make them take the hard decision.</p></li>
<li><p><strong>Isn&#8217;t aware of better ways to solve old problems:</strong> You have an employee who&#8217;s expert in certain ways of delivering work but lacks awareness of newer and more efficient ways.</p></li>
<li><p><strong>Doesn&#8217;t take initiative:</strong> You encourage and reward employees to take initiatives that help the business. Yet, you see an employee is not taking part.</p></li>
</ol>


<p>The good news is, once a diagnosis is accurate for such symptoms of low performance, you can move ahead and implement a concrete improvement strategy for your employee. The clarity of this simple method helped me in many situations.</p>

<p>I hope this helps you, too.</p>
]]></content>
  </entry>
  
</feed>
