<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sohan's Blog]]></title>
  <link href="http://smsohan.com/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2020-10-11T17:40:52-06:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Communication Hacks I Learned From Job Interview Feedback]]></title>
    <link href="http://smsohan.com/blog/2020/10/11/communication-hacks-from-interview-feedback/"/>
    <updated>2020-10-11T17:07:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/10/11/communication-hacks-from-interview-feedback</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/gift.jpg" alt="Gift" /></p>

<p><small>Photo credits to <a href="https://www.flickr.com/photos/threar/">UnknownNet Photography</a></small></p>

<p>I’ve been in search of a new job for the past few months. Thanks to my recruiters and interviewers, I’ve received some useful feedback. Many thanks to them for this gift.</p>

<p>&#8220;<strong>Needs more energy</strong>&#8221; - This was the most memorable feedback I got. It was from the VP of a company. My interview with him was the last of the five on the same day. My day went well until then. But I was also drained from 4 hours of back to back video interviews on the same day before meeting him. Honestly, when I received this feedback, I felt heartbroken and defensive. It took me some time to digest it and take actions based on this feedback. But eventually I developed some communication hacks to remain energetic. I’m now mindful about staying energetic, often taking body breaks and keeping a water bottle or coffee on my desk. I am taking handwritten notes while listening on video calls. Also, when I’m on video for hours, I proactively tell people about being camera fatigued.</p>

<p>Another feedback I received was, &#8220;<strong>some answers could be more direct and crisp</strong>&#8221;. With remote communication, sometimes I find it hard to read audience reaction. Based on this feedback, I’ve adopted a communication hack where I do a short and direct answer first and then ask if I should elaborate further.</p>

<p>I was somewhat surprised with one feedback from a system design interview. The feedback was &#8220;<strong>needs to discuss design trade-offs</strong>&#8221;. After some time had passed, I realized what happened there. While I mentioned some design trade-offs, I didn’t put a lot of emphasis on discussing design trade-offs. Moreover, apart from designing the system, I did’t ask about any secondary design topics that were of interest to the interviewer. I’m now more mindful about eliciting these secondary goals.</p>

<p>When I interviewed for an individual contributor (IC) role at a company I deeply admire, the feedback I got was &#8220;<strong>needs to clearly know if he wants to be an IC or a manager</strong>&#8221;. This was bang on. I was attracted to the company a lot but they only had IC roles open at that time. I consider myself a capable enough engineer and technical contributor still. But during that interview, I fumbled to honestly answer how my career aspirations at this time would be fulfilled by going from management into an IC role. Thinking about this feedback gave me the clarity that I indeed want to remain a people leader at this stage in my career.</p>

<p>A few interviewers asked me to talk about my management philosophy. Even the very best leaders differ in their philosophy. So, after I answered this question, I asked one of my interviewers immediately if he had any feedback about my philosophy. He shared this: “Thanks for your answer. Creating accountability is a big part of my leadership philosophy&#8230;”.  <strong>This is one feedback where I decided not to take any action</strong>. I like what he said and I value accountability. But my leadership philosophy is what I truly and strongly believe in, and at present, I find accountability to be a by-product instead of a key philosophy.</p>

<p>There were many positive feedback shared as well. I find that positive feedback has the same effect as that of a good massage; it feels nice to receive one from time to time, but the feeling tappers down soon after. On the other hand an actionable feedback where I can improve is a gift that keeps giving. Whenever an interviewer gave me the opportunity to ask questions, I always asked if they had any feedback for me. Most didn’t share any actionable feedback citing company policy as a reason. But the ones that did, I’ll be forever grateful to them.</p>

<p>When I interview candidates as an interviewer, I ask them to share feedback about the interview. I have deep respect for candidates who are brave enough to suggest specific changes. If they get hired, they become value multiplier employees. However, as an interviewee, <strong>I didn’t have a single interviewer who asked me to provide feedback :-(</strong> I’m sure company policies don’t limit it.</p>

<p>So, when you get a chance, share some feedback. It’s a gift. Give generously. Also, seek feedback and appreciate when you get it. If you have feedback about this post or any, I’m @smsohan on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context]]></title>
    <link href="http://smsohan.com/blog/2020/09/15/context/"/>
    <updated>2020-09-15T13:08:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/09/15/context</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/misfit.jpg" alt="Misfit" /></p>

<p>Image credits to <a href="https://flic.kr/p/5kNo6M">NCinDC</a></p>

<p>Context is everything. Due to a context mismatch projects such as exporting democracy, agile transformations, building startups, losing weight, mindfulness or anything you can think of fail to repeat.</p>

<p>Context is formed by <strong>why / what / who / when / where / how</strong>, each of these being a critcial part. Most often it&#8217;s common to focus on the how alone - forgetting the rest of the context while adopting a recipe for success in business. Some get overly <a href="https://en.wikipedia.org/wiki/Simon_Sinek">influenced by speakers</a> and focus on only a subset of the context. Reality is, it&#8217;s almost impossible to find an excact duplicate of any one context. So, while copying solutions from one context, we must adapt to account for the uniqueness of our own context.</p>

<p>A lot of innovation lies in the context gap - where one can find clever ways to adapt solutions from one context into another. I&#8217;ll give you one such example, did you know Uber runs a motorcycle based rideshare in <a href="https://www.uber.com/en-BD/blog/dhaka/dhaka-moto/">many countries</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change]]></title>
    <link href="http://smsohan.com/blog/2020/08/31/change/"/>
    <updated>2020-08-31T14:02:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/08/31/change</id>
    <content type="html"><![CDATA[<h2>Manager&#8217;s Mind</h2>

<p>As managers, we have the benefit of view because we have our eyes on  longer term goals. To achieve those goals, we often have to introduce a change. For example, we may want to change how a team is formed or what product a team works on based on new business needs or opportunities. So, we put a lot of thought into it and propose our plan to the team hoping the following reaction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">team</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">excitement</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before proposing such a change, we&#8217;ve analyzed various options, including the option of keeping everything as-is. We&#8217;re fully convinced that indeed the change we&#8217;re going to propose is the best option. We are excited with this new way that&#8217;ll make our teams more productive. As caring managers, we are thrilled because we believe this will make the team happier.</p>

<h2>Team&#8217;s Mind</h2>

<p>However, most of the team&#8217;s reaction is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">team</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">panic</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Honestly, the team has a great chemistry going on, they have fun and work well together, they are already so productive shipping products using technology they use today. So, at best a change seems random, but more commonly perceived as a mindless act of &#8220;management BS&#8221;.</p>

<h2>The Deadlock</h2>

<p>At this stage, both the manager and the team are in a deadlock, each party   fairly confident in their judgement, failing to appreciate the concerns of the other. At this point, it&#8217;s the manager&#8217;s job to not only break the deadlock but also to make sure s/he carefully listens to the team and motivates them. Ideally, we can data-drive these conversations while being mindful of individual emotions.</p>

<h2>The Checklist</h2>

<p>Here&#8217;s a checklist I&#8217;m following myself as a manager as I&#8217;m trying to orient my teams from technology driven teams to more full-stack product mission oriented teams:</p>

<ol>
<li>Motivate the team with a why. <em>e.g. Go from tech-oriented teams to product mission teams so that all of you can deliver products to customers&#8230;</em></li>
<li>Listen to the team. Multiple one on one sessions if needed. <em>e.g. Let&#8217;s discuss about your concerns regarding tech debt with this change&#8230;</em></li>
<li>Discuss changes to your plan based on the team&#8217;s feedback. <em>e.g. You&#8217;ll have full ownership of the technology to serve your mission&#8230;</em></li>
<li>Layout your evidence. <em>e.g. We built an improved search feature that we couldn&#8217;t ship to customers for months because the UI team was busy&#8230;</em></li>
<li>Discuss pros and cons of alternatives you thought about. <em>e.g. Another option is to keep as-is, but that&#8217;d mean we must improve cross-team project management to reduce hand-off related delays&#8230;</em></li>
<li>Present your metrics to achieve. <em>e.g. Time from dev to customer, performance metrics,&#8230;</em></li>
<li>Present an iterative and incremental plan with the option to change course based on metrics. <em>e.g. Let&#8217;s do this with one team for one month&#8230;</em></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When I Applied KonMari to My Calendar]]></title>
    <link href="http://smsohan.com/blog/2020/07/17/when-i-applied-kon-mari-to-my-calendar/"/>
    <updated>2020-07-17T15:26:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/07/17/when-i-applied-kon-mari-to-my-calendar</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/marie_kondo.jpg" alt="Marie Kondo" /></p>

<blockquote><p>“I&#8217;d like to tidy up the entire planet. I would go anywhere if there were something that needs tidying.” - Marie Kondo</p></blockquote>

<p>Well, she came to my work calendar in spirit. Let’s start with some backstory.</p>

<p>When I was developer, my typical day looked like this: one standup meeting and then pretty much the rest of the day in coding. Sometimes I paired up or jumped on a whiteboard session with my coworkers to hash things out. Apart from this, we had bi-weekly meetings for demo, retrospective and planning. All in all, less than 3 hours of meeting on a 40 hour work week.</p>

<p>I’ll admit, the 3 hours of meeting each week felt like a “waste of time”.</p>

<p>In my current role, I’m leading a total of 8 small teams organized as follows:
1. Web (6) - Production engineering, UI/UX, identity and access management, and 3 feature teams
2. Data (2) - Stream and search teams</p>

<p>I’m very blessed to have capable leaders for these teams. To ensure I support my leaders and provide the teams with necessarily context, my typical days in my current role are very different from my developer days. Honestly, when we grew too fast, I was feeling lost in so many meetings. It felt like my job turned into just going to meetings and even if I had an open slot, I was often too mentally overwhelmed to make a good use of it.</p>

<p>Thanks to the mindfulness training that Cisco offered to our whole group. It inspired me to rethink my work hours. After a few trial attempts, I have now finally settled into a routine.</p>

<p>First, I have reduced my meeting obligations. I only attend meetings where I need to take part in decision making. I follow the Amazon way of producing a written document if I host the meeting. This applies to my one:one meetings as well.</p>

<p>Second, I have shuffled my week such that I can have each day of the week organized around a theme. It’s not perfect, but for each day of the week, I clearly know the main theme of the day. It transformed my mental state from “feeling lost” into “looking forward” to the day. It also reduced the wild levels of context “swing”.</p>

<p>Today, here’s how my weeks look like:</p>

<ol>
<li><strong>Monday is planning day</strong> - web team.</li>
<li><strong>Tuesday is product day</strong> - to work on engineering problems related to our product roadmap.</li>
<li><strong>Wednesday is people day</strong> - one:one.</li>
<li><strong>Thursday is maker day</strong> - hands-on R&amp;D.</li>
<li><strong>Friday is planning day</strong> - data team.</li>
</ol>


<p>Because our teams plan for two-week cycles, I have a decent amount of free spots on Monday and Friday every other week. This allows me to help the team, mostly with pair programming or discussing potential solutions to imminent problems. Also, it frees up space for ad-hoc meetings and hiring activities.</p>

<p>The transition from a developer to a manager and then to a manager of managers can be jarring for the “makers” among us. I hope shaping your week in themes like the ones I shared here will help calm things down for you.</p>

<p>Happy leading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[People Management and Diagnosing Low Performance]]></title>
    <link href="http://smsohan.com/blog/2020/05/18/engineering-management-and-diagnosing-low-performance/"/>
    <updated>2020-05-18T18:54:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/05/18/engineering-management-and-diagnosing-low-performance</id>
    <content type="html"><![CDATA[<p>Beginning with a story here. Back in 2008, I was a couple of years out of college and working for a software company in Dhaka, Bangladesh. Like many of my classmates from my college, I was studying GRE alongside my job for a PhD admission in a reputable US university. That process being long and uncertain, I also applied for an MBA program at the University of Dhaka as a backup plan. The GRE preparation came in very handy and I qualified for the evening MBA program. I started MBA classes in January 2009 before the universities in USA and Canada made their decision on my application. There, I took a course on Management. I was too naive and still too much an engineer to pay attention.</p>

<p>But this image that our teacher drew on the board got stuck in my head to this day.</p>

<p><img src="http://smsohan.com/images/perf.jpg" alt="Performance" /></p>

<p>Fast forward ten years and I still like how cleanly it captures the essence of high performance of an employee as a combination of the employee&#8217;s ability and motivation in a suitable environment.</p>

<p>Given this is how high-performers are, it&#8217;s possible to plot a similar graph for low performers as a diagnostic report. If such a diagnosis is right, it can provide a valuable strategy for managers and employees to work towards improving employee performance. For example, if an employee lacks skill and motivation but fits very well within the work environment, a manager can focus on skills training and suggesting therapies to increase motivation. Similarly, if an employee is unable to acquire the skills for a particular job, focusing on motivation or changing the environment for that employee may not fix the low performance issue.</p>

<p>Based on the past 14 years of my time in the industry, I&#8217;ve shared some symptoms of low performance that I&#8217;ve seen. You can use this as an exercise sheet to plot your diagnosis of the low performer&#8217;s chart.</p>

<ol>
<li><p><strong>New hire too slow to ramp up:</strong> You were impressed by a candidate during the interview. The same interview process was used to find many high performers in the past. But this employee is struggling to ramp up.</p></li>
<li><p><strong>Knowledge vs. application:</strong> You have an employee who&#8217;s always studying job related skills and shows a great deal of interest in training, but can&#8217;t translate the knowledge into application.</p></li>
<li><p><strong>Complains about the lack of time</strong>: You have an employee struggling to produce the best outcome. In your one:one meeting, the employee always complains about lack of time even after you give him/her the time.</p></li>
<li><p><strong>Frequently runs into conflicts:</strong> Your dream employee is causing too many conflicts within the team.</p></li>
<li><p><strong>Can&#8217;t write thoughts down:</strong> You have an employee who&#8217;s unhappy about things. When you want them to write it down, they are unable to produce a crisp writeup about the problems and potential solutions.</p></li>
<li><p><strong>Doesn&#8217;t make hard decisions timely:</strong> You have a leader that stays away from making hard decisions. In their mind, they want someone else to make them take the hard decision.</p></li>
<li><p><strong>Isn&#8217;t aware of better ways to solve old problems:</strong> You have an employee who&#8217;s expert in certain ways of delivering work but lacks awareness of newer and more efficient ways.</p></li>
<li><p><strong>Doesn&#8217;t take initiative:</strong> You encourage and reward employees to take initiatives that help the business. Yet, you see an employee is not taking part.</p></li>
</ol>


<p>The good news is, once a diagnosis is accurate for such symptoms of low performance, you can move ahead and implement a concrete improvement strategy for your employee. The clarity of this simple method helped me in many situations.</p>

<p>I hope this helps you, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Just Love to Read Code]]></title>
    <link href="http://smsohan.com/blog/2020/02/28/i-just-love-to-read-code/"/>
    <updated>2020-02-28T16:05:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/02/28/i-just-love-to-read-code</id>
    <content type="html"><![CDATA[<p>This week I took a couple of days to focus on my mid-thirties. It got me thinking about what I actually love doing as a hobby. The list is fairly small, walks with the family, soccer, tennis, coffee with friends, reading, writing, car videos, and Netflix.</p>

<p>Thinking about how I spend my idle time, I realized that I missed two things that I actually love and spend a fair amount of time on: stock markets and reading open-source code.</p>

<p>Ruby on Rails got me into the habit of reading code. Back in the day before bundler, the whole Ruby on Rails framework was in the plugins directory of our code. It had little documentation. A lot of methods accepted options as arguments, and looking at the source code was often the only way to find what options were available. However, that necessity soon turned into a hobby for me, and I keep reading source code of open-source projects just for fun. GitHub mobile UI helps a lot.</p>

<p>To name a few, I read some part of the source code of Ruby on Rails, Ruby, RSpec, BackboneJS, ASP.NET MVC, Golang, UnderscoreJS, VueJS, ReactJS, Terraform, Chef, Jenkins, Lucene, ElasticSearch, Docker, and many other popular tools and libraries.</p>

<p>During this mid-thirty reflection, I decided to start a YouTube channel called ReadCodeWithSohan where I&#8217;ll be screencasting as I read some part of an open-source project. Today, I posted my first video on reading the JQuery source code, which I didn&#8217;t really read until now. I hope you enjoy it.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/no2lLfLyg7c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Me]]></title>
    <link href="http://smsohan.com/blog/2020/02/08/working-with-me/"/>
    <updated>2020-02-08T12:38:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/02/08/working-with-me</id>
    <content type="html"><![CDATA[<p>Since I commonly work with a diverse group of people, this post is a way for me to broadcast some quick tricks that may help our working relationship. When we work together, let&#8217;s do this:</p>

<p><strong>Trust</strong> is only earned when it&#8217;s mutual. Let&#8217;s work with this shared belief.</p>

<p><strong>Context</strong> is everything. Most importantly, show me <strong>why</strong> we need to work on something. If the answer isn&#8217;t clear in your mind, we can work together to build a crisp context.</p>

<p><strong>Solutions</strong> for problems you&#8217;re raising. Ideally, you&#8217;ve already thought about a few solutions with some measure of feasibility for each, and you come with an open mind. I know you care about the problem only if you spent some time thinking about a few solutions.</p>

<p><strong>Clarity</strong> between your evidence and assumptions. Assumptions are often essential to move ahead, but treating assumptions as evidence can be harmful.</p>

<p><strong>Output</strong> is the focus, our egos aren&#8217;t. That said, let&#8217;s be mutually respectful.</p>

<p><strong>Time</strong> is managed. Let&#8217;s manage our expectations given the time we have. Blaming the shortage of time shows a lack of skill.</p>

<p><strong>Writing</strong> is a great thought exercise and good write-up scales infinitely. Let&#8217;s write and rewrite our thoughts, specially when we&#8217;re unclear about those.</p>

<p><strong>Standup comedies, biography, soccer, politics, investment, tech, leadership, Netflix, movies, and similar topics</strong> are cool. Sorry, not much of a Hockey or Basket Ball fan. Mostly a passive music listener and happy to listen whatever is on radio or a YouTube playlist.</p>

<p>If you have a similar list, I&#8217;d be happy to read and respect it. Please send along.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How About Full-Stack Micro-Services?]]></title>
    <link href="http://smsohan.com/blog/2019/11/17/how-about-full-stack-micro-services/"/>
    <updated>2019-11-17T13:47:00-07:00</updated>
    <id>http://smsohan.com/blog/2019/11/17/how-about-full-stack-micro-services</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/patched_quilt.jpg" alt="patched quilt" /></p>

<p><small>
Source: <a href="https://flic.kr/p/pUW8f9">Audrey on Flickr</a>
</small></p>

<p>I think nobody knows how to stitch together an app with full-stack micro-services. I have the following open-questions if you disagree. Of course, if we could send people to moon, we could solve these problems. But the question is, is it worth and should your team  solve these problems? Especially, for small teams?</p>

<ol>
<li>How to render the UI from tens of independent micro-services into the same web page?</li>
<li>How to ensure the JS and CSS libraries are compatible within all of the independent services?</li>
<li>How to aggregate logs from the services to be able to trace a user / request / transaction?</li>
<li>How to measure and reduce overall latency and spinner-fatigue?</li>
<li>Which off-the-shelf framework can be used for achieving the above?</li>
</ol>


<p>Headless micro-services are easy to build, but in many ways are similar to integration over database. It helps scaling teams, but even if you have many teams, I&#8217;d say extract service where it makes sense instead of adopting that model as the default choice.</p>

<p>I suggest being careful about following conference talks and blogs on how cool micro-services are. It may work for big and gig tech. They don&#8217;t always turn a profit! Your small teams are more likely to drown in worthless complexity from a micro-service architecture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from The VoxxedDays Banff, 2019]]></title>
    <link href="http://smsohan.com/blog/2019/09/23/notes-from-the-voxxeddays-banff/"/>
    <updated>2019-09-23T15:10:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/09/23/notes-from-the-voxxeddays-banff</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/voxxed_banff.png" alt="VoxxedDaysBanff2019" /></p>

<p>Gone are the days when I used to go to a ton of local developer meetups. After <a href="http://smsohan.com/blog/2019/06/05/polyglot-yyc-2019-my-first-unconference/">Polyglot YYC</a>, this was the second conference I joined this year. This was a 50/50 event for me in terms of like vs. dislike. Here goes my notes:</p>

<p>Ix-Chel Ruiz presented the keynote to start the day. Her storytelling style reminded me of WWII movies, where a lot of cloudy and gloomy scene keep getting darker and darker, ending with a deep sense of sadness. Ix-Chel used quotes from the likes of <a href="https://en.wikipedia.org/wiki/Scott_Galloway_(professor)">Prof. Galloway</a> and Elon Musk to tell a story about how the modern tech is creeping into our private lives. I wish she had prepared for the keynote a little better. She paced it so slowly yet ran out of the material half-way through the slot. In a way I liked the early finish because I just wanted to feel optimistic about the future.</p>

<p>The stunning view of Banff landscape brightened up the mood a bit:</p>

<p><img src="http://smsohan.com/images/banff.jpg" alt="banff" /></p>

<p>There were 4 other talks on the same day and I liked the talk on <a href="https://vuejs.org">Vue.js</a> and <a href="https://vuetifyjs.com/en/">Vuetify</a> by <a href="https://www.davepaquette.com">Dave Paquette</a>. Since, I use VueJS at work, it was easier to relate to. Dave showed us how he&#8217;s using Vue.js to render a real-time collaborative UI for complex seating requirements at <a href="https://www.flyovercanada.com">FlyOver Canada</a>.</p>

<p>Among other talks, there was one on data management for machine learning and another one on Kotlin, I liked these  talks but didn&#8217;t fully relate with the topics.</p>

<p>There was a talk on using Kafka for geo-fencing applications. The presenter could&#8217;ve spent more time on the parts of kafka that makes it a compelling case for using in geo-fencing applications. Instead, he delved into the code, java, and jar files.</p>

<p>There was another talk on using <a href="https://eventstore.org">EventStore</a> for event sourcing. The presenters set the story saying that they had an opportunity to try new technologies while rewriting a &#8220;monolithic&#8221; application and they used EventStore with &#8220;multi-services&#8221; to implement it so it&#8217;s easier to evolve the system. I&#8217;d love to see some evidence of the desired outcome, that&#8217;d be motivating. But in the end it was about the &#8220;how&#8221; instead of the &#8220;why&#8221;.</p>

<p>One thing to note is, even for talks that could be more engaging, I still learned quite a few new things.</p>

<p>Beyond the talks, I like going to conferences as it opens the opportunity to meet new people and some known faces. In hindsight, had I known about this event before the talks were finalized, we&#8217;d have submitted a few proposals from Cisco. Looking forward to the next round for an opportunity to share some innovative work we&#8217;re doing at Cisco.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What We Learned About Feature Flags in Five Years]]></title>
    <link href="http://smsohan.com/blog/2019/08/13/what-we-learned-about-feature-flag-in-five-years/"/>
    <updated>2019-08-13T21:56:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/08/13/what-we-learned-about-feature-flag-in-five-years</id>
    <content type="html"><![CDATA[<p>Looking at our git logs from <a href="https://www.cisco.com/c/en/us/products/security/amp-for-endpoints/index.html">Cisco AMP for Endpoints</a> Console, I see that we introduced feature flags back in January, 2014. The reason I got interested in it is because even after all these years of use, today I had to build a new concept on our feature flag code. If you&#8217;re already using feature flags or thinking about adding feature flags to your project, this experience report may be helpful.</p>

<p><img src="http://smsohan.com/images/switchboard.jpg" alt="switchboard" /></p>

<p><small>
Photo credits to <a href="https://flic.kr/p/9yJU3j">Michael Newton</a>
</small></p>

<p>Back in 2014, we were growing as a team, but wanted to keep working on a single shared code. We perceived  that the productivity gain of multiple teams working on a shared code would outweigh cross-team dependency issues. As we started working on multiple features in parallel, mostly independent with different release dates, we saw unfinished work on one feature was blocking the release of a completed one. After some research, we decided to introduce feature flags in our code.</p>

<p>First, we read <a href="https://martinfowler.com/bliki/FeatureToggle.html">Martin Fowler&#8217;s</a> article on this topic as a guideline. Today, <strong>we have 195 feature flags in production</strong>. Over time, we have extended the use of feature flags with new concepts and I wanted to document it here for everyone. Fowler&#8217;s blog also published a more <a href="https://martinfowler.com/articles/feature-toggles.html">detailed and updated post</a> later. The taxomony used here is different from Fowler&#8217;s because I find the following to be more relevant for our product.</p>

<ol>
<li><strong>Database stored</strong>: We store the feature flags in the main database so that the features can be toggled without needing a code deployment.</li>
<li><strong>Cached</strong>: Feature flag lookups are cached for performance.</li>
<li><strong>Temporary vs. permanent</strong>: We mark some feature flags as temporary when the primary goal is to incrementally release code to production. Temporary feature flags are regularly cleaned once the feature is complete. 13/195 currently used feature flags are marked temporary.</li>
<li><strong>Self-serve</strong>: We tag some feature flags as self-serve where users need to opt-in to use the feature.</li>
<li><strong>Limited availability</strong>: For self-serve feature flags, we tag some features as limited availability. It allows us to release self-serve features to selected customers.</li>
<li><strong>Globally enabled</strong>: We have a mechanism to globally enable or disable a feature flag. 131/195 feature flags are currently marked globally enabled. This number varies by deployed environments.</li>
<li><strong>Enabled for all, but</strong>: We have a mechanism for enabling a feature flag for all but some specific targets.</li>
<li><strong>Multi-target</strong>: Sometimes we attach a single feature flag to multiple domain objects such as tenant, user, subscription tier, etc.</li>
<li><strong>Hierarchical</strong>: We use a fallback mechanism for feature check. For example, the check if a user have file upload permission, we check it for the specific user, then fall back to the tenant it belongs to, and finally fall back to the feature itself being globally enabled.</li>
<li><strong>Code generator</strong>: We use a single-command code generator to introduce a new feature flag to our code. It takes care of the database migration, seed entry, and code references.</li>
<li><strong>Circuit-breaker</strong>: For integration with external services, we&#8217;ve used feature flags as a circuit-breaker to gracefully handle third-party downtime.</li>
<li><strong>Environment-flags</strong>. We deploy the product to multiple geographic environments, including a private cloud model. Certain features behave differently based on the deployment. Using feature flags make it easy to develop and test such differences before deploying to each target environment.</li>
</ol>


<p>There are reusable libraries and services such as <a href="https://launchdarestkly.com">LaunchDarkly</a> that provide rich APIs and user interfaces for feature flags. At this point, even with all the aforementioned concepts, our custom implementation of feature flag is quite straight-forward and easy to evolve. It has been a key ingredient for our frequent iterative deployments with 6 teams working on diverse features in parallel on the same product.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture is all about Ugly Boxes and Lines - My Wishlist]]></title>
    <link href="http://smsohan.com/blog/2019/08/10/software-architecture-is-all-aboout-ugly-boxes-and-lines/"/>
    <updated>2019-08-10T20:28:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/08/10/software-architecture-is-all-aboout-ugly-boxes-and-lines</id>
    <content type="html"><![CDATA[<p>In my last post, I claimed <a href="http://smsohan.com/blog/2019/08/02/all-talk-no-show-software-architecture/">software architecture is all talk and no show</a>. When we have a visible one, it&#8217;s a bunch of poorly drawn boxes and lines. I don&#8217;t have a problem with boxes or lines, but I do like beautiful drawings.</p>

<p>Despite many standards, we still mostly use  whiteboard drawing of boxes and lines for sharing software design as we build new systems or introduce new team members. Where it sucks is the lack of evolution and context of the rest of the system that&#8217;s not drawn on the board.</p>

<p>A digital repro of software architecture diagrams often happen in PowerPoint or similar tools that allow us to draw boxes and lines. This process is so rough that people just give up.</p>

<p>At work, I have been using <a href="http://www.websequencediagrams.com">WebSequenceDiagram</a>. While it&#8217;s still not an eye-candy, I like the fact that you can draw a diagram from using plain text. Consider this as an input to create the accompanying diagram:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title Toilet Flush System
</span><span class='line'>User -&gt; Flush Lever: Push
</span><span class='line'>Flush Lever -&gt; Outlet Valve: Open
</span><span class='line'>Outlet Valve -&gt; Toilet Bowl: Water
</span><span class='line'>Outlet Valve -&gt; Inlet Valve: Open</span></code></pre></td></tr></table></div></figure>


<p><img src="http://smsohan.com/images/Toilet_Flush_System.png" alt="Sequence Diagram" /></p>

<p>While this text to sequence diagram is a great achievement for a tool, I don&#8217;t see such tools for software architecture diagrams. Here&#8217;s my wishlist of features that I&#8217;d want in a software architecture tool:</p>

<ol>
<li><strong>Text input</strong>. Allows us to easily create the diagrams and use all the version control features.</li>
<li><strong>Map like UX</strong>: Allows us to easily transition between higher and lower level components.</li>
<li><strong>Beautiful</strong>.</li>
</ol>


<p>Do you know any? Do these requirements make sense?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Talk No Show: Software Architecture]]></title>
    <link href="http://smsohan.com/blog/2019/08/02/all-talk-no-show-software-architecture/"/>
    <updated>2019-08-02T08:46:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/08/02/all-talk-no-show-software-architecture</id>
    <content type="html"><![CDATA[<p>We have a problem with software architecture. Let&#8217;s face it. Find the architecture diagrams of the products you&#8217;re working on and answer these questions:</p>

<ol>
<li>Did you find it?</li>
<li>Does everyone in your team know where to find it?</li>
<li>Is it up-to-date?</li>
<li>Can you see how this system scales, handles failover, monitors performance, or how it&#8217;s secured?</li>
<li>Can you see how it evolved over time?</li>
<li>Can you train a new team-member using this diagram?</li>
</ol>


<p>This is the first micro-post of a series of such as I aim to build a compelling case for fundamentally changing software architecture diagrams.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play at Work]]></title>
    <link href="http://smsohan.com/blog/2019/07/04/play-at-work/"/>
    <updated>2019-07-04T16:03:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/07/04/play-at-work</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/paper_plane.jpg" alt="paper plane" /></p>

<p><small>
Image source: <a href="https://www.flickr.com/photos/hgz/">Kalvis</a>
</small></p>

<p>&#8220;I am a mango&#8221;.</p>

<p>First, mangoes are in-season, and I still remember the
juicy sweetness of the mango I had just the night before. So, when the coach
asked each of us to be a fruit, I didn&#8217;t think twice. One of my
coworkers was a kiwi, another one apple, and so on. The idea was to
group us
by color, then by size. This got us, twenty people in the class, moving and engaged. It was part
of a two-day design thinking course. The coaches used the fruit game to
bring some energy into the room as well as to pave the way for the next
exercise - grouping a bunch of ideas by cost and the level of
innovation.</p>

<p>I find that professional trainers bring play at work, especially for
sessions that span hours or days. However, on a typical day to day
business, I don&#8217;t see much play activity at work. Hoping to bring in
some play activities to my work going forward. Here are some ideas for
play activities based on what I saw so far:</p>

<p>Paper planes: Having small groups build paper planes and the winner has
the most number of planes crossing a line.</p>

<p>Catch and throw: A ball or a ball-like object changing hands and the person
catching must find someone that didn&#8217;t catch it already.</p>

<p>Portrait: Everyone draws a portrait of another person looking at their
face without looking at the paper.</p>

<p>Quiz: An online quiz that maintains a leaderboard throughout a session.</p>

<p>Exercise: Getting everyone out of their seats to do a quick one-minute
exercise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Trainings]]></title>
    <link href="http://smsohan.com/blog/2019/06/27/internal-trainings/"/>
    <updated>2019-06-27T13:31:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/06/27/internal-trainings</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/design_thinking.jpg" alt="design_thinking" /></p>

<p><small>
Design Thinking course, Cisco Calgary Office, AB, 2019
</small></p>

<p>One benefit of working at Cisco is access to the many learning and development resources. Our learning and development org arranges hundreds of courses throughout the year. Moreover, we have a reimbursement program for external courses, conferences, books, and subscriptions to online learning programs and publications.</p>

<p>In the past 6 years, I have immensely benefitted from these resources. Here&#8217;s a list of the learning resources I&#8217;ve used.</p>

<ol>
<li><a href="https://learning.oreilly.com">Safari books online</a>, aka O&#8217;Reilly learning: In the past 3 years, have taken 3 online trainings and 7 books on this platform so far.</li>
<li>Design thinking, 2019: A two-day course taught by consultants about how to apply the principles of design thinking to communicate and derive solutions to complex problems.</li>
<li>Mindfulness, 2019: A 5-week program taught by consultants, with one hour per week, where I learned about staying mindful and effective at work amid all the chaos that surrounds it.</li>
<li><a href="http://tufte.com">Tufte one-day course</a>, 2019: Attended a course taught by Edward Tufte on data visualization and learned about the principles that make compelling data visualization.</li>
<li><a href="https://www.sans.org/course/hacker-techniques-exploits-incident-handling">SANS incident response</a>, 2018: A packed week-long program where I learned to think like a hacker by learning about and then hacking some interesting vulnerabilities in systems.</li>
<li><a href="https://dcloud-cms.cisco.com/demo_news/cisco-r00tcamp-lab-v1">Cisco R00tcamp</a>, 2017: A packed week-long program where I learned hands-on pen-testing techniques to build more secure software.</li>
<li><a href="https://www.cisco.com/c/en/us/products/security/threat-hunting-workshop.html">Cisco threat-hunting</a>, 2017: A daylong course to find root case that triggered a security threat using integrated Cisco tools, including the product I build with our team.</li>
<li><a href="https://www.railsconf.com/2015/">RailsConf</a>, 2015: It was a big opportunity to meet the community and bring some of their practices in-house. For example, we started using <a href="https://www.bugsnag.com">BugSnag</a> after learning about it in the conference.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polyglot YYC 2019: My First Unconference]]></title>
    <link href="http://smsohan.com/blog/2019/06/05/polyglot-yyc-2019-my-first-unconference/"/>
    <updated>2019-06-05T16:49:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/06/05/polyglot-yyc-2019-my-first-unconference</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/polyglot_yyc.png" alt="polyglot_yyc" />
<sub>
Source: <a href="https://polyglotyyc.ca">Polyglot YYC</a>
</sub></p>

<p>This weekend I went to <a href="https://polyglotyyc.ca">Polyglot YYC 2019</a>.
It&#8217;s a gathering of tech people from around Calgary. The event was open
to all possible topics, hence the name Polyglot.
It was the first unconference style meetup I went to and this post
is a summary of my day.</p>

<p>About the attendees, I don&#8217;t have the official count, but I imagine there were
close to a hundred people. Quite a few
people represented the sponsor companies. The sponsors
advertised for hiring new employees, mostly software engineers. On the
other hand, I met a few people who joined this venue to talk to prospective employers.
Some of the attendees were enrolled in a coding bootcamp to switch
careers. I was quite happy to see the community praising their enthusiasm towards the bootcampers.
Moreover, I met a few regular tech meetup people after a long time. I used to go to
all tech meetups I could find in town before having kids, and I felt
great to be among the self-motivated crowd after a long break.</p>

<p>About the event, I was fascinated by how the unconference took its shape.
At check-in time, everyone got a couple of forms to write down topics
of interest, either as a host or a participant. Everyone could vote for five
such topics. I didn&#8217;t prepare
beforehand. So, I put up a topic that I&#8217;m presently curios about, &#8220;Writing for Developers&#8221;.
A handful of people voted for me, but it didn&#8217;t make the cut. I found
some ideas better than mine and was happy that those got
voted to the top. In hindsight, I should&#8217;ve proposed the topic of &#8220;Why
Are You Not Innovating?&#8221;. I did an internal presentation on this topic
at Cisco and it was generally praised by my colleagues.</p>

<p>My other observation is, between technical and soft-skill related
topics, I liked the soft-skill ones better. For example, I found the topics on hiring,
choosing a technical vs. managerial career path to be more interesting than
the topics such as GraphQL and ReactJS. A few years ago, I&#8217;d
just choose the technical topics without thinking twice. This is also a
pattern in my recent blog posts or reading list.</p>

<p>In the hiring session, I saw a positive attitude towards hiring remotes
and treating them as equals. This is a major mindset shift among the
community.</p>

<p>In the individual contributor vs. management career path session, the
attendee list included both kinds as well as people that had transitioned in either
direction. The one take home message I got from this session was, when
confused with career choice, individual contributors and managers should take the step to
switch roles. And if things don&#8217;t work out, it&#8217;s totally possible
to revert later.</p>

<p>I&#8217;m looking forward to the 2020 edition of this event and may even prepare to
come up with a good idea for the unconference. If you can, please
join us for the next round.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Micro Design Critic: Microsoft Word vs. Apple Pages]]></title>
    <link href="http://smsohan.com/blog/2019/05/29/microsoft-word-vs-apple-pages/"/>
    <updated>2019-05-29T10:44:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/05/29/microsoft-word-vs-apple-pages</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/WordsVsPages.png" alt="MsWordVsApplePages" />
Showing a Screenshot of Microsoft Word for Mac and Apple Pages</p>

<p>This is what you get by default when you open a blank document on both editors.
I love that Apple Pages puts a deep focus on the content. If you haven&#8217;t used it, I&#8217;d
recommend trying it out. I know Microsoft Word has a known face, so
you&#8217;re likely used to all the distractions that sorrounds the content.
But, if you can, give Apple Pages a try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exception Handling Anti-patterns]]></title>
    <link href="http://smsohan.com/blog/2019/05/23/exception-handling-anti-patterns/"/>
    <updated>2019-05-23T10:25:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/05/23/exception-handling-anti-patterns</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/confusing_road_sign.jpg" alt="confusing road sign" /></p>

<p><sub>
Source: <a href="https://www.flickr.com/photos/foilman/2803261256/in/photolist-5gHrUC-5YEVYt-ocZHz7-2bDb3w8-aCGGSo-cB9opW-dUUDRS-6qbnVw-ppkgWu-cYsKjw-4HSS8t-aAJCk5-XBWQ5q-cYsKDA-NNefT4-p8HF-bfJwPB-6SibT9-ubSQL-mvaYX-7uNS7V-473w41-HABo5-5SL6FL-2f4rrkN-SazHLx-2eaMrNW-2eaMsbQ-24J1WkB-24CQREz-24CQR5g-bvyvt7-RvjAiK-6asxLk-9zRJ1e-6zLy6Z-9yuCpf-24FpgMX-95dVq3-hERZkd-4JKe8s-hESYoP-hESYnX-4oPtJ8-6gvogb-5skgvk-4Pu7Hp-8AmdYp-2t55t-24FpgYt">Henry Burrows</a>
</sub></p>

<p>Whenever faced with a production issue, I find exceptions to be an extremely useful
information source. A careful look at an
exeption has often led to quick discovery
of the source of a trouble. On the flip side, I have also
faced a lot of chaotic debugging sessions because of poor exception handling.
Here, I present the common anti-patterns that I recommend fixing while
reviewing pull-requests. Most programmers are already familiar with the mechanics of exception
handling. Yet, I see these anti-patterns everyday.</p>

<p>I primarily see these anti-patterns to be control-flow or logging related as shown below:</p>

<h2>Control-flow Anti-patterns</h2>

<p><strong>Unhandled.</strong> When an exception is unhandled, if often results in a
clueless user experience for the end user as well as the developer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">notify</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">email!</span> <span class="c1">#May fail due to configuration, network, or authentication</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Catch-all.</strong> With catch-all errors, it&#8217;s often difficult to quickly detect the
original problem. For the same reason, the end users don&#8217;t get specific
and actionable error messages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">save!</span> <span class="c1">#May fail due to database issues</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>  <span class="c1"># handle</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>If-else Exceptions.</strong> Exceptions mean something unexpected took
place. If-else is used for logical known code paths. For example, when
accepting an API request, invalid input data is often a known logical
path. Using exceptions for it will trigger false alarms.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">ValidationError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>  <span class="n">log_exception</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Wrapped Exception.</strong> A new exception is raised hiding the original exception. In such cases,
if the exception is handled by the caller, <strong>critical context information
is lost</strong> since the orignal stacktrace is no longer available.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">save!</span> <span class="c1">#May fail due to database issues</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">SaveError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">CustomSaveError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Failed to save the post&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Useless Custom Exception.</strong> Introducing a new exception type when a pre-defined exception suits just
fine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">text</span><span class="p">:)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">text</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="c1">#Could just use pre-defined ArgumentError</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">EmptyTextException</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Text can&#39;t be empty&quot;</span><span class="p">)</span>   <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Leaky Handler.</strong> Handling an error without cleaning system resources such as file
handles, open network connections, can cause cascading system outage.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="c1">#Will leak this file handle if read succeeds, but write fails</span>
</span><span class='line'>  <span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;/some/new.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;some text&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">FileNotFoundError</span><span class="p">,</span> <span class="no">FileSaveError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="n">error</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Logging Anti-Patterns</h2>

<p><strong>Silent Handler.</strong> Makes it very difficult to debug problems.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">save!</span> <span class="c1">#May fail due to database issues</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Debug-only Handler.</strong> Similar to silent handler since most production apps run in non-debug
log level.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">save!</span> <span class="c1">#May fail due to database issues</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">SaveError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">debug</span> <span class="s2">&quot;failed to save post </span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Custom Message-only Handler.</strong> Some exception handlers only log a custom
message leaving the details of the exceptions. As a result, critical
information is lost that can be very useful for debugging.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">save!</span> <span class="c1">#May fail due to database issues</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">SaveError</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;failed to save post&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Message-only Handler.</strong> Without Stacktrace, it gets very difficult to trace the root of a
problem since often times exception handlers wrap a few lines of code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">email</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">comment</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">NotFoundError</span> <span class="o">=&gt;</span> <span class="n">error</span> <span class="c1"># Could happen in line 2 or 4</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;failed to save post </span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sneaky Handler.</strong> Some exception handlers return nil or a value.
The caller can&#8217;t distinguish between a successful vs. exception case and
fails in subsequent steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">save!</span> <span class="c1">#May fail due to database issues</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">SaveError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;failed to save post </span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">null</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are times when you intentionally have to use some of these
anti-patterns. But those are rare. It&#8217;s critical for the developers to
think about the information that&#8217;d help in swiftly debugging a production problem. As such,
developers must avoid the noise and provide all context information for
errors to help diagnose potential system problems.</p>

<p>Happy coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Ah, how good it is to be among people who are reading.”]]></title>
    <link href="http://smsohan.com/blog/2019/04/11/ah/"/>
    <updated>2019-04-11T15:29:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/04/11/ah</id>
    <content type="html"><![CDATA[<blockquote><p>Rainer Maria Rilke</p></blockquote>

<p>All creators take a deep interest in the creations of others. All
filmmakers watch a lot of movies, all good writers are also the most
prolific readers, all artists can talk at length about the smallest
pieces of art they have seen.</p>

<p>We, software developers, if we want to claim ourselves as the artists of
this craft, we must be prolific readers of code. There&#8217;s been no better
time as today. We have immediate access to millions of lines of carefully
written code out there in the internet. Just like artists of any craft,
I&#8217;ve had so much fun spending time with my fellow developers that read
code for the pure joy of learning something new.</p>

<p>Just had so much fun reading <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/array/inquiry.rb">this ruby</a>
code today from the Ruby on Rails project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="c1"># Wraps the array in an +ArrayInquirer+ object, which gives a friendlier way</span>
</span><span class='line'>  <span class="c1"># to check its string-like contents.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   pets = [:cat, :dog].inquiry</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   pets.cat?     # =&gt; true</span>
</span><span class='line'>  <span class="c1">#   pets.ferret?  # =&gt; false</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   pets.any?(:cat, :ferret)  # =&gt; true</span>
</span><span class='line'>  <span class="c1">#   pets.any?(:ferret, :alligator)  # =&gt; false</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inquiry</span>
</span><span class='line'>    <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">ArrayInquirer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The beautify of this rich API is an art. I love it. You may have
different opinions. But I hope you find your love of art in code.
There&#8217;s plenty of art in code out there for everyone to enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How am I Developing the People I Support as a People Leader?]]></title>
    <link href="http://smsohan.com/blog/2019/03/26/how-am-i-developing-the-people-i-support-as-a-people-leader/"/>
    <updated>2019-03-26T08:29:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/03/26/how-am-i-developing-the-people-i-support-as-a-people-leader</id>
    <content type="html"><![CDATA[<p>After being a people leader at work for the past six years, I’m now going through a phase of introspection. Essentially, I’m trying to understand my own philosophy about people leadership so that I can clearly communicate it to the people that I support.</p>

<p>My most important realization is, <strong>people leadership is all about developing people</strong>. What I mean by this is, for everyone I’m supporting, I must carefully build a plan that provides them with the opportunities to stay motivated so that they can thrive. With this goal, once I wrote down my understanding of what motivates each of the people I support, it was quite eye opening to see the differences among people. Going through this process, I also realized how unprepared I was in terms of providing them with a clear career path to achieve their best.</p>

<p>If you’re interested, I’ve shared a template of the <strong>people development document</strong> here.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Name: ___
</span><span class='line'>Date:___
</span><span class='line'>Current role: ___
</span><span class='line'>Motivation: ___
</span><span class='line'>Upcoming opportunity in the next three months:___
</span><span class='line'>Upcoming opportunity in the next year:___</span></code></pre></td></tr></table></div></figure>


<p>I consider this to be a living document as people often develop new interests and the opportunities at work change with time. But keeping a clear log of each individual’s career is a great way to establish and manage expectations. You can build this with the the individuals directly and update it when you meet for one-on-one feedbacks. As a lead, when you collaboratively build this, you empower them and build a trusting relationship as you both see how the motivations align with the work.</p>

<p>From the past 13 years of my time in the industry, working for 5 different companies, personally I’ve always felt a little under-informed about how my leaders planned a career development for me. Through my introspection of being a people leader, I realized I didn’t honestly appreciate the need for such clarity among the people I supported. So, I wanted to change it. And found the written document to be a simple yet surprisingly powerful tool to fill this void.</p>

<p>Now, if you’re a people leader, I’d recommend doing this exercise with your people. You’ll be pleasantly surprised by the outcome.</p>

<p>If you aren’t a people leader, you can write it down for yourself and ask your leader to collaborate on it. This way, when you have a one-on-one, you both will have the same reference document to focus on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails: Database Migration and Downtime]]></title>
    <link href="http://smsohan.com/blog/2019/03/18/ruby-on-rails-database-migration-and-downtime/"/>
    <updated>2019-03-18T10:20:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/03/18/ruby-on-rails-database-migration-and-downtime</id>
    <content type="html"><![CDATA[<p>Recently, we had a production outage for a few minutes due a database
migration on one of our Ruby on Rails apps. The deployment went fine
through a few
stages, but the problem only showed up at the last and the largest
stage. This is exactly what happened during the deploy process.</p>

<ol>
<li>New code was deployed. Restart was pending, so the server was still
running old code.</li>
<li>Migrations ran.</li>
<li>One migration removed a column that was used in the old code, but no
longer used in the new code.</li>
<li>The next migration was a data migration that inserted one row / user
to a table. This was a very slow migration, taking 5+ minutes.</li>
<li>The old code failed because it tried to use a column in the database
that was no longer there. To make things worse, the column was
referenced at all page loads within the app.</li>
<li>The long running migration didn&#8217;t finish because it ran into a
timeout.</li>
<li>The servers weren&#8217;t restarted because the migration had failed. So,
the new code wasn&#8217;t served at all.</li>
<li>There was no automatic database rollback to restore the system into a good
state with the old code.</li>
</ol>


<p>The team was able to resolve the issues within the next 5 minutes, but
it was the worst system outage we&#8217;ve seen in years. For anyone dealing
with a large Ruby on Rails app, you can use the following
safeguards to avoid such problems:</p>

<ol>
<li><strong>Do not remove a column from the database while the current code is
still using it. Do it at a later release.</strong></li>
<li>When a deployment fails at the migration step, ensure you have a
rollback policy so that the system can be automatically restored to a
known good state.</li>
<li>Consider data migrations to be a performance problem and always test
the migrations with relaistic load before production release.</li>
<li>If possible, run your data migrations seprately from schema
migrations so that you don&#8217;t incur deployment delays for optional new
data.</li>
</ol>

]]></content>
  </entry>
  
</feed>
