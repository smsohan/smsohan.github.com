<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sohan's Blog]]></title>
  <link href="http://smsohan.com/atom.xml" rel="self"/>
  <link href="http://smsohan.com/"/>
  <updated>2020-12-29T15:54:16-07:00</updated>
  <id>http://smsohan.com/</id>
  <author>
    <name><![CDATA[SM Sohan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Software Architecture - Topic 1: Delightfulness]]></title>
    <link href="http://smsohan.com/blog/2020/12/26/software-artchitecture-part-1/"/>
    <updated>2020-12-26T15:07:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/26/software-artchitecture-part-1</id>
    <content type="html"><![CDATA[<p><em>&#8220;I want to be an architect&#8221;</em> - is a common career goal I hear during one:one meetings and annual reviews with my team members. Honestly, I&#8217;m writing this series of blog posts to bring some clarity and structure into my own thoughts, and hopefully to scale my time. You can even say, I&#8217;m open-sourcing my mentorship on the topic of software archtecture. My sincere hope is, this series helps my team or anyone who wants to systematically learn and improve their software design skills.</p>

<p>My mental model of a software architect as a system is as follows:</p>

<pre>
                 _________
                |         |
Requirements -> |         |
                |         |
 Environment -> |Architect| -> "Delightful" System Design
                |         |
      People -> |         |
                |_________|
</pre>


<p>That is, they produce the most delightful system design as the ouput from three inputs: business requirements, the environment that surrounds the system, and the people that are involved with the system. The main phrase to remember is <strong>&#8220;the most delightful&#8221;</strong> - because this is what makes the architect&#8217;s job so much fun and appealing.</p>

<p>First, I recommend reading the book <a href="https://www.amazon.com/Design-Everyday-Things-Revised-Expanded/dp/0465050654">The Design of Everyday Things</a> to learn how design impacts us everyday. It&#8217;s a fun and must read for anyone involved in any kind of design.</p>

<p>Next, I recommend reading the book <a href="https://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515/ref=sr_1_1?crid=EH17W0BAL06D&amp;dchild=1&amp;keywords=don%27t+make+me+think&amp;qid=1609281299&amp;s=books&amp;sprefix=don%27t+make+%2Cstripbooks-intl-ship%2C200&amp;sr=1-1">Don&#8217;t Make Me Think</a> to learn about how to know if your design is delightful.</p>

<p>I prefer the word delightfulness over usability or customer obsession because the former sets a high bar. I hope you also internalize the goal of designing the most delightful systems and settle for nothing less, why should you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["you're unfrogettable"]]></title>
    <link href="http://smsohan.com/blog/2020/12/24/you-are-unfrogettable/"/>
    <updated>2020-12-24T18:39:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/24/you-are-unfrogettable</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/CiscoCard.jpg" alt="card" /></p>

<p><small>This card is a parting gift from my beloved team. (Catherine, I know you made it)</small></p>

<p>This post is dedicated to my team at Cisco. I put a lot of my passion and care into building and being part of a great team during my time at Cisco, eight amazing years between 2012 to 2020. It was the privilege of a lifetime to be able to learn from and mentor an amazing group of people while building a product together.</p>

<p>Our memories work in a fascinating way. At Cisco, I put most of my working hours on actual work such as understanding and sharing project scope, designing and building solutions, responding to customer support requests, interviewing, presenting, etc. But just after four months, now that I think about my time at Cisco, none of the actual work takes the centre stage in my memory. Instead, the memory is filled with incredible life stories I heard during the short walks I took at the park for one:one meetings, or relaxed and often-long Friday lunches, or giving someone a safe space when they felt vulnerable. It&#8217;s a reminder that when it&#8217;s all done and dusted - what remains is the people and relationships we build with them. I&#8217;m so glad to get this card in the mail after I left and I&#8217;ll forever remember this kind gesture.</p>

<p>What better can a man wish for than being &#8220;unfrogettable&#8221;?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tribute to Time Travel APIs in Ruby on Rails]]></title>
    <link href="http://smsohan.com/blog/2020/12/07/tribute-to-rails-date-time-great-invisible-design/"/>
    <updated>2020-12-07T10:28:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/12/07/tribute-to-rails-date-time-great-invisible-design</id>
    <content type="html"><![CDATA[<blockquote><p>Good design is obvious. Great design is transparent. — Joe Sparano</p></blockquote>

<p>Ruby on Rails delighted me all through my career. The community is one with a taste for art, thanks to DHH&#8217;s ability to write well. He set a  high bar and the community also lives up to it. One API that absolutely blows my mind is how delightful it is to work with date and time in Ruby on Rails. Here are a few example use cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Schedule a report to run at the beginning of next week</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">run_at</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="o">.</span><span class="n">from_now</span><span class="o">.</span><span class="n">beginning_of_week</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or first Friday of next month</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">run_at</span> <span class="o">=</span> <span class="n">report</span><span class="o">.</span><span class="n">run_at</span><span class="o">.</span><span class="n">next_occurring</span><span class="p">(</span><span class="ss">:friday</span><span class="p">)</span> <span class="k">unless</span> <span class="n">report</span><span class="o">.</span><span class="n">run_at</span><span class="o">.</span><span class="n">friday?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or beginning of next month</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">run_at</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">month</span><span class="o">.</span><span class="n">from_now</span><span class="o">.</span><span class="n">beginning_of_month</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or mid-day tomorrow</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">run_at</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">from_now</span><span class="o">.</span><span class="n">at_midday</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Is today a weekday?</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">on_weekday?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or a weekend?</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">on_weekend?</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Book a calendar event for a whole day</span>
</span><span class='line'><span class="n">time_off</span><span class="o">.</span><span class="n">duration</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">all_day</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#.. or find sales in the current quarter</span>
</span><span class='line'><span class="no">Sale</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">all_quarter</span><span class="p">)</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of time related code I&#8217;ve seen in real projects is finding a point in time relative to <code>now</code>. Ruby on Rails makes it an absolute joy traveling time by adding time related methods straight into the <a href="https://api.rubyonrails.org">Integer</a> class, where the code looks just like how we think about time. Sure, Rails uses complex classes such as <code>TimeWithZone</code>, <code>Duration</code>, etc. under the hood, but I&#8217;ve almost never seen those used directly. This is such a stark contrast with many other platforms where you have to use pedantic concepts such as <code>TimeSpan</code>, <code>Calendar</code>, <code>GregorianCalendar</code>, etc. The true elegance of time travel API in Ruby on Rails lies in how invisible it is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Great Developer Demos]]></title>
    <link href="http://smsohan.com/blog/2020/11/28/tips-for-developer-demos/"/>
    <updated>2020-11-28T20:33:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/11/28/tips-for-developer-demos</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/demo.jpg" alt="Show and Tell" /></p>

<p><small>Image source: <a href="https://flic.kr/p/5kUqG8">Show and tell - explaining the rain game</a></small></p>

<p>I started my developer career 15 years ago at the onset of agile and Scrum. From my early career, I worked on short sprints where we demoed our work to collect feedback towards the end of each sprint. So, after thousands of demos, I’ve seen enough great ones that I developed a taste for it. I can no longer go back to soulless demos. This post is about a few observations I have about great demos.</p>

<p><strong>Presenters of great demos always tell a story.</strong> The presenter herself had a lot of fun and she has to share her excitement with everyone. It’s contagious, we can’t help but listen. She shows what her team had done and why it matters. She fondly shares what was fun and what was a pain the butt. Her passion drives us to pay attention and take part actively.</p>

<p><strong>Great demos have a memorable punchline.</strong> The presenter lays out the demo in a way that neatly converges to her punchline we can’t forget.</p>

<p><strong>Great demos allow everyone to immerse into the demo.</strong> The presenter takes a pause so the audience can focus on the work of art, and shares her narrative when the audience can truly focus on listening.</p>

<p><strong>Great demos are inclusive.</strong> The presenter remains humble, acknowledges her team’s effort, and curiously seeks feedback from everyone.</p>

<p><strong>Great demos feel short.</strong></p>

<p>Now, treat yourself with this captivating <a href="https://www.youtube.com/watch?v=2sIzfGzf_50">storytelling of Nick Means</a> even if you don’t have 40 minutes of free time. You’ll thank me. I know sprint demos are only 5-10 mins, but you can still put your soul into it. We’ll surely care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where to Learn: 10 Ways I Do]]></title>
    <link href="http://smsohan.com/blog/2020/11/18/where-to-learn/"/>
    <updated>2020-11-18T10:51:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/11/18/where-to-learn</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/learning.png" alt="learning" /></p>

<p>When talking to people, I&#8217;m always interested to know how they learn. This image above shows a view of how I personally learn. Here&#8217;s some context about the items on the diagram:</p>

<ol>
<li>Online-courses: I love O&#8217;Reilly learning. Their video courses are split into 5 minute lectures. For example, I took their Kotlin course to learn the language.</li>
<li>Books: Books are great for curated content, but it takes dedicated time. Most of the time, I have one book that I read. Current interest is on leadership and business.</li>
<li>Hands-on: A lot of people learn by doing. I do the same, but mostly at a hello world level instead of going too deep into new things.</li>
<li>Podcasts: This is my most passive form of learning, mostly when I&#8217;m walking or driving.</li>
<li>People: I keep in touch with people and ask them about what they are learning.</li>
<li>Twitter: I admit, I spend too much time on Twitter. But occasionally, people share interesting things.</li>
<li>YouTube videos: I watch conference talks such as InfoQ, DotNet, Rails, Ruby, Goto, and AWS.</li>
<li>News: I follow Hacker News mostly for tech and business news. And then there&#8217;s following stock market news about new business innovations.</li>
<li>Interviews: I watch inteview shows on YouTube as I&#8217;m a big fan of biographical content.</li>
<li>Open-source: I follow a bunch of open-source projects or just read code from time to time to learn about how the passionate and expert developers craft code.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Get and Give Feedback]]></title>
    <link href="http://smsohan.com/blog/2020/11/12/learn-to-get-and-give-feedback/"/>
    <updated>2020-11-12T11:45:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/11/12/learn-to-get-and-give-feedback</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/feedback.jpg" alt="Feedback" /></p>

<p><small>Photo credits to <a href="https://flic.kr/p/2edx7Za">GotCredit</a></small></p>

<p>Here’s a personal story about getting a feedback. For context, English is my second language. I grew up speaking Bangla as my primary language. I learned reading and writing English in school - grammar first. I had only started speaking English much later in my life, in my mid-twenties. So, I often struggle with the informal form of the language. With this context, here’s an excerpt of a one:one chat conversation at work (from memory):</p>

<p><strong>Catherine</strong>: Sohan, I have a question when you have time.<br/>
<strong>Me</strong>: Shoot me.<br/>
<strong>Catherine</strong>: Haha. It’s not “shoot me”. I think you mean just “shoot”. When you say “shoot me” it means…</p>

<p>In this case, Catherine genuinely cared and had the courage to share this feedback about my improper use of English. I love getting such direct and timely feedback.</p>

<p>Here, I’m sharing links to some content that I found to be high quality resources to learn about  feedback. Hope you’ll enjoy.</p>

<ol>
<li>Radical Candor Talk - <a href="https://www.youtube.com/watch?v=4yODalLQ2lM">The Surprising Secret to Being a Good Boss</a></li>
<li>Podcast: <a href="https://podcasts.apple.com/ca/podcast/ep-7-how-to-get-feedback-from-your-boss/id1188489488?i=1000381196889">How to Get Feedback From Your Boss</a></li>
<li>Podcast: <a href="https://podcasts.apple.com/ca/podcast/ep-16-take-feedback-like-a-boss/id1188489488?i=1000384606048">Take Feedback Like A Boss</a></li>
<li>Podcast: <a href="https://podcasts.apple.com/ca/podcast/ep-8-how-to-give-feedback-to-your-boss/id1188489488?i=1000381487680">How to Give Feedback To Your Boss</a></li>
<li>Book chapter: <a href="https://www.norulesrules.com">Max up Candor: A Circle of Feedback</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My YouTube Playlist for Leadership]]></title>
    <link href="http://smsohan.com/blog/2020/11/04/youtube/"/>
    <updated>2020-11-04T10:29:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/11/04/youtube</id>
    <content type="html"><![CDATA[<p>This summer I was interviewing for a new job. This was the first time I was interviewing for an engineering manager role. Soon I realized  these interviews were wildly different from interviews for developer roles. During typical developer interviews, I solved coding and system design problems and discussed personal aspirations in behavioral interviews. In contrast, leadership interview qeustions were really open-ended. Honestly, I found it very hard to answer these questions concisely. Often I could form a crisp answer to these questions only after the interview had finished :-( Here are some example questions:</p>

<ol>
<li>What is your management philosophy?</li>
<li>Tell me when you had to deal with uncertainty.</li>
<li>Tell me about when you had to motivate a team even though you personally disagreed with the project.</li>
<li>Tell me when you innovated as a manager.</li>
</ol>


<p>I did poorly in my first few interviews because how unprepared I was to answer these questions. I got truly frustrated. So, I started looking at YouTube to see how today&#8217;s inspiring leaders answer these questions. Here&#8217;s a list of YouTube channels that I found to be very resourceful.</p>

<ol>
<li><a href="https://www.youtube.com/c/DavidRubenstein/videos?view=0&amp;sort=p&amp;shelf_id=8">David Rubnstein Show</a>: 25 minute very high quality interviews with present and former leaders in business and technology.</li>
<li><a href="https://www.youtube.com/playlist?list=PLxq_lXOUlvQAwaY_9K4ZFH9Xdar9WzCaL">View From the Top - Stanford</a>: Hour long interview sessions with renowned leaders.</li>
<li><a href="https://www.youtube.com/playlist?list=PLnsTB8Q5VgnVzh1S-VMCXiuwJglk5AV--">Technology Enabled Blitzscaling</a>: Hour long interview sessions focusing on technology and startup leadership.</li>
</ol>


<p>Watching these videos I developed some strategies for concisely answering leadership related questions with authenticity. I&#8217;d so love to do a formal research and write up on this topic some time. But for now, here&#8217;s the raw data for your enjoyment.</p>

<p>Go ahead and watch!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference Between Managing One Team Vs. Many]]></title>
    <link href="http://smsohan.com/blog/2020/10/12/managing-one-vs-many-teams/"/>
    <updated>2020-10-12T10:11:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/10/12/managing-one-vs-many-teams</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/orchestra.jpg" alt="Orchestra" /></p>

<p><small>Photo credits: Bradley Griffin</small></p>

<blockquote><p>The conductor of an orchestra doesn’t make a sound. He depends for his power on his ability to make others powerful. My job was to awaken possibility in other people. And you know how you find out? You look at their eyes. If their eyes are shining you know you’re doing it. - Benjamin Zander</p></blockquote>

<p>Recently, I’ve talked to a few companies as I was going through a job search process after a long time. One of my interviewers asked me this question: “What’s the difference between managing one team vs. multiple teams?”</p>

<p>I’ve been leading multiple teams for a few years. But, I realized I didn’t have a crisp answer to this question. Now with the benefit of time to think about it, here’s how I see the difference.</p>

<p>My mental model to answer this question is best described around the concept of a team’s mission - the reason for a team to exist in the first place.</p>

<p><strong>A line manager builds and inspires her team to deliver the team’s mission</strong>. A great manager understands and fully commits to the team’s mission herself. She inspires individuals on the team’s mission so that the team creates more impact than the sum of individuals. She also works with her peer line managers on a larger mission.</p>

<p><strong>A manager of multiple teams designs empowered teams to deliver a larger mission</strong>. She hires and leads line managers such that each team takes ownership of a part of the larger mission. Additionally, she creates a team of line managers to foster cross-team innovation.</p>

<p>There are other ways the two jobs differ, such as, one:one with only direct reports vs. skip levels, being strategic vs. tactical, growing leaders vs. individuals, etc. But the main difference is running a team vs. designing teams on more specific missions.</p>

<p>If you organically grew into a manager of multiple teams, you may want to think about how your job is different than before. Even if you aren’t looking for a new job, this exercise will get you clarity about your current job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communication Hacks I Learned From Job Interview Feedback]]></title>
    <link href="http://smsohan.com/blog/2020/10/11/communication-hacks-from-interview-feedback/"/>
    <updated>2020-10-11T17:07:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/10/11/communication-hacks-from-interview-feedback</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/gift.jpg" alt="Gift" /></p>

<p><small>Photo credits to <a href="https://www.flickr.com/photos/threar/">UnknownNet Photography</a></small></p>

<p>I’ve been in search of a new job for the past few months. Thanks to my recruiters and interviewers, I’ve received some useful feedback. Many thanks to them for this gift.</p>

<p>&#8220;<strong>Needs more energy</strong>&#8221; - This was the most memorable feedback I got. It was from the VP of a company. My interview with him was the last of the five on the same day. My day went well until then. But I was also drained from 4 hours of back to back video interviews on the same day before meeting him. Honestly, when I received this feedback, I felt heartbroken and defensive. It took me some time to digest it and take actions based on this feedback. But eventually I developed some communication hacks to remain energetic. I’m now mindful about staying energetic, often taking body breaks and keeping a water bottle or coffee on my desk. I am taking handwritten notes while listening on video calls. Also, when I’m on video for hours, I proactively tell people about being camera fatigued.</p>

<p>Another feedback I received was, &#8220;<strong>some answers could be more direct and crisp</strong>&#8221;. With remote communication, sometimes I find it hard to read audience reaction. Based on this feedback, I’ve adopted a communication hack where I do a short and direct answer first and then ask if I should elaborate further.</p>

<p>I was somewhat surprised with one feedback from a system design interview. The feedback was &#8220;<strong>needs to discuss design trade-offs</strong>&#8221;. After some time had passed, I realized what happened there. While I mentioned some design trade-offs, I didn’t put a lot of emphasis on discussing design trade-offs. Moreover, apart from designing the system, I did’t ask about any secondary design topics that were of interest to the interviewer. I’m now more mindful about eliciting these secondary goals.</p>

<p>When I interviewed for an individual contributor (IC) role at a company I deeply admire, the feedback I got was &#8220;<strong>needs to clearly know if he wants to be an IC or a manager</strong>&#8221;. This was bang on. I was attracted to the company a lot but they only had IC roles open at that time. I consider myself a capable enough engineer and technical contributor still. But during that interview, I fumbled to honestly answer how my career aspirations at this time would be fulfilled by going from management into an IC role. Thinking about this feedback gave me the clarity that I indeed want to remain a people leader at this stage in my career.</p>

<p>A few interviewers asked me to talk about my management philosophy. Even the very best leaders differ in their philosophy. So, after I answered this question, I asked one of my interviewers immediately if he had any feedback about my philosophy. He shared this: “Thanks for your answer. Creating accountability is a big part of my leadership philosophy&#8230;”.  <strong>This is one feedback where I decided not to take any action</strong>. I like what he said and I value accountability. But my leadership philosophy is what I truly and strongly believe in, and at present, I find accountability to be a by-product instead of a key philosophy.</p>

<p>There were many positive feedback shared as well. I find that positive feedback has the same effect as that of a good massage; it feels nice to receive one from time to time, but the feeling tappers down soon after. On the other hand an actionable feedback where I can improve is a gift that keeps giving. Whenever an interviewer gave me the opportunity to ask questions, I always asked if they had any feedback for me. Most didn’t share any actionable feedback citing company policy as a reason. But the ones that did, I’ll be forever grateful to them.</p>

<p>When I interview candidates as an interviewer, I ask them to share feedback about the interview. I have deep respect for candidates who are brave enough to suggest specific changes. If they get hired, they become value multiplier employees. However, as an interviewee, <strong>I didn’t have a single interviewer who asked me to provide feedback :-(</strong> I’m sure company policies don’t limit it.</p>

<p>So, when you get a chance, share some feedback. It’s a gift. Give generously. Also, seek feedback and appreciate when you get it. If you have feedback about this post or any, I’m @smsohan on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context]]></title>
    <link href="http://smsohan.com/blog/2020/09/15/context/"/>
    <updated>2020-09-15T13:08:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/09/15/context</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/misfit.jpg" alt="Misfit" /></p>

<p>Image credits to <a href="https://flic.kr/p/5kNo6M">NCinDC</a></p>

<p>Context is everything. Due to a context mismatch projects such as exporting democracy, agile transformations, building startups, losing weight, mindfulness or anything you can think of fail to repeat.</p>

<p>Context is formed by <strong>why / what / who / when / where / how</strong>, each of these being a critcial part. Most often it&#8217;s common to focus on the how alone - forgetting the rest of the context while adopting a recipe for success in business. Some get overly <a href="https://en.wikipedia.org/wiki/Simon_Sinek">influenced by speakers</a> and focus on only a subset of the context. Reality is, it&#8217;s almost impossible to find an excact duplicate of any one context. So, while copying solutions from one context, we must adapt to account for the uniqueness of our own context.</p>

<p>A lot of innovation lies in the context gap - where one can find clever ways to adapt solutions from one context into another. I&#8217;ll give you one such example, did you know Uber runs a motorcycle based rideshare in <a href="https://www.uber.com/en-BD/blog/dhaka/dhaka-moto/">many countries</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change]]></title>
    <link href="http://smsohan.com/blog/2020/08/31/change/"/>
    <updated>2020-08-31T14:02:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/08/31/change</id>
    <content type="html"><![CDATA[<h2>Manager&#8217;s Mind</h2>

<p>As managers, we have the benefit of view because we have our eyes on  longer term goals. To achieve those goals, we often have to introduce a change. For example, we may want to change how a team is formed or what product a team works on based on new business needs or opportunities. So, we put a lot of thought into it and propose our plan to the team hoping the following reaction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">team</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">excitement</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before proposing such a change, we&#8217;ve analyzed various options, including the option of keeping everything as-is. We&#8217;re fully convinced that indeed the change we&#8217;re going to propose is the best option. We are excited with this new way that&#8217;ll make our teams more productive. As caring managers, we are thrilled because we believe this will make the team happier.</p>

<h2>Team&#8217;s Mind</h2>

<p>However, most of the team&#8217;s reaction is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">team</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">panic</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Honestly, the team has a great chemistry going on, they have fun and work well together, they are already so productive shipping products using technology they use today. So, at best a change seems random, but more commonly perceived as a mindless act of &#8220;management BS&#8221;.</p>

<h2>The Deadlock</h2>

<p>At this stage, both the manager and the team are in a deadlock, each party   fairly confident in their judgement, failing to appreciate the concerns of the other. At this point, it&#8217;s the manager&#8217;s job to not only break the deadlock but also to make sure s/he carefully listens to the team and motivates them. Ideally, we can data-drive these conversations while being mindful of individual emotions.</p>

<h2>The Checklist</h2>

<p>Here&#8217;s a checklist I&#8217;m following myself as a manager as I&#8217;m trying to orient my teams from technology driven teams to more full-stack product mission oriented teams:</p>

<ol>
<li>Motivate the team with a why. <em>e.g. Go from tech-oriented teams to product mission teams so that all of you can deliver products to customers&#8230;</em></li>
<li>Listen to the team. Multiple one on one sessions if needed. <em>e.g. Let&#8217;s discuss about your concerns regarding tech debt with this change&#8230;</em></li>
<li>Discuss changes to your plan based on the team&#8217;s feedback. <em>e.g. You&#8217;ll have full ownership of the technology to serve your mission&#8230;</em></li>
<li>Layout your evidence. <em>e.g. We built an improved search feature that we couldn&#8217;t ship to customers for months because the UI team was busy&#8230;</em></li>
<li>Discuss pros and cons of alternatives you thought about. <em>e.g. Another option is to keep as-is, but that&#8217;d mean we must improve cross-team project management to reduce hand-off related delays&#8230;</em></li>
<li>Present your metrics to achieve. <em>e.g. Time from dev to customer, performance metrics,&#8230;</em></li>
<li>Present an iterative and incremental plan with the option to change course based on metrics. <em>e.g. Let&#8217;s do this with one team for one month&#8230;</em></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When I Applied KonMari to My Calendar]]></title>
    <link href="http://smsohan.com/blog/2020/07/17/when-i-applied-kon-mari-to-my-calendar/"/>
    <updated>2020-07-17T15:26:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/07/17/when-i-applied-kon-mari-to-my-calendar</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/marie_kondo.jpg" alt="Marie Kondo" /></p>

<blockquote><p>“I&#8217;d like to tidy up the entire planet. I would go anywhere if there were something that needs tidying.” - Marie Kondo</p></blockquote>

<p>Well, she came to my work calendar in spirit. Let’s start with some backstory.</p>

<p>When I was developer, my typical day looked like this: one standup meeting and then pretty much the rest of the day in coding. Sometimes I paired up or jumped on a whiteboard session with my coworkers to hash things out. Apart from this, we had bi-weekly meetings for demo, retrospective and planning. All in all, less than 3 hours of meeting on a 40 hour work week.</p>

<p>I’ll admit, the 3 hours of meeting each week felt like a “waste of time”.</p>

<p>In my current role, I’m leading a total of 8 small teams organized as follows:
1. Web (6) - Production engineering, UI/UX, identity and access management, and 3 feature teams
2. Data (2) - Stream and search teams</p>

<p>I’m very blessed to have capable leaders for these teams. To ensure I support my leaders and provide the teams with necessarily context, my typical days in my current role are very different from my developer days. Honestly, when we grew too fast, I was feeling lost in so many meetings. It felt like my job turned into just going to meetings and even if I had an open slot, I was often too mentally overwhelmed to make a good use of it.</p>

<p>Thanks to the mindfulness training that Cisco offered to our whole group. It inspired me to rethink my work hours. After a few trial attempts, I have now finally settled into a routine.</p>

<p>First, I have reduced my meeting obligations. I only attend meetings where I need to take part in decision making. I follow the Amazon way of producing a written document if I host the meeting. This applies to my one:one meetings as well.</p>

<p>Second, I have shuffled my week such that I can have each day of the week organized around a theme. It’s not perfect, but for each day of the week, I clearly know the main theme of the day. It transformed my mental state from “feeling lost” into “looking forward” to the day. It also reduced the wild levels of context “swing”.</p>

<p>Today, here’s how my weeks look like:</p>

<ol>
<li><strong>Monday is planning day</strong> - web team.</li>
<li><strong>Tuesday is product day</strong> - to work on engineering problems related to our product roadmap.</li>
<li><strong>Wednesday is people day</strong> - one:one.</li>
<li><strong>Thursday is maker day</strong> - hands-on R&amp;D.</li>
<li><strong>Friday is planning day</strong> - data team.</li>
</ol>


<p>Because our teams plan for two-week cycles, I have a decent amount of free spots on Monday and Friday every other week. This allows me to help the team, mostly with pair programming or discussing potential solutions to imminent problems. Also, it frees up space for ad-hoc meetings and hiring activities.</p>

<p>The transition from a developer to a manager and then to a manager of managers can be jarring for the “makers” among us. I hope shaping your week in themes like the ones I shared here will help calm things down for you.</p>

<p>Happy leading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[People Management and Diagnosing Low Performance]]></title>
    <link href="http://smsohan.com/blog/2020/05/18/engineering-management-and-diagnosing-low-performance/"/>
    <updated>2020-05-18T18:54:00-06:00</updated>
    <id>http://smsohan.com/blog/2020/05/18/engineering-management-and-diagnosing-low-performance</id>
    <content type="html"><![CDATA[<p>Beginning with a story here. Back in 2008, I was a couple of years out of college and working for a software company in Dhaka, Bangladesh. Like many of my classmates from my college, I was studying GRE alongside my job for a PhD admission in a reputable US university. That process being long and uncertain, I also applied for an MBA program at the University of Dhaka as a backup plan. The GRE preparation came in very handy and I qualified for the evening MBA program. I started MBA classes in January 2009 before the universities in USA and Canada made their decision on my application. There, I took a course on Management. I was too naive and still too much an engineer to pay attention.</p>

<p>But this image that our teacher drew on the board got stuck in my head to this day.</p>

<p><img src="http://smsohan.com/images/perf.jpg" alt="Performance" /></p>

<p>Fast forward ten years and I still like how cleanly it captures the essence of high performance of an employee as a combination of the employee&#8217;s ability and motivation in a suitable environment.</p>

<p>Given this is how high-performers are, it&#8217;s possible to plot a similar graph for low performers as a diagnostic report. If such a diagnosis is right, it can provide a valuable strategy for managers and employees to work towards improving employee performance. For example, if an employee lacks skill and motivation but fits very well within the work environment, a manager can focus on skills training and suggesting therapies to increase motivation. Similarly, if an employee is unable to acquire the skills for a particular job, focusing on motivation or changing the environment for that employee may not fix the low performance issue.</p>

<p>Based on the past 14 years of my time in the industry, I&#8217;ve shared some symptoms of low performance that I&#8217;ve seen. You can use this as an exercise sheet to plot your diagnosis of the low performer&#8217;s chart.</p>

<ol>
<li><p><strong>New hire too slow to ramp up:</strong> You were impressed by a candidate during the interview. The same interview process was used to find many high performers in the past. But this employee is struggling to ramp up.</p></li>
<li><p><strong>Knowledge vs. application:</strong> You have an employee who&#8217;s always studying job related skills and shows a great deal of interest in training, but can&#8217;t translate the knowledge into application.</p></li>
<li><p><strong>Complains about the lack of time</strong>: You have an employee struggling to produce the best outcome. In your one:one meeting, the employee always complains about lack of time even after you give him/her the time.</p></li>
<li><p><strong>Frequently runs into conflicts:</strong> Your dream employee is causing too many conflicts within the team.</p></li>
<li><p><strong>Can&#8217;t write thoughts down:</strong> You have an employee who&#8217;s unhappy about things. When you want them to write it down, they are unable to produce a crisp writeup about the problems and potential solutions.</p></li>
<li><p><strong>Doesn&#8217;t make hard decisions timely:</strong> You have a leader that stays away from making hard decisions. In their mind, they want someone else to make them take the hard decision.</p></li>
<li><p><strong>Isn&#8217;t aware of better ways to solve old problems:</strong> You have an employee who&#8217;s expert in certain ways of delivering work but lacks awareness of newer and more efficient ways.</p></li>
<li><p><strong>Doesn&#8217;t take initiative:</strong> You encourage and reward employees to take initiatives that help the business. Yet, you see an employee is not taking part.</p></li>
</ol>


<p>The good news is, once a diagnosis is accurate for such symptoms of low performance, you can move ahead and implement a concrete improvement strategy for your employee. The clarity of this simple method helped me in many situations.</p>

<p>I hope this helps you, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Just Love to Read Code]]></title>
    <link href="http://smsohan.com/blog/2020/02/28/i-just-love-to-read-code/"/>
    <updated>2020-02-28T16:05:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/02/28/i-just-love-to-read-code</id>
    <content type="html"><![CDATA[<p>This week I took a couple of days to focus on my mid-thirties. It got me thinking about what I actually love doing as a hobby. The list is fairly small, walks with the family, soccer, tennis, coffee with friends, reading, writing, car videos, and Netflix.</p>

<p>Thinking about how I spend my idle time, I realized that I missed two things that I actually love and spend a fair amount of time on: stock markets and reading open-source code.</p>

<p>Ruby on Rails got me into the habit of reading code. Back in the day before bundler, the whole Ruby on Rails framework was in the plugins directory of our code. It had little documentation. A lot of methods accepted options as arguments, and looking at the source code was often the only way to find what options were available. However, that necessity soon turned into a hobby for me, and I keep reading source code of open-source projects just for fun. GitHub mobile UI helps a lot.</p>

<p>To name a few, I read some part of the source code of Ruby on Rails, Ruby, RSpec, BackboneJS, ASP.NET MVC, Golang, UnderscoreJS, VueJS, ReactJS, Terraform, Chef, Jenkins, Lucene, ElasticSearch, Docker, and many other popular tools and libraries.</p>

<p>During this mid-thirty reflection, I decided to start a YouTube channel called ReadCodeWithSohan where I&#8217;ll be screencasting as I read some part of an open-source project. Today, I posted my first video on reading the JQuery source code, which I didn&#8217;t really read until now. I hope you enjoy it.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/no2lLfLyg7c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Me]]></title>
    <link href="http://smsohan.com/blog/2020/02/08/working-with-me/"/>
    <updated>2020-02-08T12:38:00-07:00</updated>
    <id>http://smsohan.com/blog/2020/02/08/working-with-me</id>
    <content type="html"><![CDATA[<p>Since I commonly work with a diverse group of people, this post is a way for me to broadcast some quick tricks that may help our working relationship. When we work together, let&#8217;s do this:</p>

<p><strong>Trust</strong> is only earned when it&#8217;s mutual. Let&#8217;s work with this shared belief.</p>

<p><strong>Context</strong> is everything. Most importantly, show me <strong>why</strong> we need to work on something. If the answer isn&#8217;t clear in your mind, we can work together to build a crisp context.</p>

<p><strong>Solutions</strong> for problems you&#8217;re raising. Ideally, you&#8217;ve already thought about a few solutions with some measure of feasibility for each, and you come with an open mind. I know you care about the problem only if you spent some time thinking about a few solutions.</p>

<p><strong>Clarity</strong> between your evidence and assumptions. Assumptions are often essential to move ahead, but treating assumptions as evidence can be harmful.</p>

<p><strong>Output</strong> is the focus, our egos aren&#8217;t. That said, let&#8217;s be mutually respectful.</p>

<p><strong>Time</strong> is managed. Let&#8217;s manage our expectations given the time we have. Blaming the shortage of time shows a lack of skill.</p>

<p><strong>Writing</strong> is a great thought exercise and good write-up scales infinitely. Let&#8217;s write and rewrite our thoughts, specially when we&#8217;re unclear about those.</p>

<p><strong>Standup comedies, biography, soccer, politics, investment, tech, leadership, Netflix, movies, and similar topics</strong> are cool. Sorry, not much of a Hockey or Basket Ball fan. Mostly a passive music listener and happy to listen whatever is on radio or a YouTube playlist.</p>

<p>If you have a similar list, I&#8217;d be happy to read and respect it. Please send along.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How About Full-Stack Micro-Services?]]></title>
    <link href="http://smsohan.com/blog/2019/11/17/how-about-full-stack-micro-services/"/>
    <updated>2019-11-17T13:47:00-07:00</updated>
    <id>http://smsohan.com/blog/2019/11/17/how-about-full-stack-micro-services</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/patched_quilt.jpg" alt="patched quilt" /></p>

<p><small>
Source: <a href="https://flic.kr/p/pUW8f9">Audrey on Flickr</a>
</small></p>

<p>I think nobody knows how to stitch together an app with full-stack micro-services. I have the following open-questions if you disagree. Of course, if we could send people to moon, we could solve these problems. But the question is, is it worth and should your team  solve these problems? Especially, for small teams?</p>

<ol>
<li>How to render the UI from tens of independent micro-services into the same web page?</li>
<li>How to ensure the JS and CSS libraries are compatible within all of the independent services?</li>
<li>How to aggregate logs from the services to be able to trace a user / request / transaction?</li>
<li>How to measure and reduce overall latency and spinner-fatigue?</li>
<li>Which off-the-shelf framework can be used for achieving the above?</li>
</ol>


<p>Headless micro-services are easy to build, but in many ways are similar to integration over database. It helps scaling teams, but even if you have many teams, I&#8217;d say extract service where it makes sense instead of adopting that model as the default choice.</p>

<p>I suggest being careful about following conference talks and blogs on how cool micro-services are. It may work for big and gig tech. They don&#8217;t always turn a profit! Your small teams are more likely to drown in worthless complexity from a micro-service architecture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from The VoxxedDays Banff, 2019]]></title>
    <link href="http://smsohan.com/blog/2019/09/23/notes-from-the-voxxeddays-banff/"/>
    <updated>2019-09-23T15:10:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/09/23/notes-from-the-voxxeddays-banff</id>
    <content type="html"><![CDATA[<p><img src="http://smsohan.com/images/voxxed_banff.png" alt="VoxxedDaysBanff2019" /></p>

<p>Gone are the days when I used to go to a ton of local developer meetups. After <a href="http://smsohan.com/blog/2019/06/05/polyglot-yyc-2019-my-first-unconference/">Polyglot YYC</a>, this was the second conference I joined this year. This was a 50/50 event for me in terms of like vs. dislike. Here goes my notes:</p>

<p>Ix-Chel Ruiz presented the keynote to start the day. Her storytelling style reminded me of WWII movies, where a lot of cloudy and gloomy scene keep getting darker and darker, ending with a deep sense of sadness. Ix-Chel used quotes from the likes of <a href="https://en.wikipedia.org/wiki/Scott_Galloway_(professor)">Prof. Galloway</a> and Elon Musk to tell a story about how the modern tech is creeping into our private lives. I wish she had prepared for the keynote a little better. She paced it so slowly yet ran out of the material half-way through the slot. In a way I liked the early finish because I just wanted to feel optimistic about the future.</p>

<p>The stunning view of Banff landscape brightened up the mood a bit:</p>

<p><img src="http://smsohan.com/images/banff.jpg" alt="banff" /></p>

<p>There were 4 other talks on the same day and I liked the talk on <a href="https://vuejs.org">Vue.js</a> and <a href="https://vuetifyjs.com/en/">Vuetify</a> by <a href="https://www.davepaquette.com">Dave Paquette</a>. Since, I use VueJS at work, it was easier to relate to. Dave showed us how he&#8217;s using Vue.js to render a real-time collaborative UI for complex seating requirements at <a href="https://www.flyovercanada.com">FlyOver Canada</a>.</p>

<p>Among other talks, there was one on data management for machine learning and another one on Kotlin, I liked these  talks but didn&#8217;t fully relate with the topics.</p>

<p>There was a talk on using Kafka for geo-fencing applications. The presenter could&#8217;ve spent more time on the parts of kafka that makes it a compelling case for using in geo-fencing applications. Instead, he delved into the code, java, and jar files.</p>

<p>There was another talk on using <a href="https://eventstore.org">EventStore</a> for event sourcing. The presenters set the story saying that they had an opportunity to try new technologies while rewriting a &#8220;monolithic&#8221; application and they used EventStore with &#8220;multi-services&#8221; to implement it so it&#8217;s easier to evolve the system. I&#8217;d love to see some evidence of the desired outcome, that&#8217;d be motivating. But in the end it was about the &#8220;how&#8221; instead of the &#8220;why&#8221;.</p>

<p>One thing to note is, even for talks that could be more engaging, I still learned quite a few new things.</p>

<p>Beyond the talks, I like going to conferences as it opens the opportunity to meet new people and some known faces. In hindsight, had I known about this event before the talks were finalized, we&#8217;d have submitted a few proposals from Cisco. Looking forward to the next round for an opportunity to share some innovative work we&#8217;re doing at Cisco.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What We Learned About Feature Flags in Five Years]]></title>
    <link href="http://smsohan.com/blog/2019/08/13/what-we-learned-about-feature-flag-in-five-years/"/>
    <updated>2019-08-13T21:56:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/08/13/what-we-learned-about-feature-flag-in-five-years</id>
    <content type="html"><![CDATA[<p>Looking at our git logs from <a href="https://www.cisco.com/c/en/us/products/security/amp-for-endpoints/index.html">Cisco AMP for Endpoints</a> Console, I see that we introduced feature flags back in January, 2014. The reason I got interested in it is because even after all these years of use, today I had to build a new concept on our feature flag code. If you&#8217;re already using feature flags or thinking about adding feature flags to your project, this experience report may be helpful.</p>

<p><img src="http://smsohan.com/images/switchboard.jpg" alt="switchboard" /></p>

<p><small>
Photo credits to <a href="https://flic.kr/p/9yJU3j">Michael Newton</a>
</small></p>

<p>Back in 2014, we were growing as a team, but wanted to keep working on a single shared code. We perceived  that the productivity gain of multiple teams working on a shared code would outweigh cross-team dependency issues. As we started working on multiple features in parallel, mostly independent with different release dates, we saw unfinished work on one feature was blocking the release of a completed one. After some research, we decided to introduce feature flags in our code.</p>

<p>First, we read <a href="https://martinfowler.com/bliki/FeatureToggle.html">Martin Fowler&#8217;s</a> article on this topic as a guideline. Today, <strong>we have 195 feature flags in production</strong>. Over time, we have extended the use of feature flags with new concepts and I wanted to document it here for everyone. Fowler&#8217;s blog also published a more <a href="https://martinfowler.com/articles/feature-toggles.html">detailed and updated post</a> later. The taxomony used here is different from Fowler&#8217;s because I find the following to be more relevant for our product.</p>

<ol>
<li><strong>Database stored</strong>: We store the feature flags in the main database so that the features can be toggled without needing a code deployment.</li>
<li><strong>Cached</strong>: Feature flag lookups are cached for performance.</li>
<li><strong>Temporary vs. permanent</strong>: We mark some feature flags as temporary when the primary goal is to incrementally release code to production. Temporary feature flags are regularly cleaned once the feature is complete. 13/195 currently used feature flags are marked temporary.</li>
<li><strong>Self-serve</strong>: We tag some feature flags as self-serve where users need to opt-in to use the feature.</li>
<li><strong>Limited availability</strong>: For self-serve feature flags, we tag some features as limited availability. It allows us to release self-serve features to selected customers.</li>
<li><strong>Globally enabled</strong>: We have a mechanism to globally enable or disable a feature flag. 131/195 feature flags are currently marked globally enabled. This number varies by deployed environments.</li>
<li><strong>Enabled for all, but</strong>: We have a mechanism for enabling a feature flag for all but some specific targets.</li>
<li><strong>Multi-target</strong>: Sometimes we attach a single feature flag to multiple domain objects such as tenant, user, subscription tier, etc.</li>
<li><strong>Hierarchical</strong>: We use a fallback mechanism for feature check. For example, the check if a user have file upload permission, we check it for the specific user, then fall back to the tenant it belongs to, and finally fall back to the feature itself being globally enabled.</li>
<li><strong>Code generator</strong>: We use a single-command code generator to introduce a new feature flag to our code. It takes care of the database migration, seed entry, and code references.</li>
<li><strong>Circuit-breaker</strong>: For integration with external services, we&#8217;ve used feature flags as a circuit-breaker to gracefully handle third-party downtime.</li>
<li><strong>Environment-flags</strong>. We deploy the product to multiple geographic environments, including a private cloud model. Certain features behave differently based on the deployment. Using feature flags make it easy to develop and test such differences before deploying to each target environment.</li>
</ol>


<p>There are reusable libraries and services such as <a href="https://launchdarestkly.com">LaunchDarkly</a> that provide rich APIs and user interfaces for feature flags. At this point, even with all the aforementioned concepts, our custom implementation of feature flag is quite straight-forward and easy to evolve. It has been a key ingredient for our frequent iterative deployments with 6 teams working on diverse features in parallel on the same product.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Architecture is all about Ugly Boxes and Lines - My Wishlist]]></title>
    <link href="http://smsohan.com/blog/2019/08/10/software-architecture-is-all-aboout-ugly-boxes-and-lines/"/>
    <updated>2019-08-10T20:28:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/08/10/software-architecture-is-all-aboout-ugly-boxes-and-lines</id>
    <content type="html"><![CDATA[<p>In my last post, I claimed <a href="http://smsohan.com/blog/2019/08/02/all-talk-no-show-software-architecture/">software architecture is all talk and no show</a>. When we have a visible one, it&#8217;s a bunch of poorly drawn boxes and lines. I don&#8217;t have a problem with boxes or lines, but I do like beautiful drawings.</p>

<p>Despite many standards, we still mostly use  whiteboard drawing of boxes and lines for sharing software design as we build new systems or introduce new team members. Where it sucks is the lack of evolution and context of the rest of the system that&#8217;s not drawn on the board.</p>

<p>A digital repro of software architecture diagrams often happen in PowerPoint or similar tools that allow us to draw boxes and lines. This process is so rough that people just give up.</p>

<p>At work, I have been using <a href="http://www.websequencediagrams.com">WebSequenceDiagram</a>. While it&#8217;s still not an eye-candy, I like the fact that you can draw a diagram from using plain text. Consider this as an input to create the accompanying diagram:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title Toilet Flush System
</span><span class='line'>User -&gt; Flush Lever: Push
</span><span class='line'>Flush Lever -&gt; Outlet Valve: Open
</span><span class='line'>Outlet Valve -&gt; Toilet Bowl: Water
</span><span class='line'>Outlet Valve -&gt; Inlet Valve: Open</span></code></pre></td></tr></table></div></figure>


<p><img src="http://smsohan.com/images/Toilet_Flush_System.png" alt="Sequence Diagram" /></p>

<p>While this text to sequence diagram is a great achievement for a tool, I don&#8217;t see such tools for software architecture diagrams. Here&#8217;s my wishlist of features that I&#8217;d want in a software architecture tool:</p>

<ol>
<li><strong>Text input</strong>. Allows us to easily create the diagrams and use all the version control features.</li>
<li><strong>Map like UX</strong>: Allows us to easily transition between higher and lower level components.</li>
<li><strong>Beautiful</strong>.</li>
</ol>


<p>Do you know any? Do these requirements make sense?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Talk No Show: Software Architecture]]></title>
    <link href="http://smsohan.com/blog/2019/08/02/all-talk-no-show-software-architecture/"/>
    <updated>2019-08-02T08:46:00-06:00</updated>
    <id>http://smsohan.com/blog/2019/08/02/all-talk-no-show-software-architecture</id>
    <content type="html"><![CDATA[<p>We have a problem with software architecture. Let&#8217;s face it. Find the architecture diagrams of the products you&#8217;re working on and answer these questions:</p>

<ol>
<li>Did you find it?</li>
<li>Does everyone in your team know where to find it?</li>
<li>Is it up-to-date?</li>
<li>Can you see how this system scales, handles failover, monitors performance, or how it&#8217;s secured?</li>
<li>Can you see how it evolved over time?</li>
<li>Can you train a new team-member using this diagram?</li>
</ol>


<p>This is the first micro-post of a series of such as I aim to build a compelling case for fundamentally changing software architecture diagrams.</p>
]]></content>
  </entry>
  
</feed>
